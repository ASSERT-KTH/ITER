bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT;  [CE]  cannot  find  symbol  matrice  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedL  =  cachedLT;	  ((    RealMatrix)matrix).cachedL    =    matrix;    	non-compiled	[CE]  cannot  find  symbol  matrice	78	None	replace
2	[BUG]  [BUGGY]  ((  RealMatrix)matricule).relativeSymmetryThreshold();  [CE]  cannot  find  symbol  matricule  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matricule).relativeSymmetryThreshold();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matricule).relativeSymmetryThreshold();	  ((    RealMatrix)matrix).relativeSymmetryThreshold();    	non-compiled	[CE]  cannot  find  symbol  matricule	94	None	replace
3	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  +  i;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  +  i;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  +  i;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    +    i;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	67	None	replace
4	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  i;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  i;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  i;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    +    i;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	67	None	replace
5	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  i;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  i;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  i;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    +    i;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	67	None	replace
6	[BUG]  [BUGGY]  LTData  =  matrix.getDataRef();  [CE]  cannot  find  symbol  LTData  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData  =  matrix.getDataRef();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	LTData  =  matrix.getDataRef();	  lTData    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol  LTData	108	None	replace
7	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData  lTData  =  matrix.getDataRef();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	LTData  lTData  =  matrix.getDataRef();	  lTData    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	42	5	add
9	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	42	5	add
10	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  LTData  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    LTData  =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  LTData	42	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	42	5	add
12	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	42	5	add
13	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
14	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  3;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  +  3;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  3;	  final    double[]    lI    =    lTData[i]    +    4;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	22	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  unclosed  string  literal	88	None	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  unclosed  string  literal	88	None	replace
17	[BUG]  [BUGGY]  ((  RealMatrix)cachedLT).cachedL  =  matrix.clone();  [CE]  cannot  find  symbol  cachedL  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)cachedLT).cachedL  =  matrix.clone();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)cachedLT).cachedL  =  matrix.clone();	  ((    RealMatrix)matrice).cachedL    =    cachedLT.clone();    	non-compiled	[CE]  cannot  find  symbol  cachedL	60	None	replace
18	[BUG]  [BUGGY]  ((  RealMatrix)cachedL).cachedL  =  matrix.clone();  [CE]  cannot  find  symbol  cachedL  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)cachedL).cachedL  =  matrix.clone();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)cachedL).cachedL  =  matrix.clone();	  ((    RealMatrix)matrice).cachedL    =    cachedLT.clone();    	non-compiled	[CE]  cannot  find  symbol  cachedL	60	None	replace
19	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData[i].doubleValue();  [CE]  array  required,  but  RealMatrix  found  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData[i].doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i]  *  lTData[i].doubleValue();	  final    double[]    lI    =    cachedLT[i]    *    lTData.doubleValue();    	non-compiled	[CE]  array  required,  but  RealMatrix  found	48	None	replace
20	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData[i];  [CE]  array  required,  but  RealMatrix  found  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i]  *  lTData[i];	  final    double[]    lI    =    cachedLT[i]    *    lTData.doubleValue();    	non-compiled	[CE]  array  required,  but  RealMatrix  found	48	None	replace
21	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  2];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	final  double[]  lI  =  lTData[i  *  2];	  final    double[]    lI    =    lTData[i    +    2];    	compilable	  [FE]  NotSymmetricMatrixException  	55	7	replace
22	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  2];  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  2];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  *  2];	  final    double[]    lI    =    lTData[i    +    2];    	compilable	  [FE]  NotSymmetricMatrixException  	55	7	replace
23	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix.doubleValue();  [CE]  cannot  find  symbol  cachedLT  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  matrix.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    matrix.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedLT	17	None	replace
24	[BUG]  [BUGGY]  ((  RealMatrix)matricule).cachedL  =  matrix.doubleValue();  [CE]  cannot  find  symbol  matricule  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matricule).cachedL  =  matrix.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matricule).cachedL  =  matrix.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    matrix.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  matricule	17	None	replace
25	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  lTQ);  cachedL  =  null;  [CE]  cannot  find  symbol  lTQ  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData(i,  lTQ);  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i,  lTQ);  cachedL  =  null;	  lTData    =    matrix.getData(i);    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  lTQ	14	None	replace
26	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  cachedL);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData(i,  cachedL);  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i,  cachedL);	  lTData    =    matrix.getData(i);    cachedL    =    null;    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	14	None	replace
27	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	66	None	replace
28	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	66	None	replace
29	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;  lTData  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	66	None	replace
30	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedLT);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedLT);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedLT);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
31	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedL);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedL);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedL);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
32	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedL.length);  [CE]  cannot  find  symbol  length  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedL.length);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i,  cachedL.length);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  length	92	None	replace
33	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  order);  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  order);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i,  order);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
34	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i][0],  lTData[i];  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedLT[i][0],  lTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i][0],  lTData[i];	  final    double[]    lI    =    lTData[i][0],    cachedLT[i];    	non-compiled	[CE]  ']'  expected	95	None	replace
35	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0],  cachedL[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0],  cachedL[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0],  cachedL[i];	  final    double[]    lI    =    lTData[i][0],    cachedLT[i];    	non-compiled	[CE]  ']'  expected	95	None	replace
36	[BUG]  [BUGGY]  final  double[]  lI  =  cachedL[i][0],  lTData[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedL[i][0],  lTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedL[i][0],  lTData[i];	  final    double[]    lI    =    lTData[i][0],    cachedLT[i];    	non-compiled	[CE]  ']'  expected	95	None	replace
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
38	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	For(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  	30	None	replace
39	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData.clone();  [CE]  cannot  find  symbol  cachedLT  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData.clone();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  lTData.clone();	  ((    RealMatrix)matrix).cachedL    =    lTData.clone();    	non-compiled	[CE]  cannot  find  symbol  cachedLT	59	None	replace
40	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix.clone();  [CE]  cannot  find  symbol  cachedLT  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix.clone();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  matrix.clone();	  ((    RealMatrix)matrix).cachedL    =    lTData.clone();    	non-compiled	[CE]  cannot  find  symbol  cachedLT	59	None	replace
41	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.clone();  [CE]  inconvertible  types  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.clone();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)lTData).cachedL  =  matrix.clone();	  ((    RealMatrix)matrix).cachedL    =    lTData.clone();    	non-compiled	[CE]  inconvertible  types	59	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
43	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
44	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
45	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	33	None	replace
49	[BUG]  [BUGGY]  L  =  matrix.getDataRef();  cachedL  =  null;  [CE]  cannot  find  symbol  L  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  L  =  matrix.getDataRef();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	L  =  matrix.getDataRef();  cachedL  =  null;	  lTData    =    matrix.getDataRef();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  L	104	None	replace
50	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDefiniteMatrix;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	46	None	replace
51	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)i).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)i).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)i).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDefiniteMatrix;    	non-compiled	[CE]  inconvertible  types	46	None	replace
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  maxDelta)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  maxDelta)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  maxDelta)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
54	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData[i];  [CE]  cannot  find  symbol  cachedL  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  lTData[i];	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i];    	non-compiled	[CE]  cannot  find  symbol  cachedL	80	None	replace
55	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix[i];  [CE]  cannot  find  symbol  cachedL  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  matrix[i];	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i];    	non-compiled	[CE]  cannot  find  symbol  cachedL	80	None	replace
56	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedLT[i];  [CE]  cannot  find  symbol  cachedLT  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedLT[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  cachedLT[i];	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i];    	non-compiled	[CE]  cannot  find  symbol  cachedLT	80	None	replace
57	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i  +  1];  [CE]  incompatible  types  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lTData  =  lTData[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lTData  =  lTData[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1];    	non-compiled	[CE]  incompatible  types	37	None	replace
58	[BUG]  [BUGGY]  final  double[]  lLi  =  lTData[i  +  1];  [CE]  cannot  find  symbol  lI  [FE]          NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lLi  =  lTData[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lLi  =  lTData[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  lI	37	None	replace
59	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  ltData.doubleValue();  [CE]  cannot  find  symbol  cachedLT  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  ltData.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  ltData.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    ltData.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedLT	69	None	replace
60	[BUG]  [BUGGY]  ((  RealMatrix)ltData).cachedL  =  matrix.doubleValue();  [CE]  cannot  find  symbol  ltData  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)ltData).cachedL  =  matrix.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)ltData).cachedL  =  matrix.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    ltData.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  ltData	69	None	replace
61	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
62	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	105	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
65	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    cmdL.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
66	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cmdL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  cmdL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	For(int  i  =  0;  i  <  cmdL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    cmdL.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '.class'  expected	7	None	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    cmdL.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
68	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  cachedL;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  cachedL;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1]  *  cachedL;	  final    double[]    lI    =    lTData[i    +    1]    *    absoluteSymmetryThreshold;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	71	None	replace
69	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  cachedLT;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  cachedLT;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1]  *  cachedLT;	  final    double[]    lI    =    lTData[i    +    1]    *    absoluteSymmetryThreshold;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	71	None	replace
70	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  maxDelta;  [CE]  cannot  find  symbol  maxDelta  [FE]            NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  maxDelta;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1]  *  maxDelta;	  final    double[]    lI    =    lTData[i    +    1]    *    absoluteSymmetryThreshold;    	non-compiled	[CE]  cannot  find  symbol  maxDelta	71	None	replace
71	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedLT  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  matrice  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrice).cachedLT  =  absolutePositivityThreshold;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedLT  =  absolutePositivityThreshold;	  ((    RealMatrix)matrix).cachedLT    =    absolutePositivityThreshold;    	non-compiled	[CE]  cannot  find  symbol  matrice	83	None	replace
72	[BUG]  [BUGGY]  final  int  order  =  relativeSymmetryThreshold.length;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  int  order  =  relativeSymmetryThreshold.length;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  int  order  =  relativeSymmetryThreshold.length;	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	111	None	replace
73	[BUG]  [BUGGY]  final  int  order  =  lTData.length;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  int  order  =  lTData.length;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  int  order  =  lTData.length;	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	111	None	replace
74	[BUG]  [BUGGY]  final  int  order  =  relativeSymmetryThreshold.size();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  int  order  =  relativeSymmetryThreshold.size();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  int  order  =  relativeSymmetryThreshold.size();	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	111	None	replace
75	[BUG]  [BUGGY]  final  int  order  =  relativeSymmetryThreshold[i];  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  int  order  =  relativeSymmetryThreshold[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  int  order  =  relativeSymmetryThreshold[i];	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	111	None	replace
76	[BUG]  [BUGGY]  final  double[]  lI  =  cachedT[i]  *  lTData.doubleValue();  [CE]  cannot  find  symbol  cachedT  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedT[i]  *  lTData.doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedT[i]  *  lTData.doubleValue();	  final    double[]    lI    =    lTData[i]    *    cachedL.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedT	50	None	replace
77	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  null;  [CE]  cannot  find  symbol  cachedLT  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	65	None	replace
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefi    	non-compiled	[CE]  '('  or  '['  expected	89	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefi    	non-compiled	[CE]  '('  or  '['  expected	89	None	replace
80	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefi    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
82	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  >  expected	23	None	replace
83	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  [CE]  cannot  find  symbol  cachedL  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  cachedL	62	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  unclosed  string  literal	75	None	replace
85	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix.cachedLT;  [CE]  cannot  find  symbol  cachedLT  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  matrix.cachedLT;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  matrix.cachedLT;	  ((    RealMatrix)matrix).cachedL    =    matrix.cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	112	None	replace
86	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  cachedLT.cachedLT;  [CE]  cannot  find  symbol  cachedL  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  cachedLT.cachedLT;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  cachedLT.cachedLT;	  ((    RealMatrix)matrix).cachedL    =    matrix.cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedL	112	None	replace
87	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
88	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
89	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
90	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  }  [CE]  unclosed  string  literal  [FE]                            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
94	[BUG]  [BUGGY]  Final  double[]  lI  =  lTData[i  +  1];  [CE]  not  a  statement  [FE]          NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  Final  double[]  lI  =  lTData[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	Final  double[]  lI  =  lTData[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    Final    double[]    lI    =    lTData[i    +    1];    	non-compiled	[CE]  not  a  statement	38	None	replace
95	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  computedL[i];  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  computedL[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  computedL[i];	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    computedL[i];    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	68	None	replace
96	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData[i].relativeSymmetryThreshold  =  computedL[i];  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData[i].relativeSymmetryThreshold  =  computedL[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData[i].relativeSymmetryThreshold  =  computedL[i];	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    computedL[i];    	non-compiled	[CE]  ')'  expected	68	None	replace
97	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  computedL[i];  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  computedL[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData[i]).relativeSymmetryThreshold  =  computedL[i];	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    computedL[i];    	non-compiled	[CE]  inconvertible  types	68	None	replace
98	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  1];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    *    1];    final  double[]  lI  =  lTData[i  *  1];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	109	None	add
99	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  Final  double[]  lI  =  lTData[i  *  1];  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  Final  double[]  lI  =  lTData[i  *  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    *    1];    Final  double[]  lI  =  lTData[i  *  1];	  	non-compiled	[CE]  not  a  statement	109	None	add
100	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  1);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  1);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    *    1];    final  double[]  lI  =  lTData[i  *  1);	  	non-compiled	[CE]  ']'  expected	109	None	add
101	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  2];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  2];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    *    1];    final  double[]  lI  =  lTData[i  *  2];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	109	None	add
102	[BUG]  [BUGGY]  ((  RealMatrix)cachedLT).cachedLT  =  cachedLT;  [CE]  cannot  find  symbol  cachedLT  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)cachedLT).cachedLT  =  cachedLT;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)cachedLT).cachedLT  =  cachedLT;	  ((    RealMatrix)matrice).cachedLT    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	53	None	replace
103	[BUG]  [BUGGY]  ((  RealMatrix)cachedLT).cachedLT  =  cachedL;  [CE]  cannot  find  symbol  cachedLT  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)cachedLT).cachedLT  =  cachedL;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)cachedLT).cachedLT  =  cachedL;	  ((    RealMatrix)matrice).cachedLT    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	53	None	replace
104	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData[0];  [CE]  array  required,  but  RealMatrix  found  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData[0];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i]  *  lTData[0];	  final    double[]    lI    =    cachedLT[i]    *    lTData;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	1	None	replace
105	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  >  expected	32	None	replace
106	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveMatrixException();  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
108	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
109	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
110	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
111	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  4];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	final  double[]  lI  =  lTData[i  *  4];	  final    double[]    lI    =    lTData[i    *    1];    	compilable	  [FE]  NotSymmetricMatrixException  	110	7	replace
112	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  4];  [FE]  NotSymmetricMatrixException  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  4];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  *  4];	  final    double[]    lI    =    lTData[i    *    1];    	compilable	  [FE]  NotSymmetricMatrixException  	110	7	replace
113	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDecompositionImpl;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	101	None	replace
114	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)cachedLT).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)cachedLT).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)cachedLT).relativeSymmetryThreshold  =  absolutePositiveDecompositionImpl;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDecompositionImpl;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	101	None	replace
115	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	91	None	replace
116	[BUG]  [BUGGY]  ((  RealMatrix)matrice).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  matrice  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrice).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).relativeSymmetryThreshold  =  absolutePositivityThreshold;	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  cannot  find  symbol  matrice	91	None	replace
117	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    cachedL.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '.class'  expected	5	None	replace
118	[BUG]  [BUGGY]  final  double[]  lTData  =  ltData[i];  [CE]  cannot  find  symbol  ltData  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lTData  =  ltData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lTData  =  ltData[i];	  final    double[]    lI    =    ltData[i];    	non-compiled	[CE]  cannot  find  symbol  ltData	100	None	replace
119	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lTData  =  lTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lTData  =  lTData[i];	  final    double[]    lI    =    ltData[i];    	non-compiled	[CE]  incompatible  types	100	None	replace
120	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  2;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  2;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0]  +  2;	  final    double[]    lI    =    lTData[i][0]    +    1;    	non-compiled	[CE]  incompatible  types	36	None	replace
121	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0]  *  1;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0]  *  1;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0]  *  1;	  final    double[]    lI    =    lTData[i][0]    +    1;    	non-compiled	[CE]  incompatible  types	36	None	replace
122	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  4;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  4;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0]  +  4;	  final    double[]    lI    =    lTData[i][0]    +    1;    	non-compiled	[CE]  incompatible  types	36	None	replace
123	[BUG]  [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData[i].doubleValue();  [CE]  array  required,  but  RealMatrix  found  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData[i].doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedL[i]  *  lTData[i].doubleValue();	  final    double[]    lI    =    cachedL[i]    *    lTData.doubleValue();    	non-compiled	[CE]  array  required,  but  RealMatrix  found	49	None	replace
124	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getDataItem(i);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData  lTData  =  matrix.getDataItem(i);  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	LTData  lTData  =  matrix.getDataItem(i);	  lTData    =    matrix.getDataItem(i);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
125	[BUG]  [BUGGY]  LTData  =  matrix.getDataItem(i);  [CE]  cannot  find  symbol  LTData  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  LTData  =  matrix.getDataItem(i);  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	LTData  =  matrix.getDataItem(i);	  lTData    =    matrix.getDataItem(i);    	non-compiled	[CE]  cannot  find  symbol  LTData	73	None	replace
126	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix[i].doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  matrix[i].doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  matrix[i].doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	81	None	replace
127	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData[i].doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData[i].doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  lTData[i].doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	81	None	replace
128	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT[i].doubleValue();  [CE]  cannot  find  symbol  matrice  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrice).cachedL  =  cachedLT[i].doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedL  =  cachedLT[i].doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  matrice	81	None	replace
129	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  ((  RealMatrix)matrix).cachedL  =  null;  [CE]  cannot  find  symbol  cachedL  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  ((  RealMatrix)matrix).cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  cachedLT  =  null;  ((  RealMatrix)matrix).cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  cachedL	64	None	replace
130	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	61	5	add
131	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	61	5	add
132	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  cadL  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cadL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cadL	61	None	add
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	61	5	add
134	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	61	5	add
135	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  [CE]  cannot  find  symbol  cadL  [FE]          AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cadL	61	None	add
136	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
137	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	96	None	replace
138	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
139	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
140	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	10	None	replace
141	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix;  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)lTData).cachedL  =  matrix;	  ((    RealMatrix)matrix).cachedL    =    lTData;    	non-compiled	[CE]  inconvertible  types	8	None	replace
142	[BUG]  [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  L  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	L  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    LTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  L	85	None	replace
143	[BUG]  [BUGGY]  cachedL  =  null;  [CE]  cannot  find  symbol  lI  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    LTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  lI	85	None	replace
144	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  10.0;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  +  10.0;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  10.0;	  final    double[]    lI    =    lTData[i]    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
145	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
146	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
147	[BUG]  [BUGGY]  ((  RealMatrix)cachedLT).cachedL  =  matrix.doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)cachedLT).cachedL  =  matrix.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)cachedLT).cachedL  =  matrix.doubleValue();	  ((    RealMatrix)matrice).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	19	None	replace
148	[BUG]  [BUGGY]  ((  RealMatrix)cachedL).cachedL  =  matrix.doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)cachedL).cachedL  =  matrix.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)cachedL).cachedL  =  matrix.doubleValue();	  ((    RealMatrix)matrice).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	19	None	replace
149	[BUG]  [BUGGY]  final  double[]  lI  =  cachedL[i].value;  [CE]  array  required,  but  RealMatrix  found  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedL[i].value;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedL[i].value;	  final    double[]    lI    =    cachedLT[i].value;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	70	None	replace
150	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i].value.cloneTree();  [CE]  array  required,  but  RealMatrix  found  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedLT[i].value.cloneTree();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i].value.cloneTree();	  final    double[]    lI    =    cachedLT[i].value;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	70	None	replace
151	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  2;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  *  2;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  2;	  final    double[]    lI    =    lTData[i]    +    2;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	20	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	74	None	replace
153	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	74	None	replace
155	[BUG]  [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData[i];  [CE]  array  required,  but  RealMatrix  found  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedL[i]  *  lTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedL[i]  *  lTData[i];	  final    double[]    lI    =    cachedL[i]    *    lTData;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	3	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteM    	non-compiled	[CE]  '('  or  '['  expected	87	None	replace
157	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteM    	non-compiled	[CE]  '('  or  '['  expected	87	None	replace
158	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteM    	non-compiled	[CE]  '('  or  '['  expected	87	None	replace
159	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteM    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
160	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >=    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
163	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]!=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]!=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]!=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >=    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >=    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
165	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >=    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
166	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  matrix;  [CE]  inconvertible  types  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  matrix;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)lTData).cachedLT  =  matrix;	  ((    RealMatrix)matrix).cachedLT    =    lTData;    	non-compiled	[CE]  inconvertible  types	52	None	replace
167	[BUG]  [BUGGY]  ((  RealMatrix)i).cachedLT  =  lTData;  [CE]  inconvertible  types  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)i).cachedLT  =  lTData;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)i).cachedLT  =  lTData;	  ((    RealMatrix)matrix).cachedLT    =    lTData;    	non-compiled	[CE]  inconvertible  types	52	None	replace
168	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  absolutePositivityThreshold);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i,  absolutePositivityThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
169	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(i,  relativeSymmetryThreshold);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(i,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
170	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData.doubleValue();  [CE]  cannot  find  symbol  cachedLT  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  lTData.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    lTData.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedLT	18	None	replace
171	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.doubleValue();  [CE]  inconvertible  types  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.doubleValue();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)lTData).cachedL  =  matrix.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    lTData.doubleValue();    	non-compiled	[CE]  inconvertible  types	18	None	replace
172	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  maxDelta;  [CE]  cannot  find  symbol  maxDelta  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  *  maxDelta;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  maxDelta;	  final    double[]    lI    =    lTData[i]    *    cachedL;    	non-compiled	[CE]  cannot  find  symbol  maxDelta	2	None	replace
173	[BUG]  [BUGGY]  null  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [CE]  unexpected  type  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  null  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	null  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  lTData  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    lTData    =    matrix.getData();    	non-compiled	[CE]  unexpected  type	47	None	replace
174	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
175	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	34	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
178	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  unclosed  string  literal	34	None	replace
179	[BUG]  [BUGGY]  L  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  L  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  L  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	L  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cadL    =    null;    	non-compiled	[CE]  cannot  find  symbol  L	63	None	replace
180	[BUG]  [BUGGY]  CachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  CachedL  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  CachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	CachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cadL    =    null;    	non-compiled	[CE]  cannot  find  symbol  CachedL	63	None	replace
181	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedLT  =  cachedL;  [CE]  cannot  find  symbol  matrice  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrice).cachedLT  =  cachedL;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedLT  =  cachedL;	  ((    RealMatrix)matrix).cachedLT    =    matrix;    	non-compiled	[CE]  cannot  find  symbol  matrice	79	None	replace
182	[BUG]  [BUGGY]  ((  RealMatrix)  matrix).cachedLT  =  cachedLT.clone();  [CE]  cannot  find  symbol  cachedLT  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)  matrix).cachedLT  =  cachedLT.clone();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)  matrix).cachedLT  =  cachedLT.clone();	  ((    RealMatrix)matrix).cachedL    =    matrix.clone();    	non-compiled	[CE]  cannot  find  symbol  cachedLT	58	None	replace
183	[BUG]  [BUGGY]  ((  RealMatrix)matricule).cachedL  =  cachedLT.clone();  [CE]  cannot  find  symbol  matricule  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matricule).cachedL  =  cachedLT.clone();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matricule).cachedL  =  cachedLT.clone();	  ((    RealMatrix)matrix).cachedL    =    matrix.clone();    	non-compiled	[CE]  cannot  find  symbol  matricule	58	None	replace
184	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[0];  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[0];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[0];	  lTData    =    matrix.getData();    cachedL    =    new    RealMatrix[i];    	non-compiled	[CE]  incompatible  types	15	None	replace
185	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[i  +  1];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[i  +  1];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  cachedL  =  new  RealMatrix[i  +  1];	  lTData    =    matrix.getData();    cachedL    =    new    RealMatrix[i];    	non-compiled	[CE]  incompatible  types	15	None	replace
186	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	31	None	replace
188	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  cachedLT);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData(i,  cachedLT);  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i,  cachedLT);	  lTData    =    matrix.getData(i);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	16	None	replace
189	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  order);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData(i,  order);  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i,  order);	  lTData    =    matrix.getData(i);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	16	None	replace
190	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  maxDelta.doubleValue();  [CE]  cannot  find  symbol  maxDelta  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  *  maxDelta.doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  maxDelta.doubleValue();	  final    double[]    lI    =    lTData[i]    *    order.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  maxDelta	99	None	replace
191	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][3];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][3];	  final    double[]    lI    =    lTData[i][1];    	non-compiled	[CE]  incompatible  types	35	None	replace
192	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lI  =  lTData[i  +  3];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lI  =  lTData[i  +  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    3];    final  double[]  lI  =  lTData[i  +  3];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	56	None	add
193	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  Final  double[]  lI  =  lTData[i  +  3];  [CE]  not  a  statement  [FE]      NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  Final  double[]  lI  =  lTData[i  +  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    3];    Final  double[]  lI  =  lTData[i  +  3];	  	non-compiled	[CE]  not  a  statement	56	None	add
194	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lI  =  lTData[i  +  4];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lI  =  lTData[i  +  4];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    3];    final  double[]  lI  =  lTData[i  +  4];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	56	None	add
195	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lI  =  ltData[i  +  3];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lI  =  ltData[i  +  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    3];    final  double[]  lI  =  ltData[i  +  3];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	56	None	add
196	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	For(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '.class'  expected	4	None	replace
197	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  maxDelta;  [CE]  cannot  find  symbol  cachedLT  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  maxDelta;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  maxDelta;	  ((    RealMatrix)matrix).cachedL    =    maxDelta;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	9	None	replace
198	[BUG]  [BUGGY]  ((  RealMatrix)matrice).cachedL  =  maxDelta;  [CE]  cannot  find  symbol  matrice  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrice).cachedL  =  maxDelta;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).cachedL  =  maxDelta;	  ((    RealMatrix)matrix).cachedL    =    maxDelta;    	non-compiled	[CE]  cannot  find  symbol  matrice	9	None	replace
199	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  4;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  *  4;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  4;	  final    double[]    lI    =    lTData[i]    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	21	None	replace
200	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  1L;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  *  1L;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  1L;	  final    double[]    lI    =    lTData[i]    *    1;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	21	None	replace
201	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTI[i  +  1];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTI[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTI[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1);    	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	replace
202	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  2];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  2];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  2];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1);    	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	replace
203	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)i).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  inconvertible  types  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)i).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)i).relativeSymmetryThreshold  =  absolutePositivityThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  inconvertible  types	44	None	replace
204	[BUG]  [BUGGY]  final  double[]  lI  =  ltData[i  +  1];  [CE]  cannot  find  symbol  ltData  [FE]            NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  ltData[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  ltData[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    ltData[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  ltData	39	None	replace
205	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  final  double[]  lI  =  lTData[i  +  2];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  final  double[]  lI  =  lTData[i  +  2];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    2];    final  double[]  lI  =  lTData[i  +  2];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	54	None	add
206	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  Final  double[]  lI  =  lTData[i  +  2];  [CE]  not  a  statement  [FE]      NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  Final  double[]  lI  =  lTData[i  +  2];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    2];    Final  double[]  lI  =  lTData[i  +  2];	  	non-compiled	[CE]  not  a  statement	54	None	add
207	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  final  double[]  lI  =  lTData[i  +  3];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  final  double[]  lI  =  lTData[i  +  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    2];    final  double[]  lI  =  lTData[i  +  3];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	54	None	add
208	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  final  double[]  lI  =  ltData[i  +  2];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  2];  final  double[]  lI  =  ltData[i  +  2];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    2];    final  double[]  lI  =  ltData[i  +  2];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	54	None	add
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ")  [CE]  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ")  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ")	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  	24	None	replace
210	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    cachedLT.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
211	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrix    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
212	[BUG]  [BUGGY]  null  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;  [CE]  unexpected  type  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  null  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	null  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  unexpected  type	65	None	replace
213	[BUG]  [BUGGY]  final  double[]  lI  =  cachedTData[i]  *  lTData.doubleValue();  [CE]  cannot  find  symbol  cachedTData  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedTData[i]  *  lTData.doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedTData[i]  *  lTData.doubleValue();	  final    double[]    lI    =    lTData[i]    *    cachedL.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedTData	50	None	replace
214	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(maxDelta);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(maxDelta);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	93	None	replace
215	[BUG]  [BUGGY]  ((  RealMatrix)matrice).relativeSymmetryThreshold();  [CE]  cannot  find  symbol  matrice  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrice).relativeSymmetryThreshold();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrice).relativeSymmetryThreshold();	  ((    RealMatrix)matrix).relativeSymmetryThreshold();    	non-compiled	[CE]  cannot  find  symbol  matrice	94	None	replace
216	[BUG]  [BUGGY]  final  double[]  lI  =  ltData[i]  *  cachedLT.doubleValue();  [CE]  cannot  find  symbol  ltData  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  ltData[i]  *  cachedLT.doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  ltData[i]  *  cachedLT.doubleValue();	  final    double[]    lI    =    cachedLT[i]    *    lTData.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  ltData	48	None	replace
217	[BUG]  [BUGGY]  final  double[]  lI  =  cachedT[i]  *  lTData;  [CE]  cannot  find  symbol  cachedT  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedT[i]  *  lTData;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedT[i]  *  lTData;	  final    double[]    lI    =    cachedL[i]    *    lTData;    	non-compiled	[CE]  cannot  find  symbol  cachedT	3	None	replace
218	[BUG]  [BUGGY]  ((  RealMatrix)  matrix).cachedLT  =  i;  [CE]  cannot  find  symbol  cachedLT  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)  matrix).cachedLT  =  i;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)  matrix).cachedLT  =  i;	  ((    RealMatrix)matrix).cachedLT    =    matrix;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	79	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
220	[BUG]  [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(i!=  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	43	None	replace
221	[BUG]  [BUGGY]  if(i  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(i  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(i  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	43	None	replace
222	[BUG]  [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [CE]  cannot  find  symbol  lI  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(i!=  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  lI	43	None	replace
223	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][1]  +  1;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][1]  +  1;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][1]  +  1;	  final    double[]    lI    =    lTData[i][1];    	non-compiled	[CE]  incompatible  types	35	None	replace
224	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  lI  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cadL    =    null;    	non-compiled	[CE]  cannot  find  symbol  lI	63	None	replace
225	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL[i];  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL[i];	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    computedL[i];    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	68	None	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
227	[BUG]  [BUGGY]  final  double[]  lI  =  ltData[i]  *  cachedLT;  [CE]  cannot  find  symbol  ltData  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  ltData[i]  *  cachedLT;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  ltData[i]  *  cachedLT;	  final    double[]    lI    =    cachedLT[i]    *    lTData;    	non-compiled	[CE]  cannot  find  symbol  ltData	1	None	replace
228	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i]  /  lTData;  [CE]  array  required,  but  RealMatrix  found  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedLT[i]  /  lTData;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i]  /  lTData;	  final    double[]    lI    =    cachedLT[i]    *    lTData;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	1	None	replace
229	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	31	None	replace
230	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	final  double[]  lI  =  lTData[i  *  3];	  final    double[]    lI    =    lTData[i    +    3];    	compilable	  [FE]  NotSymmetricMatrixException  	57	7	replace
231	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  3];  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  *  3];	  final    double[]    lI    =    lTData[i    +    3];    	compilable	  [FE]  NotSymmetricMatrixException  	57	7	replace
232	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
233	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
234	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
235	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
236	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  ltData[i].doubleValue();  [CE]  cannot  find  symbol  cachedL  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  ltData[i].doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  ltData[i].doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i].doubleValue();    	non-compiled	[CE]  cannot  find  symbol  cachedL	81	None	replace
237	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrix    	non-compiled	[CE]  '('  or  '['  expected	76	None	replace
238	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrix    	non-compiled	[CE]  '('  or  '['  expected	76	None	replace
239	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  ltData[i];  [CE]  cannot  find  symbol  cachedL  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  ltData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  ltData[i];	  ((    RealMatrix)matrix).cachedL    =    cachedLT[i];    	non-compiled	[CE]  cannot  find  symbol  cachedL	80	None	replace
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefi    	non-compiled	[CE]  '('  or  '['  expected	89	None	replace
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  size;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefi    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
242	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData.cachedLT;  [CE]  cannot  find  symbol  cachedL  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lTData.cachedLT;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedL  =  lTData.cachedLT;	  ((    RealMatrix)matrix).cachedL    =    matrix.cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedL	112	None	replace
243	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
244	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
245	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
246	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
247	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  +  i;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  +  i;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  +  i;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    +    i;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	67	None	replace
248	[BUG]  [BUGGY]  final  double[]  lTData  =  ltData[i  +  1];  [CE]  cannot  find  symbol  ltData  [FE]            NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lTData  =  ltData[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lTData  =  ltData[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    ltData[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  ltData	39	None	replace
249	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	10	None	replace
250	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  final  double[][]  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  cannot  assign  a  value  to  final  variable  lTData  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  final  double[][]  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    final  double[][]  lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  lTData	42	None	add
251	[BUG]  [BUGGY]  final  double[]  lI  =  cachedTData[i]  *  lTData;  [CE]  cannot  find  symbol  cachedTData  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedTData[i]  *  lTData;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedTData[i]  *  lTData;	  final    double[]    lI    =    lTData[i]    *    cachedL;    	non-compiled	[CE]  cannot  find  symbol  cachedTData	2	None	replace
252	[BUG]  [BUGGY]  final  double  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  >  expected	111	None	replace
253	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefi	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
254	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    cachedLT.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	6	None	replace
255	[BUG]  [BUGGY]  L  =  matrix.getData();  cachedL  =  new  RealMatrix[i];  [CE]  cannot  find  symbol  L  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  L  =  matrix.getData();  cachedL  =  new  RealMatrix[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	L  =  matrix.getData();  cachedL  =  new  RealMatrix[i];	  lTData    =    matrix.getData();    cachedL    =    new    RealMatrix[i];    	non-compiled	[CE]  cannot  find  symbol  L	15	None	replace
256	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  128;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  +  128;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  128;	  final    double[]    lI    =    lTData[i]    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
257	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDefiniteMatrix;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	46	None	replace
258	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
260	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  relativeSymmetryThreshold;  [CE]  cannot  find  symbol  cachedLT  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  relativeSymmetryThreshold;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  relativeSymmetryThreshold;	  ((    RealMatrix)matrix).cachedLT    =    absolutePositivityThreshold;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	83	None	replace
261	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  inverse;  [CE]  cannot  find  symbol  cachedLT  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  inverse;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  inverse;	  ((    RealMatrix)matrix).cachedLT    =    absolutePositivityThreshold;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	83	None	replace
262	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  totalDelta;  [CE]  cannot  find  symbol  cachedLT  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  totalDelta;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  totalDelta;	  ((    RealMatrix)matrix).cachedLT    =    absolutePositivityThreshold;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	83	None	replace
263	[BUG]  [BUGGY]  ((  RealMatrix)  matrix).cachedL  =  i;  [CE]  cannot  find  symbol  cachedL  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)  matrix).cachedL  =  i;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)  matrix).cachedL  =  i;	  ((    RealMatrix)matrix).cachedL    =    matrix;    	non-compiled	[CE]  cannot  find  symbol  cachedL	78	None	replace
264	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  1L;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0]  +  1L;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0]  +  1L;	  final    double[]    lI    =    lTData[i][0]    +    1;    	non-compiled	[CE]  incompatible  types	36	None	replace
265	[BUG]  [BUGGY]  final  double  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  >  expected	106	None	replace
266	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatri	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
267	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
268	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
269	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i].value;  [CE]  cannot  find  symbol  value  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i].value;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i].value;	  final    double[]    lI    =    cachedLT[i].value;    	non-compiled	[CE]  cannot  find  symbol  value	70	None	replace
270	[BUG]  [BUGGY]  final  double[]  lI  =  cachedTData[i];  [CE]  cannot  find  symbol  cachedTData  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedTData[i];	  final    double[]    lI    =    cachedL[i];    	non-compiled	[CE]  cannot  find  symbol  cachedTData	41	None	replace
271	[BUG]  [BUGGY]  final  double[]  lI  =  ltData[i]  *  cachedL.doubleValue();  [CE]  cannot  find  symbol  ltData  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  ltData[i]  *  cachedL.doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  ltData[i]  *  cachedL.doubleValue();	  final    double[]    lI    =    cachedL[i]    *    lTData.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  ltData	49	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	34	None	replace
273	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  incompatible  types	61	None	add
274	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  LTData  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    LTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  LTData	61	None	add
275	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0],  cachedLT[1];  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0],  cachedLT[1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0],  cachedLT[1];	  final    double[]    lI    =    lTData[i][0],    cachedLT[i];    	non-compiled	[CE]  ']'  expected	95	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]!=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]!=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(relativeSymmetryThreshold[i]!=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
278	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	74	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  totalDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  totalDelta;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
280	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  '('  or  '['  expected	32	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
282	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  '('  or  '['  expected	77	None	replace
283	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData[i];  [CE]  cannot  find  symbol  cachedLT  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).cachedLT  =  lTData[i];	  ((    RealMatrix)matrix).cachedLT    =    lTData;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	52	None	replace
284	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetry[i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
285	[BUG]  [BUGGY]  ((  RealMatrix)cachedLT).cachedLT  =  matrix;  [CE]  cannot  find  symbol  cachedLT  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)cachedLT).cachedLT  =  matrix;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)cachedLT).cachedLT  =  matrix;	  ((    RealMatrix)matrice).cachedLT    =    cachedLT;    	non-compiled	[CE]  cannot  find  symbol  cachedLT	53	None	replace
286	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
287	[BUG]  [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedL  =  null;  [CE]  cannot  find  symbol  L  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	L  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  L	64	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >=    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrix	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
292	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  absolutePositivityThreshold;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  absolutePositivityThreshold;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1]  *  absolutePositivityThreshold;	  final    double[]    lI    =    lTData[i    +    1]    *    absoluteSymmetryThreshold;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	71	None	replace
293	[BUG]  [BUGGY]  final  double[]  lTData[i]  =  ltData[i];  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lTData[i]  =  ltData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lTData[i]  =  ltData[i];	  final    double[]    lI    =    ltData[i];    	non-compiled	[CE]  ']'  expected	100	None	replace
294	[BUG]  [BUGGY]  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lTData[i]  =  lTData[i];	  final    double[]    lI    =    ltData[i];    	non-compiled	[CE]  ']'  expected	100	None	replace
295	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  3];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1];  final  double[]  lI  =  lTData[i  +  3];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1);    	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	replace
296	[BUG]  [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  cannot  find  symbol  lI  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  lI	62	None	replace
297	[BUG]  [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [CE]  cannot  find  symbol  lI  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  lI	62	None	replace
298	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  /  order;  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  /  order;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  /  order;	  final    double[]    lI    =    lTData[i]    *    order;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	103	None	replace
299	[BUG]  [BUGGY]  CachedL  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  CachedL  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  CachedL  =  matrix.getData();  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	CachedL  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    L    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  CachedL	102	None	replace
300	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
301	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
302	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
303	[BUG]  [BUGGY]  null  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();  [CE]  unexpected  type  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  null  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	null  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  lTData  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    lTData    =    matrix.getData();    	non-compiled	[CE]  unexpected  type	66	None	replace
304	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  absolutePositivityThreshold;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  +  absolutePositivityThreshold;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  absolutePositivityThreshold;	  final    double[]    lI    =    lTData[i]    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
305	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  +  2L;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  +  2L;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  +  2L;	  final    double[]    lI    =    lTData[i]    +    1L;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	72	None	replace
306	[BUG]  [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData.length;  [CE]  array  required,  but  RealMatrix  found  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  cachedLT[i]  *  lTData.length;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  cachedLT[i]  *  lTData.length;	  final    double[]    lI    =    cachedLT[i]    *    lTData;    	non-compiled	[CE]  array  required,  but  RealMatrix  found	1	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " "),  [CE]  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " "),  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " "),	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  	77	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ")  + "  in  the  [CE]  unclosed  string  literal  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ")  + "  in  the  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ")  + "  in  the	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  unclosed  string  literal	77	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  }  [CE]  unclosed  string  literal  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	12	None	replace
311	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
312	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [CE]  cannot  find  symbol  lI  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  lI	43	None	replace
313	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	43	None	replace
314	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  lI  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  lI	43	None	replace
315	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][1],  cachedLT[i];  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][1],  cachedLT[i];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][1],  cachedLT[i];	  final    double[]    lI    =    lTData[i][0],    cachedLT[i];    	non-compiled	[CE]  ']'  expected	95	None	replace
316	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  1)];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  *  1];  final  double[]  lI  =  lTData[i  *  1)];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    *    1];    final  double[]  lI  =  lTData[i  *  1)];	  	non-compiled	[CE]  ']'  expected	109	None	add
317	[BUG]  [BUGGY]  ((  RealMatrix)matricy).relativeSymmetryThreshold();  [CE]  cannot  find  symbol  matricy  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matricy).relativeSymmetryThreshold();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matricy).relativeSymmetryThreshold();	  ((    RealMatrix)matrix).relativeSymmetryThreshold();    	non-compiled	[CE]  cannot  find  symbol  matricy	94	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ".);  }  [CE]  <identifier>  expected  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ".);  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ".);  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	30	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
320	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
321	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ".);  }  [CE]  <identifier>  expected  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ".);  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(relativeSymmetry[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ".);  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetry[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	13	None	replace
322	[BUG]  [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;  [CE]  cannot  find  symbol  L  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	L  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).cachedLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  cannot  find  symbol  L	65	None	replace
323	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  ltQ.doubleValue();  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  *  ltQ.doubleValue();  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  ltQ.doubleValue();	  final    double[]    lI    =    lTData[i]    *    order.doubleValue();    	non-compiled	[CE]  cannot  find  symbol  ltQ	99	None	replace
324	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  relativeSymmetryThreshold;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  relativeSymmetryThreshold;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1]  *  relativeSymmetryThreshold;	  final    double[]    lI    =    lTData[i    +    1]    *    absoluteSymmetryThreshold;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	71	None	replace
325	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  order;  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]          NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1]  *  order;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1]  *  order;	  final    double[]    lI    =    lTData[i    +    1]    *    absoluteSymmetryThreshold;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	71	None	replace
326	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).setData(lTData);  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
327	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
328	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
329	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lPI  =  lTData[i  +  3];  [CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    NotSymmetricMatrixException    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  3];  final  double[]  lPI  =  lTData[i  +  3];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final    double[]    lI    =    lTData[i    +    3];    final  double[]  lPI  =  lTData[i  +  3];	  	non-compiled	[CE]  variable  lI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	56	None	add
330	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	61	5	add
331	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	61	5	add
332	[BUG]  [BUGGY]  final  double[]  lTI  =  lTData[i  +  1];  [CE]  cannot  find  symbol  lI  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lTI  =  lTData[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lTI  =  lTData[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  lI	37	None	replace
333	[BUG]  [BUGGY]  final  double[]  li  =  lTData[i  +  1];  [CE]  cannot  find  symbol  lI  [FE]          NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  li  =  lTData[i  +  1];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  li  =  lTData[i  +  1];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1];    	non-compiled	[CE]  cannot  find  symbol  lI	37	None	replace
334	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  cachedL);  cachedL  =  null;  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData(i,  cachedL);  cachedL  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i,  cachedL);  cachedL  =  null;	  lTData    =    matrix.getData(i);    cachedL    =    null;    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	14	None	replace
335	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [CE]  cannot  find  symbol  lI  [FE]    AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  lI	62	None	replace
336	[BUG]  [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  cannot  find  symbol  lI  [FE]      AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  cannot  find  symbol  lI	62	None	replace
337	[BUG]  [BUGGY]  if(cachedL!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  incomparable  types:  RealMatrix  and  int  [FE]        AssertionError    [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  if(cachedL!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	if(cachedL!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  incomparable  types:  RealMatrix  and  int	62	None	replace
338	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1],  cachedLT[i  +  1);  [CE]  ']'  expected  [FE]        NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1],  cachedLT[i  +  1);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1],  cachedLT[i  +  1);	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1);    	non-compiled	[CE]  ']'  expected	82	None	replace
339	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	96	None	replace
340	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	96	None	replace
341	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0]  /  1;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0]  /  1;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0]  /  1;	  final    double[]    lI    =    lTData[i][0]    +    1;    	non-compiled	[CE]  incompatible  types	36	None	replace
342	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i][0]  -  1;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i][0]  -  1;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i][0]  -  1;	  final    double[]    lI    =    lTData[i][0]    +    1;    	non-compiled	[CE]  incompatible  types	36	None	replace
343	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException()  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException()  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException()	  final    for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
344	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatri    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
345	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i  +  1)];  [CE]  ']'  expected  [FE]              NotSymmetricMatrixException      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i  +  1)];  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i  +  1)];	  final    double[]    lI    =    lTData[i    +    1];    final    double[]    lI    =    lTData[i    +    1)];    	non-compiled	[CE]  ']'  expected	40	None	replace
346	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  if(relativeSymmetryThreshold[i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
347	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteM	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(relativeSymmetryThreshold[i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteM    	non-compiled	[CE]  '('  or  '['  expected	87	None	replace
348	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [CE]  unclosed  string  literal  [FE]              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( "	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "    	non-compiled	[CE]  unclosed  string  literal	74	None	replace
349	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  i);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData(i,  i);  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData(i,  i);	  lTData    =    matrix.getData(i);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	16	None	replace
350	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  +  i;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  +  i;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  +  i;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    +    i;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	67	None	replace
351	[BUG]  [BUGGY]  final  double[]  lI  =  lTData[i]  *  cachedL.length;  [CE]  cannot  find  symbol  length  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  final  double[]  lI  =  lTData[i]  *  cachedL.length;  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	final  double[]  lI  =  lTData[i]  *  cachedL.length;	  final    double[]    lI    =    cachedL[i]    *    lTData;    	non-compiled	[CE]  cannot  find  symbol  length	3	None	replace
352	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  if(lTData[i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
353	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(cachedLT[i]);  [CE]  array  required,  but  RealMatrix  found  [FE]                      AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold(cachedLT[i]);  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold(cachedLT[i]);	  ((    RealMatrix)matrix).relativeSymmetryThreshold(i);    	non-compiled	[CE]  array  required,  but  RealMatrix  found	93	None	replace
354	[BUG]  [BUGGY]  lTData  =  matrix.getDataItem(i,  order);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  lTData  =  matrix.getDataItem(i,  order);  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	lTData  =  matrix.getDataItem(i,  order);	  lTData    =    matrix.getDataItem(i);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
356	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
357	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  count;  ++i)  {  if(lTData[i][i]  ==  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
358	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  for(int    i    =    0;    i    <    count;    ++i)    {    if(relativeSymmetryThreshold[i]    >    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {      [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]        if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	112	112	2	replace	for(int  i  =  0;  j  <  order;  ++i)  {  if(lTData[i][i]  >=  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  for(int    i    =    0;    i    <    order;    ++i)    {    if(lTData[i][i]    >=    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
