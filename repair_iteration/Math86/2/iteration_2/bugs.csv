bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);	      int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
2	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJ);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJ);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJ);	      int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
3	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI);	      int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
4	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lTData.length);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lTData.length);	      int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
5	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta);	      int    order    =    Math.min(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
6	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  absolutePositivityThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  absolutePositivityThreshold);	      int    order    =    Math.min(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
7	[BUG]  [BUGGY]  int  order  =  Math.min(lJI,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.min(lJI,  relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(lJI,  relativeSymmetryThreshold);	      int    order    =    Math.min(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
8	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta);	      int    order    =    Math.min(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
9	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length);	      int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
10	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1);	      int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
11	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  +  1);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  +  1);	      int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
12	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length);	      int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
13	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&  ++i)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  &&  ++i)  {	  for(int    i    =    0;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
14	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  ++i)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJI.length  &&  ++i)  {	  for(int    i    =    0;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
15	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  order  &&  ++i)  {  [CE]  ';'  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  1;  i  <  order  &&  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  order  &&  ++i)  {	  for(int    i    =    0;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
16	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
17	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {	  for(int    i    =    0;    i    <    lJI.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  lJ	10	None	replace
19	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {	  for(int    i    =    0;    i    <    lJI.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	10	None	replace
20	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
21	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
22	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
23	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	add	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	8	4	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	8	4	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJI.length  -  1;  ++i)  {  [CE]  cannot  find  symbol  lJI  [FE]      AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lJI.length  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJI.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  lJI	8	None	replace
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta  -  1;  ++i)  {  [CE]  cannot  find  symbol  maxDelta  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  maxDelta  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  maxDelta  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  maxDelta	8	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    for(int  i  =  0;  i  <  order  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    int  i  =  0;  i  <  order  -  1;  ++i)  {	  	non-compiled	[CE]  >  expected	7	None	add
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final  double[]  ltData[i]  =  lTData[i];	  	non-compiled	[CE]  ']'  expected	7	None	add
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  For(int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  For(int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    For(int  i  =  0;  i  <  order  -  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final  double[]  lTData[i]  =  lTData[i];	  	non-compiled	[CE]  ']'  expected	7	None	add
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int  i  =  0;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int  i  =  0;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  >  expected	5	None	add
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    For(int  i  =  0;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  lTData[i]  =  lTData[i];	  	non-compiled	[CE]  ']'  expected	5	None	add
37	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  ltData[i]  =  lTData[i];	  	non-compiled	[CE]  ']'  expected	5	None	add
38	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
39	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
40	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
41	[BUG]  [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
42	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
43	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta);	      int    order    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
44	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  absolutePositivityThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  absolutePositivityThreshold);	      int    order    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
45	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  relativeSymmetryThreshold);	      int    order    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
46	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);	      Integer    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
47	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  1);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  1);	      Integer    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
48	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  2);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  2);	      Integer    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
49	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
50	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
51	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
52	[BUG]  [BUGGY]  final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  [CE]  cannot  find  symbol  maxDelta  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  maxDelta;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  maxDelta;  ++i)  {	  for(int    i    =    0;    i    <    ltQ;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  maxDelta	14	None	replace
54	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta);	      int    order    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
55	[BUG]  [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJData.length;  ++i)  {  [CE]  cannot  find  symbol  lJData  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lJData.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  lJData	6	None	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);	  	non-compiled	[CE]  ']'  expected	5	None	add
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);	  	non-compiled	[CE]  ']'  expected	5	None	add
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  lTData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);	  	non-compiled	[CE]  ']'  expected	5	None	add
61	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
62	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
63	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                  AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
64	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
65	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
66	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
67	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);	  	non-compiled	[CE]  ']'  expected	7	None	add
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);	  	non-compiled	[CE]  ']'  expected	7	None	add
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);	  	non-compiled	[CE]  ']'  expected	7	None	add
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);	  	non-compiled	[CE]  ']'  expected	7	None	add
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderCount;  ++i)  {  [CE]  cannot  find  symbol  orderCount  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  orderCount;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  orderCount;  ++i)  {	  for(int    i    =    0;    i    <    size;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderCount	13	None	replace
73	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
74	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
75	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
76	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      Integer    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lIJ.length;  ++i)  {  [CE]  cannot  find  symbol  lIJ  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lIJ.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lIJ.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  lIJ	6	None	replace
78	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  relativeSymmetryThreshold);	      int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  ltData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  ltData  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  ltData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orders.length;  ++i)  {  [CE]  cannot  find  symbol  orders  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  orders.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  orders.length;  ++i)  {	  for(int    i    =    0;    i    <    ltQ;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orders	14	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  [CE]  cannot  find  symbol  orderedL  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  orderedL.length;  ++i)  {	  for(int    i    =    0;    i    <    ltQ;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedL	14	None	replace
82	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ  &&  ++i)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  ltQ  &&  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ  &&  ++i)  {	  for(int    i    =    0;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
83	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  &&  ++i)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  &&  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ.length  &&  ++i)  {	  for(int    i    =    0;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
84	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
85	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	11	None	replace
86	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      int    order    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
87	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  0);	      int    order    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
88	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	      int    order    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
89	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
90	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final  double[]  ltData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
92	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	      Integer    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
93	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ  -  1;  ++i)  {  [CE]  cannot  find  symbol  ltQ  [FE]    AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  ltQ  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ltQ	8	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  -  1;  ++i)  {  [CE]  cannot  find  symbol  ltQ  [FE]      AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  -  1;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ltQ	8	None	replace
96	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
97	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	      int    order    =    Math.min(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
98	[BUG]  [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	      final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	4	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  [CE]  cannot  find  symbol  ltI  [FE]              AssertionError    [CONTEXT]    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }      [BUGGY]  for(int  i  =  0;  i  <  ltI.length;  ++i)  {  [BUGGY]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltI.length;  ++i)  {	  for(int    i    =    0;    i    <    lJI.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ltI	10	None	replace
