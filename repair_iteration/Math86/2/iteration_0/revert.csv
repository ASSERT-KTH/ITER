projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132finaldoubleorder=relativeSymmetryThreshold*Math.max(Math.abs(lIJ),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132finaldoubleorder=relativeSymmetryThreshold*Math.max(Math.abs(lJ),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132finaldoubleorder=relativeSymmetryThreshold*Math.max(Math.abs(lIJ),Math.abs(lJI));if(Math.abs(lTData[i]-lJI)>maxDelta){thrownewNot
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132finaldoubleorder=relativeSymmetryThreshold*Math.max(Math.abs(lIJ),Math.abs(lJI));if(Math.abs(lTData[i]-lJI)>maxDelta){thrownewNotSym
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<order;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<lTData.length;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<order-1;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<lJI;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<lJI.length;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132finaldoubleorder=relativeSymmetryThreshold*Math.max(Math.abs(lIJ),Math.abs(lJI));if(Math.abs(lTData[0]-lJI)>maxDelta){thrownewNotSym
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132finaldoubleorder=relativeSymmetryThreshold*Math.max(Math.abs(lJI),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<size;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<ltQ;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<order&&++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132intorder=Math.max(relativeSymmetryThreshold,lJI);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132intorder=lTData.length*Math.max(relativeSymmetryThreshold,relativeSymmetryThreshold);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132intorder=Math.min(relativeSymmetryThreshold,lJI);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132intorder=Math.max(relativeSymmetryThreshold,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132Integerorder=Math.max(relativeSymmetryThreshold,0);
