bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  lJI);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
2	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  lJ);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  lJ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  lJ);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
3	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
4	[BUG]  [BUGGY]  int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lJ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lJ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lJ);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
5	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	63	None	replace
6	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	63	None	replace
7	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	63	None	replace
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltI.length  &&  ++i)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltI.length  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltI.length  &&  ++i)  {	  for(int    i    =    0;    i    <    ltQ    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	82	None	replace
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  &&  ++i)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  &&  ++i)  {	  for(int    i    =    0;    i    <    ltQ    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	82	None	replace
10	[BUG]  [BUGGY]  int  order  =  Math.min(lJI,  relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(lJI,  relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(lJI,  relativeSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
11	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
12	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	For(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
13	[BUG]  [BUGGY]  Integer  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
14	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	add	for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	25	4	replace
16	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	25	4	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  [CE]  cannot  find  symbol  lJ  [FE]      AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  lJ	25	None	replace
18	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	73	None	replace
19	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	73	None	replace
20	[BUG]  [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotS    	non-compiled	[CE]  '('  or  '['  expected	42	None	replace
21	[BUG]  [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
22	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
23	[BUG]  [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
24	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  maxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  maxDelta);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
25	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	66	None	replace
26	[BUG]  [BUGGY]  Integer  order  =  Math.min(relativeSymmetryThreshold,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.min(relativeSymmetryThreshold,  0);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.min(relativeSymmetryThreshold,  0);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
27	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    order    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
28	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    order    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	39	None	replace
29	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	90	None	replace
30	[BUG]  [BUGGY]  final  double  order  =  maxDelta  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  maxDelta  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  maxDelta  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    order    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
31	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	  final    double    order    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
32	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  -  1);	  int    order    =    Math.min(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
33	[BUG]  [BUGGY]  int  order  =  Math.min(lTData.length,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(lTData.length,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(lTData.length,  relativeSymmetryThreshold);	  int    order    =    Math.min(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
34	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI.length);	  int    order    =    Math.min(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
35	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  +  1);	  int    order    =    Math.min(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
36	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  maxDelta.length;  ++i)  {  [CE]  cannot  find  symbol  maxDelta  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  maxDelta.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  maxDelta.length;  ++i)  {	  for(int    i    =    0;    i    <    orderedL.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  maxDelta	81	None	replace
37	[BUG]  [BUGGY]  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	68	None	replace
38	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	68	None	replace
39	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	68	None	replace
40	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	68	None	replace
41	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length  -  1;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    ltQ.length    -    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	95	None	replace
42	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltI.length  -  1;  ++i)  {  [CE]  cannot  find  symbol  ltI  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltI.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltI.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    ltQ.length    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ltI	95	None	replace
43	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  2);	  int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
44	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJ.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJ.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJ.length  -  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
45	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ordered.length;  ++i)  {  [CE]  cannot  find  symbol  ordered  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ordered.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ordered.length;  ++i)  {	  for(int    i    =    0;    i    <    orders.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	80	None	replace
47	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta,  relativeSymmetryThreshold);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
48	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lQ);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lQ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lQ);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
49	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lTQ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lTQ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lTQ);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
50	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  maxDelta  +  1);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
51	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
52	[BUG]  [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJ);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJ);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
53	[BUG]  [BUGGY]  int  order  =  lJ  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lJ  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lJ  *  Math.max(relativeSymmetryThreshold,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
54	[BUG]  [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lJ);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lJ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lJ);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
55	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length();  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order.length();  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order.length();  ++i)  {	  for(int    i    =    0;    i    <    order.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	19	None	replace
56	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  item.length;  ++i)  {  [CE]  cannot  find  symbol  item  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  item.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  item.length;  ++i)  {	  for(int    i    =    0;    i    <    order.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  item	19	None	replace
57	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lIJ));    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
58	[BUG]  [BUGGY]  int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  >  expected	29	None	replace
59	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  int  i  =  0;  i  <  lJI.length;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  int  i  =  0;  i  <  lJI.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  int  i  =  0;  i  <  lJI.length;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  >  expected	29	None	replace
60	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  >  expected	29	None	replace
61	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  *  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  *  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  *  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
62	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  +  2);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  +  2);	  int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
63	[BUG]  [BUGGY]  final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
64	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold  -  1);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    0,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
65	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  absoluteSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  absoluteSymmetryThreshold);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    0,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
66	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold  +  1);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    0,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
67	[BUG]  [BUGGY]  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    Math.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	69	None	replace
68	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    Math.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	69	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    Math.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	69	None	replace
70	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	62	None	replace
71	[BUG]  [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
72	[BUG]  [BUGGY]  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	58	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	58	None	replace
74	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  Math.sqrt(lTData[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  Math.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  Math.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    Math.sqrt(lTData[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	58	None	replace
75	[BUG]  [BUGGY]  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	57	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  matrix.sqrt(lTData[i]);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	57	None	replace
78	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  int    order    =    Math.min(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
79	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);	  int    order    =    Math.min(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
80	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    For(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData[i]  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData[i]  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData[i]  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    For(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
82	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    For(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
83	[BUG]  [BUGGY]  final  double[]  ltData  =  lTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  ltData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  ltData  =  lTData[i];	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
84	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [CE]  cannot  find  symbol  ltData  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  ltData	91	None	replace
85	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  ltQ	91	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  ltData  =  lTData[i];  [CE]  cannot  find  symbol  lJ  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  ltData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  ltData  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  lJ	79	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData  =  lTData[i];  [CE]  cannot  find  symbol  ltData  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  ltData	79	None	replace
88	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
89	[BUG]  [BUGGY]  int  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
90	[BUG]  [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJI);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
91	[BUG]  [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  lJI);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
92	[BUG]  [BUGGY]  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  lTData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	36	None	replace
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	36	None	replace
94	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	36	None	replace
95	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length  &&  ++i)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length  &&  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
96	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&  j  >  0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&  j  >  0)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  &&  j  >  0)  {	  for(int    i    =    0;    i    <    lTData.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
97	[BUG]  [BUGGY]  int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
98	[BUG]  [BUGGY]  final  int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
99	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ.length;  ++i)  {	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ltQ	99	None	replace
100	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	70	None	replace
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	70	None	replace
102	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lMaxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lMaxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lMaxDelta);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
103	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  relativeSymmetryThreshold,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  relativeSymmetryThreshold,  maxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  relativeSymmetryThreshold,  maxDelta);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
104	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
105	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
106	[BUG]  [BUGGY]  final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
107	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
108	[BUG]  [BUGGY]  final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
109	[BUG]  [BUGGY]  final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
110	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  lTData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
111	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    	non-compiled	[CE]  incompatible  types	59	None	replace
112	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [CE]  cannot  find  symbol  lJ  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  lJ	59	None	replace
113	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
114	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);	  int    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
115	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  2);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  2);	  int    order    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
116	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lQ);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lQ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lQ);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
117	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta,  relativeSymmetryThreshold);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
118	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lTQ);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lTQ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lTQ);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
119	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
120	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  	non-compiled	[CE]  >  expected	24	None	add
121	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    final  double[]  lTData[i]  =  lTData[i];	  	non-compiled	[CE]  ']'  expected	24	None	add
122	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    final  double[]  ltData[i]  =  lTData[i];	  	non-compiled	[CE]  ']'  expected	24	None	add
123	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
124	[BUG]  [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
125	[BUG]  [BUGGY]  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  ltData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	37	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	37	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	37	None	replace
128	[BUG]  [BUGGY]  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix    *    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	60	None	replace
129	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  matrix  *  Math.sqrt(lTData[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  matrix  *  Math.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[]  =  matrix  *  Math.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix    *    Math.sqrt(lTData[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	60	None	replace
130	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix    *    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	60	None	replace
131	[BUG]  [BUGGY]  final  int  order  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    int    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
132	[BUG]  [BUGGY]  final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    int    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
133	[BUG]  [BUGGY]  final  int  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    int    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
134	[BUG]  [BUGGY]  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	71	None	replace
135	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	71	None	replace
136	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	71	None	replace
137	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
138	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  -  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
139	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  +  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
140	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI.length  -  2);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
141	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIQ));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIQ));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIQ));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIQ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
142	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lQ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lQ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lQ),  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIQ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
143	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIQ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
144	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);	  int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
145	[BUG]  [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  absoluteSymmetryThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  absoluteSymmetryThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);	  int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
146	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  absolutePositivityThreshold);	  int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
147	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTQ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	85	None	replace
148	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTQ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	85	None	replace
149	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
150	[BUG]  [BUGGY]  final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
151	[BUG]  [BUGGY]  final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
152	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length  &&  ++i)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lTData.length  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lTData.length  &&  ++i)  {	  for(int    i    =    1;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
153	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  =  order  &&  ++i)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  =  order  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  =  order  &&  ++i)  {	  for(int    i    =    1;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
154	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lJI.length  &&  ++i)  {  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lJI.length  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lJI.length  &&  ++i)  {	  for(int    i    =    1;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  j  >  0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  j  >  0)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJI.length  &&  j  >  0)  {	  for(int    i    =    0;    i    <    lJI.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
156	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  maxDelta  ==  lJI.length)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  maxDelta  ==  lJI.length)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJI.length  &&  maxDelta  ==  lJI.length)  {	  for(int    i    =    0;    i    <    lJI.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
157	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    order    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
158	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
159	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
160	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
161	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  /  Math.min(lJI,  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  /  Math.min(lJI,  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  /  Math.min(lJI,  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
162	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
163	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
164	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    lTData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	32	None	replace
165	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJ);	  int    order    =    Math.min(lJI,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
166	[BUG]  [BUGGY]  int  order  =  Math.min(lJI,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(lJI,  maxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(lJI,  maxDelta);	  int    order    =    Math.min(lJI,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
167	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	30	None	replace
168	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	30	None	replace
169	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
170	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
171	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  &&  j  >  0)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  &&  j  >  0)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ.length  &&  j  >  0)  {	  for(int    i    =    0;    i    <    ltQ.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
172	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	89	None	replace
173	[BUG]  [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJ.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJ.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  lJ.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
174	[BUG]  [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  super.relativeSymmetryThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
175	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  -  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
176	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  +  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
177	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta  -  1);	  int    order    =    Math.min(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
178	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta  +  1);	  int    order    =    Math.min(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
179	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1  +  1);	  int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
180	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTQ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	85	None	replace
181	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTQ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	85	None	replace
182	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  +  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold  +  1);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
183	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  minDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  minDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  minDelta)  {  throw  new  NotS	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotS    	non-compiled	[CE]  '('  or  '['  expected	61	None	replace
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJField.length;  ++i)  {  [CE]  cannot  find  symbol  lJField  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJField.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJField.length;  ++i)  {	  for(int    i    =    0;    i    <    lJData.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  lJField	56	None	replace
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  lTData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    final  double[]  lTData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[]  ltData  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    final  double[]  ltData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	24	None	add
187	[BUG]  [BUGGY]  int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lJI);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
188	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(lJI,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
189	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  maxDelta,  lJI);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
190	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size  -  1;  ++i)  {  For(int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  size  -  1;  ++i)  {  For(int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  size  -  1;  ++i)  {  For(int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    For(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
191	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  For(int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	For(int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    For(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
192	[BUG]  [BUGGY]  int  order  =  Math.min(primarySymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(primarySymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(primarySymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
193	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  [CE]  cannot  find  symbol  ltData  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length;  ++i)  {	  for(int    i    =    0;    i    <    orders.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ltData	80	None	replace
194	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i].doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i].doubleValue();  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i].doubleValue();	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    	non-compiled	[CE]  double  cannot  be  dereferenced	59	None	replace
195	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJData.length  -  1;  ++i)  {  [CE]  cannot  find  symbol  lJData  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    lJI.length    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  lJData	26	None	replace
196	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltTData.length;  ++i)  {  [CE]  cannot  find  symbol  ltTData  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltTData.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltTData.length;  ++i)  {	  for(int    i    =    0;    i    <    ltI.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ltTData	99	None	replace
197	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  [CE]  cannot  find  symbol  ltData  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  ltData	91	None	replace
198	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	63	None	replace
199	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	63	None	replace
200	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	63	None	replace
201	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    order    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJ.length;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJ.length;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
203	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  absolutePositivityThreshold);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    0,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
204	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  0,  lJI);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    0,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size  -  1;  ++i)  {  [CE]  cannot  find  symbol  size  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  size  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  size  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  size	28	None	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.maxDelta;  ++i)  {  [CE]  cannot  find  symbol  maxDelta  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  this.maxDelta;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  this.maxDelta;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    for(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  maxDelta	28	None	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedDelta;  ++i)  {  [CE]  cannot  find  symbol  orderedDelta  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  orderedDelta;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  orderedDelta;  ++i)  {	  for(int    i    =    0;    i    <    maxDelta;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedDelta	53	None	replace
208	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lJ,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lJ,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(lJ,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
209	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotS    	non-compiled	[CE]  '('  or  '['  expected	65	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	add	for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	25	4	replace
211	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	25	4	replace
212	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
213	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
214	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetricM  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetricM  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.min(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetricM	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
215	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1  &&  ++i)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1  &&  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2  &&  ++i)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  -  2  &&  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&!i.hasNext())  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&!i.hasNext())  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  &&!i.hasNext())  {	  for(int    i    =    0;    i    <    lTData.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
218	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	89	None	replace
219	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	96	None	replace
220	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  absolutePositivityThreshold);	  int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
221	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  lTData.length);	  int    order    =    lTData.length    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
222	[BUG]  [BUGGY]  int  order  =  Math.min(lJI,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(lJI,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(lJI,  lTData.length);	  int    order    =    Math.min(lJI,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i].doubleValue();  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i].doubleValue();  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i].doubleValue();	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	36	None	replace
224	[BUG]  [BUGGY]  final  int  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    order    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
225	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
226	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
227	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
228	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	37	None	replace
229	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lJI,  lTData.length);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	43	None	replace
230	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  order  &&  ++i)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  2;  i  <  order  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  2;  i  <  order  &&  ++i)  {	  for(int    i    =    1;    i    <    order    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	15	None	replace
231	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJI.length  -  1  &&  ++i)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJI.length  -  1  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJI.length  -  1  &&  ++i)  {	  for(int    i    =    0;    i    <    lJI.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  maxDelta  >  0)  {  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lJI.length  &&  maxDelta  >  0)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lJI.length  &&  maxDelta  >  0)  {	  for(int    i    =    0;    i    <    lJI.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  -  1  &&  ++i)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltQ.length  -  1  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ.length  -  1  &&  ++i)  {	  for(int    i    =    0;    i    <    ltQ.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
234	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSy  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSy  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSy	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	64	None	replace
235	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
236	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
237	[BUG]  [BUGGY]  final  double  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
238	[BUG]  [BUGGY]  final  double  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
239	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
240	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[0],  Math.abs(lJI)));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[0],  Math.abs(lJI)));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[0],  Math.abs(lJI)));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	40	None	replace
241	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
242	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.min(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.min(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.min(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
243	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(lJI,  relativeSymmetryThreshold);  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	73	None	replace
244	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	73	None	replace
245	[BUG]  [BUGGY]  final  double  order  =  lTQ  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTQ  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTQ  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	73	None	replace
246	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIQ),  Math.abs(lJI));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIQ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	93	None	replace
247	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotS	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	90	None	replace
248	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	90	None	replace
249	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[1]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    lTData    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	41	None	replace
250	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size  -  1;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  size  -  1;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  size  -  1;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  >  expected	29	None	replace
251	[BUG]  [BUGGY]  int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  lTData  *  Math.max(relativeSymmetryThreshold,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
252	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
253	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lTData.length,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.min(lTData.length,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.min(lTData.length,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
254	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold,  lJI);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	58	None	replace
256	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	45	None	replace
257	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	57	None	replace
258	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSy  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSy  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSy	  final    double    order    =    lTQ    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	98	None	replace
259	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lIJ));    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
260	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold,  lJI);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	44	None	replace
261	[BUG]  [BUGGY]  final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	16	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.order.length;  ++i)  {  [CE]  cannot  find  symbol  order  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  this.order.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  this.order.length;  ++i)  {	  for(int    i    =    0;    i    <    order.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  order	19	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	71	None	replace
264	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  maxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(lTData,  maxDelta);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
265	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(lTData,  absolutePositivityThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
266	[BUG]  [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  absolutePositivityThreshold  *  Math.max(lTData.length,  relativeSymmetryThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
267	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotS    	non-compiled	[CE]  '('  or  '['  expected	20	None	replace
268	[BUG]  [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
269	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
270	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(lTData[i]);  }	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	71	None	replace
271	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  }  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  ltData[i]  =  matrix.sqrt(ltData[i]);  }	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    matrix.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	68	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  }  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	57	None	replace
273	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lTData.length);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
274	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJI);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  }  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  Math.sqrt(lTData[i]);  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	58	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  >  expected	29	None	replace
277	[BUG]  [BUGGY]  final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));	  final    int    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
278	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;	  Integer    order    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
279	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	36	None	replace
280	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  -  2);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  -  2);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lTData.length  -  2);	  int    order    =    Math.min(relativeSymmetryThreshold,    lTData.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
281	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ  ||  ++i)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltQ  ||  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ  ||  ++i)  {	  for(int    i    =    0;    i    <    ltQ    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	82	None	replace
282	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;	  int    order    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
283	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	74	None	replace
284	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  0);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  0);	  int    order    =    Math.min(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  }  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  Math.sqrt(ltData[i]);  }	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    Math.sqrt(ltData[i]);    	non-compiled	[CE]  ']'  expected	69	None	replace
286	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  For(int  i  =  0;  i  <  ltQ.length;  ++i)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  For(int  i  =  0;  i  <  ltQ.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltQ.length;  ++i)  {  For(int  i  =  0;  i  <  ltQ.length;  ++i)  {	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    For(int    i    =    0;    i    <    order    -    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	31	None	replace
287	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)/  2;	  int    order    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
288	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)-  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)-  1;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)-  1;	  int    order    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
289	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold  -  1);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold  -  1);	  int    order    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData[i]  =  ltData[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData[i]  =  ltData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData[i]  =  ltData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	37	None	replace
291	[BUG]  [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTQ));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTQ));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTQ));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTQ),    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	85	None	replace
292	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold.length);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold.length);	  int    order    =    Math.max(relativeSymmetryThreshold,    lJI.length);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
293	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.sqrt(lTData[i]);  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix    *    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	60	None	replace
294	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.cos(lTData[i]);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.cos(lTData[i]);  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData[i]  =  matrix  *  Math.cos(lTData[i]);	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData[i]    =    matrix    *    Math.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	60	None	replace
295	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData  =  ltData[i];  [CE]  cannot  find  symbol  ltData  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData  =  ltData[i];  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length;  ++i)  {  final  double[]  ltData  =  ltData[i];	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    ltData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  ltData	79	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&!relativeSymmetryThreshold.isEmpty())  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  &&!relativeSymmetryThreshold.isEmpty())  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length  &&!relativeSymmetryThreshold.isEmpty())  {	  for(int    i    =    0;    i    <    lTData.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
297	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  >  expected	34	None	replace
298	[BUG]  [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  3);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.max(relativeSymmetryThreshold,  3);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.max(relativeSymmetryThreshold,  3);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    2);    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
299	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  }  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order  -  1;  ++i)  {  final  double[]  lTData[i]  =  matrix.sqrt(lTData[i]);  }	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    lTData[i]    =    matrix.sqrt(lTData[i]);    	non-compiled	[CE]  ']'  expected	70	None	replace
300	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJ);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJ);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData.length,    lJ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
301	[BUG]  [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    order    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  class,  interface,  or  enum  expected	17	None	replace
302	[BUG]  [BUGGY]  final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                      AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	63	None	replace
303	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lIJ.length  &&  ++i)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lIJ.length  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lIJ.length  &&  ++i)  {	  for(int    i    =    0;    i    <    lJI.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
304	[BUG]  [BUGGY]  int  order  =  Math.min(lJI,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(lJI,  ltQ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(lJI,  ltQ);	  int    order    =    Math.min(lJI,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
305	[BUG]  [BUGGY]  final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTData.length  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
306	[BUG]  [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [CE]  '('  or  '['  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  if(Math.abs(lTData[0]  -  lJI)>  maxDelta)  {  throw  new  NotSymmetric	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    if(Math.abs(lTData[0]    -    lJI)>    maxDelta)    {    throw    new    Not    	non-compiled	[CE]  '('  or  '['  expected	67	None	replace
307	[BUG]  [BUGGY]  Integer  order  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  Integer  order  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	Integer  order  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  Integer    order    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
308	[BUG]  [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.max(relativeSymmetryThreshold,  lTData.length  -  1,  absolutePositivityThreshold);	  int    order    =    Math.max(relativeSymmetryThreshold,    lTData.length    -    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
309	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lTData.length);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lTData.length);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lTData.length);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length  -  1;  ++i)  {  [CE]  cannot  find  symbol  orderedL  [FE]        AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length  -  1;  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  orderedL.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    ltQ    -    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedL	94	None	replace
311	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	if(relativeSymmetryThreshold  >  0)  {  final  double  order  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  Not	  final    double    order    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotS    	non-compiled	[CE]  '('  or  '['  expected	61	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  }  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  ltData.length  -  1;  ++i)  {  final  double[]  ltData[i]  =  lTData[i];  }	  for(int    i    =    0;    i    <    order    -    1;    ++i)    {    final    double[]    ltData[i]    =    lTData[i];    	non-compiled	[CE]  ']'  expected	30	None	replace
313	[BUG]  [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	90	None	replace
314	[BUG]  [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lIJ));	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lIJ));    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
315	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
316	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);	  int    order    =    relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
317	[BUG]  [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lMaxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lMaxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	int  order  =  Math.min(relativeSymmetryThreshold,  lJI,  lMaxDelta);	  int    order    =    Math.min(relativeSymmetryThreshold,    lJI,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
318	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length  &&  ++i)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  order.length  &&  ++i)  {  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  order.length  &&  ++i)  {	  for(int    i    =    0;    i    <    ltQ.length    &&    ++i)    {    	non-compiled	[CE]  ';'  expected	83	None	replace
319	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  }  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  }  [BUGGY]        final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
320	[BUG]  [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }        [BUGGY]  final  double  order  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	132	132	2	replace	final  double  order  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  if(Math.abs(lTData[i]  -  lJI)>  maxDelta)  {  throw  new  NotSym	  final    double    order    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    if(Math.abs(lTData[i]    -    lJI)>    maxDelta)    {    throw    new    NotSym    	non-compiled	[CE]  '('  or  '['  expected	23	None	replace
