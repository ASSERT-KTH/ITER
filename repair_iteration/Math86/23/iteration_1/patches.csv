bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
3	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
4	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
5	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	3	2	add
7	[BUG]  [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	3	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	3	2	add
9	[BUG]  [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	3	2	add
10	[BUG]  [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  LJ  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  cannot  find  symbol  LJ	3	None	add
11	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
12	[BUG]  [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]      NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJ  -  lJI)  <  =  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
13	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(maxDelta  -  lJI)  <  lJI)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	17	7	replace
14	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lJI)  <  lJI)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	17	7	replace
15	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
16	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
17	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	1	None	replace
18	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
20	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
21	[BUG]  [BUGGY]  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
22	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  int  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  int  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
24	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
25	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  If(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  [CE]  ';'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  If(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    If(Math.abs(lIJ  -  lJI)  <  maxDelta)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
26	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  if(Math.abs(lIJ  -  ljI)  <  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]        NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  if(Math.abs(lIJ  -  ljI)  <  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ  -  ljI)  <  maxDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
27	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
28	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
29	[BUG]  [BUGGY]  lJ[i]  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
30	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lJI)>    maxDelta)    {    if(Math.abs(lJI  -  lJI)>  maxDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
31	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  maxDelta)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lJI)>    maxDelta)    {    If(Math.abs(lJI  -  lJI)>  maxDelta)  {	  	non-compiled	[CE]  ';'  expected	9	None	add
32	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
33	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
34	[BUG]  [BUGGY]  int  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  int  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
35	[BUG]  [BUGGY]  int  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  int  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
36	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    if(Math.abs(lJI  -  lJI)  <  maxDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
37	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [CE]  ';'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    If(Math.abs(lJI  -  lJI)  <  maxDelta)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
38	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]        NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(maxDelta  -  lJI)>  lJI)  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    	compilable	  [FE]  AssertionError  	10	3	replace
40	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lJI)>  lJI)  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    	compilable	  [FE]  AssertionError  	10	3	replace
41	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	11	None	replace
42	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ  -  lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
44	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ  -  lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
45	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lIJ));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lIJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lIJ));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
46	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
47	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
48	[BUG]  [BUGGY]  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
50	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
51	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
52	[BUG]  [BUGGY]  float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
53	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
54	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
55	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
56	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
58	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
59	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	8	7	replace
60	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	8	7	replace
61	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	8	7	replace
62	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  [FE]  NotSymmetricMatrixException  [FE]      NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	8	7	replace
63	[BUG]  [BUGGY]  float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
64	[BUG]  [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]      lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	3	None	add
65	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
66	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
67	[BUG]  [BUGGY]  lJ[i]  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
68	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  if(Math.abs(lJI  -  lJI)>  minDelta)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)>  maxDelta)  {  if(Math.abs(lJI  -  lJI)>  minDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lJI)>    maxDelta)    {    if(Math.abs(lJI  -  lJI)>  minDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
69	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  =  maxDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lIJ)  <  =  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
70	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  =  lIJ)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  =  lIJ)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lJI)  <  =  lIJ)  {	  if(Math.abs(lIJ    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
71	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  =  absolutePositivityThreshold)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ  -  lJI)  <  =  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
72	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  maxDelta));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  maxDelta));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  maxDelta));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
73	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
74	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));	      lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
75	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
76	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
77	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
78	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
79	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));	      int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
80	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  if(Math.abs(lIJ  -  lJI)  <  minDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  if(Math.abs(lIJ  -  lJI)  <  minDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ  -  lJI)  <  minDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
81	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
82	[BUG]  [BUGGY]  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
83	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
84	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
85	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ));  [BUGGY]    if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ));	      double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
86	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  if(Math.abs(lJI  -  lJI)  <  minDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]    if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));    [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  if(Math.abs(lJI  -  lJI)  <  minDelta)  {  [BUGGY]    throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    if(Math.abs(lJI  -  lJI)  <  minDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
