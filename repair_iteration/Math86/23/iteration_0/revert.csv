projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124finaldoublelJI=relativeSymmetryThreshold*Math.max(Math.abs(lJ),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124lJ[i]=relativeSymmetryThreshold*Math.max(Math.abs(lIJ-lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124lJ[i]=relativeSymmetryThreshold*Math.max(Math.abs(lIJ),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124lJ[i]=relativeSymmetryThreshold*Math.max(Math.abs(lJ),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124if(Math.abs(lIJ-lJI)>maxDelta){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124if(Math.abs(lIJ-lJI)<=maxDelta){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124if(Math.abs(lIJ-lJI)<maxDelta){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124if(Math.abs(lJI-lJI)>maxDelta){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124finaldoublelJI=relativeSymmetryThreshold*Math.max(Math.abs(lJI),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124intlJI=relativeSymmetryThreshold*Math.max(relativeSymmetryThreshold,Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124doublelJI=relativeSymmetryThreshold*Math.max(Math.abs(lJ));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124finaldoublelJI=relativeSymmetryThreshold*Math.max(Math.abs(lJ));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124intlJI=relativeSymmetryThreshold*Math.max(Math.abs(lJ));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124if(Math.abs(lJI-lJI)<maxDelta){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124intlJI=relativeSymmetryThreshold*Math.max(Math.abs(lJI),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124doublelJI=relativeSymmetryThreshold*Math.max(Math.abs(lJI),Math.abs(lJI));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java124intlJI=relativeSymmetryThreshold*Math.max(Math.abs(lJ),Math.abs(lJI));
