bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
2	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
4	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
5	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
6	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lJI  -  maxDelta)  <  lJI)  {	  if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    	compilable	  [FE]  NotSymmetricMatrixException  	14	7	replace
7	[BUG]  [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  lJI)  {  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  maxDelta)  <  lJI)  {	  if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    	compilable	  [FE]  NotSymmetricMatrixException  	14	7	replace
8	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  =  lJI)  {  [CE]  illegal  start  of  expression  [FE]      NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  =  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lJI)  <  =  lJI)  {	  if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
9	[BUG]  [BUGGY]  if(Math.abs(lJi  -  lJI)  <  maxDelta)  {  [CE]  cannot  find  symbol  lJi  [FE]        NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJi  -  lJI)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJi  -  lJI)  <  maxDelta)  {	  if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    	non-compiled	[CE]  cannot  find  symbol  lJi	14	None	replace
10	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lIJ)    {    if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
11	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  If(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  [CE]  ';'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  If(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lIJ)    {    If(Math.abs(maxDelta  -  lJI)  <  lIJ)  {	  	non-compiled	[CE]  ';'  expected	59	None	add
12	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  if(Math.abs(maxDelta  -  lJI)  <  =  lIJ)  {  [CE]  illegal  start  of  expression  [FE]        NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  if(Math.abs(maxDelta  -  lJI)  <  =  lIJ)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lIJ)    {    if(Math.abs(maxDelta  -  lJI)  <  =  lIJ)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
13	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    if(Math.abs(maxDelta  -  lJI)  <  lJI)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
14	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  If(Math.abs(maxDelta  -  lJI)  <  lJI)  {  [CE]  ';'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  If(Math.abs(maxDelta  -  lJI)  <  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    If(Math.abs(maxDelta  -  lJI)  <  lJI)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
15	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  if(Math.abs(maxDelta  -  lJI)  <  =  lJI)  {  [CE]  illegal  start  of  expression  [FE]        NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  if(Math.abs(maxDelta  -  lJI)  <  =  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    if(Math.abs(maxDelta  -  lJI)  <  =  lJI)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
16	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.max(Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.max(Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.max(Math.abs(lJI)));	  double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
17	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  minDelta)  {  [CE]  cannot  find  symbol  minDelta  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  minDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  minDelta)  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    if(Math.abs(lJI    -    lJI)>    minDelta)    {    	non-compiled	[CE]  cannot  find  symbol  minDelta	68	None	replace
18	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)>  minDelta)  {  [CE]  cannot  find  symbol  minDelta  [FE]          AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)>  minDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)>  minDelta)  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    if(Math.abs(lJI    -    lJI)>    minDelta)    {    	non-compiled	[CE]  cannot  find  symbol  minDelta	68	None	replace
19	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
20	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
21	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI)+  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI)+  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI)+  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
22	[BUG]  [BUGGY]  if(Math.abs(lJI  -  ljI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]            NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  ljI)  <  =  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  ljI)  <  =  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ    -    ljI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
23	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  ljI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]              NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lIJ  -  ljI)  <  =  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ  -  ljI)  <  =  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ    -    ljI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
24	[BUG]  [BUGGY]  if(Math.abs(lJI  -  ljI)  <  maxDelta)  {  [CE]  cannot  find  symbol  ljI  [FE]                NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  ljI)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  ljI)  <  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ    -    ljI)    <    maxDelta)    {    	non-compiled	[CE]  cannot  find  symbol  ljI	26	None	replace
25	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)/  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)/  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)/  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
26	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
27	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
28	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJ)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJ)  <  =  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJ)  <  =  maxDelta)  {	  if(Math.abs(lJI    -    lIJ)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
29	[BUG]  [BUGGY]  If(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]          NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  If(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	If(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    If(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
30	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]            NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    If(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
31	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
32	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
33	[BUG]  [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  relativeSymmetryThreshold),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  relativeSymmetryThreshold),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  relativeSymmetryThreshold),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
34	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold,  ltQ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
35	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
36	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
37	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
38	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
39	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
40	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI    +    1));    	non-compiled	[CE]  ']'  expected	75	None	replace
41	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
42	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
43	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
44	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)>    lJI)    {    if(Math.abs(maxDelta  -  lJI)>  lJI)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
45	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  If(Math.abs(maxDelta  -  lJI)>  lJI)  {  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)>  lJI)  {  If(Math.abs(maxDelta  -  lJI)>  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)>    lJI)    {    If(Math.abs(maxDelta  -  lJI)>  lJI)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
46	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l	  	non-compiled	[CE]  ')'  expected	6	None	add
47	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
48	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ));  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ));	  	non-compiled	[CE]  no  suitable  method  found  for  max(double)	6	None	add
49	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ	  	non-compiled	[CE]  ')'  expected	6	None	add
50	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData[	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
51	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
52	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.min(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.min(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.min(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
53	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(lJI,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
54	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(lJI,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
55	[BUG]  [BUGGY]  int  lJI  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(lJI,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
56	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
57	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    maxDelta));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
58	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  maxDelta));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  maxDelta));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  maxDelta));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    maxDelta));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
59	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
60	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
61	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(relativeSymmetryThreshold));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
62	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
63	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
64	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(relativeSymmetryThreshold));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    if(Math.abs(lJI    -    lJI)    >=    maxDelta)    {    	compilable	  [FE]  AssertionError  	38	3	replace
66	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {  [FE]  AssertionError  [FE]            NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  >=  maxDelta)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    if(Math.abs(lJI    -    lJI)    >=    maxDelta)    {    	compilable	  [FE]  AssertionError  	38	3	replace
67	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  lIJ)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lJI  -  maxDelta)  <  lIJ)  {	  if(Math.abs(maxDelta    -    lJI)    <    lIJ)    {    	compilable	  [FE]  NotSymmetricMatrixException  	60	7	replace
68	[BUG]  [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  lIJ)  {  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  lIJ)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  maxDelta)  <  lIJ)  {	  if(Math.abs(maxDelta    -    lJI)    <    lIJ)    {    	compilable	  [FE]  NotSymmetricMatrixException  	60	7	replace
69	[BUG]  [BUGGY]  if(Math.abs(lJ  -  lJI)  <  maxDelta)  {  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJ  -  lJI)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJ  -  lJI)  <  maxDelta)  {	  if(Math.abs(lJ    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	12	None	replace
70	[BUG]  [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  absoluteSymmetryThreshold)  {  [CE]  illegal  start  of  expression  [FE]            NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  absoluteSymmetryThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJ  -  lJI)  <  =  absoluteSymmetryThreshold)  {	  if(Math.abs(lJ    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
71	[BUG]  [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  maxDelta,  relativeSymmetryThreshold)  {  [CE]  illegal  start  of  expression  [FE]              NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  maxDelta,  relativeSymmetryThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJ  -  lJI)  <  =  maxDelta,  relativeSymmetryThreshold)  {	  if(Math.abs(lJ    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
72	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(maxDelta));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(maxDelta));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(maxDelta));	  lJ[i]    =    maxDelta    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
73	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  lJ[i]    =    maxDelta    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
74	[BUG]  [BUGGY]  Double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  Double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	Double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));	  float    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
75	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	20	None	replace
77	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	19	None	replace
78	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
79	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  maxDelta)>  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lJI  -  maxDelta)>  lJI)  {	  if(Math.abs(maxDelta    -    lJI)>    lJI)    {    	compilable	  [FE]  AssertionError  	40	3	replace
81	[BUG]  [BUGGY]  if(Math.abs(lJI  -  maxDelta)>  lJI)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  maxDelta)>  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  maxDelta)>  lJI)  {	  if(Math.abs(maxDelta    -    lJI)>    lJI)    {    	compilable	  [FE]  AssertionError  	40	3	replace
82	[BUG]  [BUGGY]  if(Math.abs(lJi  -  lJI)>  maxDelta)  {  [CE]  cannot  find  symbol  lJi  [FE]      AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJi  -  lJI)>  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJi  -  lJI)>  maxDelta)  {	  if(Math.abs(maxDelta    -    lJI)>    lJI)    {    	non-compiled	[CE]  cannot  find  symbol  lJi	40	None	replace
83	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lJI  -  lIJ)  <  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotSymmetricMatrixException  	71	7	replace
84	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  absolutePositivityThreshold)  {  [FE]  NotSymmetricMatrixException  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lIJ)  <  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotSymmetricMatrixException  	71	7	replace
85	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lIJ  -  lJI)  <  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotSymmetricMatrixException  	71	7	replace
86	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  absolutePositivityThreshold)  {  [FE]  NotSymmetricMatrixException  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ  -  lJI)  <  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotSymmetricMatrixException  	71	7	replace
87	[BUG]  [BUGGY]  if(Math.abs(lJ  -  lIJ)  <  absolutePositivityThreshold)  {  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJ  -  lIJ)  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJ  -  lIJ)  <  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	71	None	replace
88	[BUG]  [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJ  *  Math.max(Math.abs(lJ));	  double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
89	[BUG]  [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(absolutePositivityThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(absolutePositivityThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJ  *  Math.max(Math.abs(absolutePositivityThreshold));	  double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
90	[BUG]  [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
91	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
92	[BUG]  [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
93	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  double    lJI    =    maxDelta    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
94	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ));	  double    lJI    =    maxDelta    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
95	[BUG]  [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  minDelta)  {  [CE]  cannot  find  symbol  minDelta  [FE]        NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lIJ  -  lJI)  <  minDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lIJ  -  lJI)  <  minDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ    -    lJI)    <    minDelta)    {    	non-compiled	[CE]  cannot  find  symbol  minDelta	80	None	replace
96	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI  -  lIJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI  -  lIJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI  -  lIJ));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
97	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lIJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lIJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lIJ));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
98	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lIJ)    <    maxDelta)    {    if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
99	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  If(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  [CE]  ';'  expected  [FE]      NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  If(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lIJ)    <    maxDelta)    {    If(Math.abs(lJI  -  lIJ)  <  maxDelta)  {	  	non-compiled	[CE]  ';'  expected	61	None	add
100	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  if(Math.abs(lJI  -  lIJ)  >=  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]        NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  if(Math.abs(lJI  -  lIJ)  >=  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lIJ)    <    maxDelta)    {    if(Math.abs(lJI  -  lIJ)  >=  maxDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
101	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
102	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
103	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
104	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(l  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(l  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(l	  	non-compiled	[CE]  ')'  expected	8	None	add
105	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
106	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ	  	non-compiled	[CE]  ')'  expected	8	None	add
107	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ));  [CE]  no  suitable  method  found  for  min(double)  [FE]          AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ));	  	non-compiled	[CE]  no  suitable  method  found  for  min(double)	8	None	add
108	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ)  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ)  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ)	  	non-compiled	[CE]  ')'  expected	8	None	add
109	[BUG]  [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
110	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
111	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
112	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
113	[BUG]  [BUGGY]  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
114	[BUG]  [BUGGY]  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
115	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
116	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	10	None	replace
117	[BUG]  [BUGGY]  int  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
118	[BUG]  [BUGGY]  int  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
119	[BUG]  [BUGGY]  float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	float  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  int    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
120	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ)-    1,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
121	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)/  1,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)/  1,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)/  1,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ)-    1,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
122	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    lJI    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
123	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    lJI    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
124	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
125	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
126	[BUG]  [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  relativeSymmetryThreshold),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  relativeSymmetryThreshold),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  relativeSymmetryThreshold),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
127	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
128	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
129	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    lJ[relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	41	None	replace
130	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    lJI    =    lJ[relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	41	None	replace
131	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
132	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ),  Math.abs(lJ)));	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
133	[BUG]  [BUGGY]  Double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  Double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	Double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
134	[BUG]  [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  int    lJI    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
135	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
136	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lJI));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
137	[BUG]  [BUGGY]  If(Math.abs(lIJ  -  lJI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]          NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  If(Math.abs(lIJ  -  lJI)  <  =  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	If(Math.abs(lIJ  -  lJI)  <  =  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    If(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
138	[BUG]  [BUGGY]  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [CE]  ';'  expected  [FE]            NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	If(Math.abs(lJI  -  lJI)  <  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    If(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
139	[BUG]  [BUGGY]  lJ[i]  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  lJ[i]    =    lJ    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
140	[BUG]  [BUGGY]  If(Math.abs(lJI  -  lJI)>  maxDelta)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  If(Math.abs(lJI  -  lJI)>  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	If(Math.abs(lJI  -  lJI)>  maxDelta)  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    If(Math.abs(lJI    -    lJI)>    maxDelta)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
141	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  maxDelta)  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    If(Math.abs(lJI    -    lJI)>    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
142	[BUG]  [BUGGY]  lJ[i]  =  lJ[i]  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJ[i]  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJ[i]  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  lJ[i]    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
143	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);	  final    double    lJI    =    lJ[relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	17	None	replace
144	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
145	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI),  Math.abs(lJI)));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
146	[BUG]  [BUGGY]  long  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  long  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	long  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  float    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
147	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  MAXIMUM_SYMMETRY_THRESHOLD)  {  [CE]  illegal  start  of  expression  [FE]        NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  MAXIMUM_SYMMETRY_THRESHOLD)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  MAXIMUM_SYMMETRY_THRESHOLD)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
148	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
149	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
150	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  absoluteSymmetryThreshold)  {  [CE]  illegal  start  of  expression  [FE]        NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  absoluteSymmetryThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  absoluteSymmetryThreshold)  {	  if(Math.abs(lJI    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
151	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
152	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
153	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
154	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
155	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
156	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
157	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    +    1));    	non-compiled	[CE]  ']'  expected	77	None	replace
158	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
159	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(maxDelta));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(maxDelta));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(maxDelta));	  lJ[i]    =    maxDelta    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
160	[BUG]  [BUGGY]  lJ[i]  =  lJ[maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJ[maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJ[maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  lJ[i]    =    maxDelta    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	65	None	replace
161	[BUG]  [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  =  lIJ)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  maxDelta)  <  =  lIJ)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  maxDelta)  <  =  lIJ)  {	  if(Math.abs(maxDelta    -    lJI)    <    =    lIJ)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
162	[BUG]  [BUGGY]  if(Math.abs(lJi  -  lJI)  <  =  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJi  -  lJI)  <  =  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJi  -  lJI)  <  =  maxDelta)  {	  if(Math.abs(maxDelta    -    lJI)    <    =    lIJ)    {    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
163	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
164	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
165	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)-    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
166	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)-    1);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
167	[BUG]  [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
168	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    lJI    =    lJ[relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	17	None	replace
169	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
170	[BUG]  [BUGGY]  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
171	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.min(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.min(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.min(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
172	[BUG]  [BUGGY]  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
173	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ)-    1,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
174	[BUG]  [BUGGY]  lJ[i]  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  lJ[i]    =    lJ    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
175	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  if(Math.abs(maxDelta  -  lJI)  <  ljI)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lJI)  {  if(Math.abs(maxDelta  -  lJI)  <  ljI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lJI)    {    if(Math.abs(maxDelta  -  lJI)  <  ljI)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
176	[BUG]  [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
177	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
178	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
179	[BUG]  [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
180	[BUG]  [BUGGY]  double  lJI  =  lTQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lTQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lTQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
181	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
182	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]        NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	24	7	replace
183	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {  [FE]  NotSymmetricMatrixException  [FE]        NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	24	7	replace
184	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {  If(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  [CE]  ';'  expected  [FE]          NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {  If(Math.abs(lIJ  -  lJI)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  absolutePositivityThreshold)  {  If(Math.abs(lIJ  -  lJI)  <  maxDelta)  {	  if(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    If(Math.abs(lIJ    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  ';'  expected	25	None	replace
185	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lQ),  Math.abs(lJI));	  final    double    lJI    =    lJI    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
186	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.max(Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.max(Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.max(Math.abs(lJI)));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
187	[BUG]  [BUGGY]  float  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  float  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	float  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  int    lJI    =    maxDelta    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
188	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(relativeSymmetryThreshold));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
189	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
190	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  maxDelta));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  maxDelta));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  maxDelta));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  ';'  expected	56	None	replace
191	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
192	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.	  	non-compiled	[CE]  <identifier>  expected	6	None	add
193	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ	  	non-compiled	[CE]  ')'  expected	6	None	add
194	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.min(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.min(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.min(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
195	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ)));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJ)));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
196	[BUG]  [BUGGY]  double  lJI  =  maxDelta  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  maxDelta  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  maxDelta  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
197	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
198	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.min(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.min(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.min(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
199	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(Math.abs(lJI),  Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(Math.abs(lJI),  Math.abs(lJI)));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
200	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  absolutePositivityThreshold)  {	  if(Math.abs(lJI    -    lIJ)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
201	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  if(Math.abs(maxDelta  -  lJI)  <  liJ)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  lIJ)  {  if(Math.abs(maxDelta  -  lJI)  <  liJ)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta    -    lJI)    <    lIJ)    {    if(Math.abs(maxDelta  -  lJI)  <  liJ)  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
202	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
203	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
204	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
205	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJI)-  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
206	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lQ),  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
207	[BUG]  [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]          NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJ  -  lJI)  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJ  -  lJI)  <  =  absolutePositivityThreshold)  {	  if(Math.abs(lJ    -    lJI)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
208	[BUG]  [BUGGY]  lJ[i]  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  lJ[i]    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
209	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
210	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
211	[BUG]  [BUGGY]  if(Math.abs(lJI  -  minDelta)>  lJI)  {  [CE]  cannot  find  symbol  minDelta  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  minDelta)>  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  minDelta)>  lJI)  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    if(Math.abs(lJI    -    lJI)>    minDelta)    {    	non-compiled	[CE]  cannot  find  symbol  minDelta	68	None	replace
212	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
213	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  absolutePositivityThreshold)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]          NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  absolutePositivityThreshold)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  absolutePositivityThreshold)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    If(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
214	[BUG]  [BUGGY]  double  lJI  =  super.relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  super.relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  super.relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
215	[BUG]  [BUGGY]  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
216	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
217	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
218	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  lJ[i]    =    maxDelta    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
219	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.min(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.min(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.min(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
220	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
221	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lJI)  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lJI)  <  =  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
222	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lIJ)  <  =  absolutePositivityThreshold)  {	  if(Math.abs(lIJ    -    lJI)    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
223	[BUG]  [BUGGY]  float  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  float  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	float  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  int    lJI    =    super.relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
224	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	  final    double    lJI    =    lJ[relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	41	None	replace
225	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
226	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  LJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(l	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    LJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	10	None	replace
227	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
228	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lIJ)  <  =  lJI)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lIJ)  <  =  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lIJ)  <  =  lJI)  {	  if(Math.abs(lJI    -    lIJ)    <    =    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
229	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(relativeSymmetryThreshold));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
230	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(maxDelta));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(maxDelta));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(maxDelta));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
231	[BUG]  [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  int    lJI    =    lJ    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
232	[BUG]  [BUGGY]  int  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  int    lJI    =    lJ    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
233	[BUG]  [BUGGY]  float  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  float  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	float  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  int    lJI    =    lJ    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
234	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.max(Math.abs(lJI)));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
235	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ	  	non-compiled	[CE]  ')'  expected	8	None	add
236	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  relativeSymmetryThreshold);  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  relativeSymmetryThreshold);	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
237	[BUG]  [BUGGY]  lJ[i]  =  ltQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  ltQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  ltQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
238	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  0));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  0));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  0));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
239	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	54	None	replace
240	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  lTData[i])  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  lTData[i])  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  maxDelta)  {  If(Math.abs(lJI  -  lJI)>  lTData[i])  {	  if(Math.abs(lJI    -    lJI)>    maxDelta)    {    If(Math.abs(lJI    -    lJI)>    maxDelta)    {    	non-compiled	[CE]  ';'  expected	31	None	replace
241	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(relativeSymmetryThreshold,  lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(relativeSymmetryThreshold,  lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(relativeSymmetryThreshold,  lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
242	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  ')'  expected	47	None	replace
243	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(relativeSymmetryThreshold,  0));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(relativeSymmetryThreshold,  0));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.max(relativeSymmetryThreshold,  0));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
244	[BUG]  [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  ltQ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
245	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
246	[BUG]  [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
247	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  if(Math.abs(lJI  -  lIJ)  <  minDelta)  {  [CE]  illegal  start  of  expression  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lIJ)  <  maxDelta)  {  if(Math.abs(lJI  -  lIJ)  <  minDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI    -    lIJ)    <    maxDelta)    {    if(Math.abs(lJI  -  lIJ)  <  minDelta)  {	  	non-compiled	[CE]  illegal  start  of  expression	61	None	add
248	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
249	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
250	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJ));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
251	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
252	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
253	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
254	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lIJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lIJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lIJ));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ));    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
255	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ1));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ1));	  float    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
256	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
257	[BUG]  [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  ltQ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
258	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    +    1));    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
259	[BUG]  [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJ));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  lJI  *  Math.max(Math.abs(lJ));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  lJI  *  Math.max(Math.abs(lJ));	  double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
260	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.min(Math.abs(lJI  -  lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.min(Math.abs(lJI  -  lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.min(Math.abs(lJI  -  lJI));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
261	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.max(Math.abs(lJI)));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
262	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.max(Math.abs(lJI)));	  double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
263	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.abs(lJI));	  double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
264	[BUG]  [BUGGY]  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lIJ)  <  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	add	if(Math.abs(maxDelta  -  lIJ)  <  lJI)  {	  if(Math.abs(lJI    -    lIJ)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	62	7	replace
265	[BUG]  [BUGGY]  if(Math.abs(maxDelta  -  lIJ)  <  lJI)  {  [FE]  NotSymmetricMatrixException  [FE]    NotSymmetricMatrixException    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(maxDelta  -  lIJ)  <  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(maxDelta  -  lIJ)  <  lJI)  {	  if(Math.abs(lJI    -    lIJ)    <    maxDelta)    {    	compilable	  [FE]  NotSymmetricMatrixException  	62	7	replace
266	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ1),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ1),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ1),  Math.abs(lJI));	          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
267	[BUG]  [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
268	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lJI),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
269	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  lJI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  lJI));	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(lJI,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
270	[BUG]  [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	int  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(Math.abs(lJI)));	  int    lJI    =    relativeSymmetryThreshold    *    Math.min(lJI,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
271	[BUG]  [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ[relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    lJ[relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	41	None	replace
272	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  maxDelta));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  maxDelta));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  maxDelta));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    maxDelta));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
273	[BUG]  [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  maxDelta));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  maxDelta));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  maxDelta));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    maxDelta));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
274	[BUG]  [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  maxDelta  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  relativeSymmetryThreshold));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    maxDelta));    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
275	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.max(Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJI),  Math.max(Math.abs(lJI)));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
276	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
277	[BUG]  [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  0));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  0));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.max(relativeSymmetryThreshold,  0));	  double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
278	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(ltQ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(ltQ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(ltQ),  Math.abs(lJI));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
279	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lTQ[i],  Math.abs(lJI)));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(lTQ[i],  Math.abs(lJI)));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(lTQ[i],  Math.abs(lJI)));	  lJ[i]    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
280	[BUG]  [BUGGY]  if(Math.abs(lJI  -  minDelta)  <  lJI)  {  [CE]  cannot  find  symbol  minDelta  [FE]        NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  minDelta)  <  lJI)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  minDelta)  <  lJI)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    if(Math.abs(lJI    -    lJI)    <    minDelta)    {    	non-compiled	[CE]  cannot  find  symbol  minDelta	86	None	replace
281	[BUG]  [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]          lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	                lJ[i]        =        relativeSymmetryThreshold        *        Math.max(Math.abs(lIJ),        Math.abs(lJI));        lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  lJ[i]  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
282	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI)-  1,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI)-  1,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI)-  1,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ)-    1,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
283	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ)-  1,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ)-    1,    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
284	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lJ  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
285	[BUG]  [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lIJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  lJI  *  Math.max(Math.abs(relativeSymmetryThreshold  -  lIJ),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
286	[BUG]  [BUGGY]  lJ[i]  =  ltQ  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  lJ[i]  =  ltQ  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	lJ[i]  =  ltQ  *  Math.max(Math.abs(lJI  -  lIJ),  Math.abs(lJI));	  lJ[i]    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lIJ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
287	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
288	[BUG]  [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  ltQ  *  Math.max(Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  ltQ  *  Math.max(Math.abs(relativeSymmetryThreshold));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
289	[BUG]  [BUGGY]  final  double  lJI  =  lTQ  *  Math.max(Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  final  double  lJI  =  lTQ  *  Math.max(Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	final  double  lJI  =  lTQ  *  Math.max(Math.abs(relativeSymmetryThreshold));	  final    double    lJI    =    lJ    *    Math.max(Math.abs(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
290	[BUG]  [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	double  lJI  =  ltQ  *  Math.max(Math.abs(lJI,  ltQ),  Math.abs(relativeSymmetryThreshold));	  double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI,    ltQ),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
291	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  MAXIMUM_SYMMETRY_THRESHOLD)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [CE]  illegal  start  of  expression  [FE]          NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  MAXIMUM_SYMMETRY_THRESHOLD)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  MAXIMUM_SYMMETRY_THRESHOLD)  {  If(Math.abs(lJI  -  lJI)  <  maxDelta)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    If(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
292	[BUG]  [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  =  Math.abs(maxDelta)  {  [CE]  illegal  start  of  expression  [FE]            NotSymmetricMatrixException      [CONTEXT]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));      [BUGGY]  if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  =  Math.abs(maxDelta)  {  [BUGGY]      throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	124	124	2	replace	if(Math.abs(lJI  -  lJI)  <  =  maxDelta)  {  If(Math.abs(lJI  -  lJI)  <  =  Math.abs(maxDelta)  {	  if(Math.abs(lJI    -    lJI)    <    maxDelta)    {    If(Math.abs(lJI    -    lJI)    <    maxDelta)    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
