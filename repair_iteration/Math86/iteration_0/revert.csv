projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java134finaldouble[]ltI=lTData[i];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java134finaldouble[]ltI=lTData[i]-1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java134finaldouble[]ltI=lTData[i]+1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java134finaldouble[]ltI=lTData[i]/lJ;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java134
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java139
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java139ltI[i]=Math.sqrt(ltI[i]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java139if(order>1){for(inti=0;i<order;++i){ltI[i]=lTData[i];ltI[i]=Math.sqrt(ltI[i]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java139finaldouble[][]order=Math.sqrt(ltI[i]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java139if(order>1){for(inti=0;i<order;++i){ltI[i]*lTData[i]=Math.sqrt(ltI[i]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java139if(order>1){for(inti=0;i<order;++i){ltI[i]*ltData[i]=Math.sqrt(ltI[i]);}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java145ltQ[p]-=ltI[q]*ltI[p];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java145ltQ[p]-=ltI[q]*ltQ[p];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java145ltQ[p]-=ltI[q]*ltData[p];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java145ltQ[p]-=ltI[q]*inverse;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java145
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]*=inverse;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]*=(inverse>0)?ltI[q]:inverse;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]*=(inverse>0)?ltI[q],inverse:inverse;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]*=(inverse>0)?ltI[q].inverse:inverse;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132doubleorder=Math.sqrt(relativeSymmetryThreshold);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132intorder=Math.max(relativeSymmetryThreshold);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132intorder=Math.order(lTData,maxDelta);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132doubleorder=Math.max(relativeSymmetryThreshold);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132doubleorder=Math.max(relativeSymmetryThreshold,Math.abs(lIJ));
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]=Math.sqrt(ltI[q]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]=Math.sqrt(ltI[q],inverse);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]=Math.rint(ltI[q]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]=Math.abs(ltI[q]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java142ltI[q]=Math.sqrt(ltI[i]);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<order;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<absoluteSymmetryThreshold;++i){
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java132for(inti=0;i<absolutePositivityThreshold;++i){
