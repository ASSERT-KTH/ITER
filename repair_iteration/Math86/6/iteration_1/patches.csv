bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
2	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
3	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
4	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
5	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0]);	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
6	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q!=  0;  --q)  {  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  inverse  -  1;  q!=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q!=  0;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
7	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q  >=  0;  --q)  {  [CE]  possible  loss  of  precision  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  inverse  -  1;  q  >=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q  >=  0;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
8	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q  >=  ltI.length;  --q)  {  [CE]  possible  loss  of  precision  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  inverse  -  1;  q  >=  ltI.length;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q  >=  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
9	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q!=  ltI.length;  --q)  {  [CE]  possible  loss  of  precision  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  inverse  -  1;  q!=  ltI.length;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q!=  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
10	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  ltData[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i];	      final    double[][]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
11	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedLT[i];	      final    double[][]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
12	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0]);	      final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
13	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i]);	      final    double[][]    ltData    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
14	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  maxDelta);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  maxDelta);	      final    double[][]    ltData    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
15	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].symmetry(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltData  =  lTData[i].symmetry(inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].symmetry(inverse);	      final    double[][]    ltData    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  order  -  1;  q!=  0;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  AssertionError  	8	4	replace
17	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q!=  0;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  AssertionError  	8	4	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  AssertionError  	8	2	replace
19	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  AssertionError  	8	2	replace
20	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q!=  i;  --q)  {  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  inverse  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
21	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q!=  order;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	7	replace
22	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  order;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	8	7	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
24	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
26	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
28	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
29	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
30	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	30	4	replace
31	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int  q  =  order  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
32	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int  q  =  order  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
33	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q  >>  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int  q  =  order  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
34	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  for(int  q  =  order  -  1;  q  ==  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int  q  =  order  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
35	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  For(int  q  =  order  -  1;  q!=  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  For(int  q  =  order  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    i;    --q)    {    For(int  q  =  order  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
36	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int  q  =  i  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
37	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    i;    --q)    {    For(int  q  =  i  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
38	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int  q  =  i  -  1;  q  >  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
39	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    i;    --q)    {    int  q  =  i  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  not  a  statement	18	None	add
40	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
41	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
42	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
43	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
44	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  AssertionError  	21	4	replace
45	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [FE]  AssertionError  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  AssertionError  	21	4	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  AssertionError  	21	4	replace
47	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  AssertionError  	21	4	replace
48	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
49	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
50	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i]);	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
51	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  ltI[i];	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
52	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i]);	      double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
53	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta);	      double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
54	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold);	      double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
55	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[i]);	      double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
56	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int  q  =  order  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
57	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int  q  =  order  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
58	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  >>  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int  q  =  order  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
59	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  ==  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int  q  =  order  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
60	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  [Delete]  i;  --q)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  for(int  q  =  order  -  1;  q  [Delete]  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int  q  =  order  -  1;  q  [Delete]  i;  --q)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
61	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta);	      final    double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
62	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold);	      final    double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
63	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i]);	      final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
64	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]);	      final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
65	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int  q  =  i  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
66	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    0;    --q)    {    For(int  q  =  i  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
67	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int  q  =  i  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
68	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    0;    --q)    {    int  q  =  i  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  not  a  statement	16	None	add
69	[BUG]  [BUGGY]  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
70	[BUG]  [BUGGY]  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    	compilable	  [FE]  AssertionError  	17	4	replace
72	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    	compilable	  [FE]  AssertionError  	17	4	replace
73	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q!=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	7	replace
74	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	17	7	replace
75	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  ==  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    	compilable	  [FE]  AssertionError  	17	4	replace
76	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    	compilable	  [FE]  AssertionError  	17	4	replace
77	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  for(int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  for(int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int  q  =  order  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
78	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  For(int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  For(int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    i;    --q)    {    For(int  q  =  order  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
79	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    i;    --q)    {    int  q  =  order  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  >  expected	1	None	add
80	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  for(int  q  =  order  -  1;  q  <  i);  --q)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  for(int  q  =  order  -  1;  q  <  i);  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int  q  =  order  -  1;  q  <  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  order  -  1;  q  >=  0;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	6	4	replace
82	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  >=  0;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	6	4	replace
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  >=  order;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	6	4	replace
84	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  order;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	compilable	  [FE]  AssertionError  	6	4	replace
85	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  AssertionError  	4	4	replace
86	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  AssertionError  	4	4	replace
87	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q  <  i;  --q)  {  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  inverse  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	2	None	replace
88	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  <  order;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
89	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  order;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  order  -  1;  q  <  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  AssertionError  	2	4	replace
91	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  <  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  AssertionError  	2	4	replace
92	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
93	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
94	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  i);  --q)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  i);  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
95	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  not  a  statement	3	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  >=  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  AssertionError  	19	4	replace
97	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  AssertionError  	19	4	replace
98	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q!=  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	7	replace
99	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	7	replace
100	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  ==  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  AssertionError  	19	4	replace
101	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    	compilable	  [FE]  AssertionError  	19	4	replace
102	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
103	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
104	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
105	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
106	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  [Delete]  i;  --q)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  [Delete]  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  [Delete]  i;  --q)  {	  	non-compiled	[CE]  ';'  expected	29	None	add
107	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    i;    --q)    {    for(int  q  =  i  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
108	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    i;    --q)    {    For(int  q  =  i  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
109	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  <  i);  --q)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  <  i);  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    i;    --q)    {    for(int  q  =  i  -  1;  q  <  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	20	None	add
110	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    i;    --q)    {    int  q  =  i  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  >  expected	20	None	add
111	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  inverse  =  Math.max(inverse,  ltI[i]);  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i]);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
112	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j]);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
113	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[j];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[j];  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[j];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
114	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  For(int  q  =  order  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  For(int  q  =  order  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    i;    --q)    {    For(int  q  =  order  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
115	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  int  q  =  order  -  1;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  >=  i;  --q)  {  int  q  =  order  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    i;    --q)    {    int  q  =  order  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  not  a  statement	5	None	add
116	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
117	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    0;    --q)    {    (int  q  =  i  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  ')'  expected	16	None	add
118	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	      final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
119	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
120	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q  ==  0;  --q)  {  [CE]  possible  loss  of  precision  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  inverse  -  1;  q  ==  0;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q  ==  0;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	15	None	replace
121	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold);	      final    double[][]    ltData    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
122	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI);	      final    double[][]    ltData    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
123	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI);	      final    double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
124	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI);	      final    double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	24	None	replace
125	[BUG]  [BUGGY]  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	      double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
126	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse);  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i],  inverse);	      final    double[][]    ltI    =    lTData[i];    	non-compiled	[CE]  ';'  expected	28	None	replace
127	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[0];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[0];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[0];	      final    double[][]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
128	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i]  +  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i]  +  inverse;  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i]  +  inverse;	      final    double[][]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
129	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
130	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  not  a  statement	29	None	add
131	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  int  q  =  order  -  1;  q!=  i;  --q)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q!=  i;  --q)  {  int  q  =  order  -  1;  q!=  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    i;    --q)    {    int  q  =  order  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  not  a  statement	7	None	add
132	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
133	[BUG]  [BUGGY]  double[][]  inverse  =  lTData[i].sqrt(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  inverse  =  lTData[i].sqrt(inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  inverse  =  lTData[i].sqrt(inverse);	      double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
134	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI);	      double[][]    ltI    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	25	None	replace
135	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);	      final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	26	None	replace
136	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    i;    --q)    {    (int  q  =  i  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  ')'  expected	20	None	add
137	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  (int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  (int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    i;    --q)    {    (int  q  =  order  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
138	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  order  -  1;  q  <  i;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    i;    --q)    {    final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  >  expected	1	None	add
139	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    i;    --q)    {    (int  q  =  i  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  ')'  expected	18	None	add
140	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  i;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    i;    --q)    {    if(int  q  =  i  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
141	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0]);	      final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
142	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
143	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double  inverse  =  1.0  /  ltI[i];  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
144	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i].doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double  inverse  =  1.0  /  ltI[i].doubleValue();  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i].doubleValue();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
145	[BUG]  [BUGGY]  double  inverse  =  1.0  /  lTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double  inverse  =  1.0  /  lTData[i];  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  lTData[i];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
146	[BUG]  [BUGGY]  inverse  =  Math.sqrt(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  inverse  =  Math.sqrt(inverse);  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(inverse);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
147	[BUG]  [BUGGY]  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i]);	      double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	23	None	replace
148	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0);  --q)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  for(int  q  =  i  -  1;  q  >  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0);  --q)  {  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int  q  =  i  -  1;  q  >  0);  --q)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
149	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]);	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
150	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double  ltI  =  1.0  /  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  ltI[i];	      double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
151	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  lTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double  ltI  =  1.0  /  lTData[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  lTData[i];	      double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
152	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	      final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
153	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltI[i];	      final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
154	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	      final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
155	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);	      final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
156	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].symmetry;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltI  =  lTData[i].symmetry;  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].symmetry;	      final    double[][]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	28	None	replace
157	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  inverse);  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  inverse);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
158	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue());  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i].doubleValue());	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
159	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
160	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse);	      final    double[][]    ltData    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
161	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i]);  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i]);	      final    double[][]    ltData    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	27	None	replace
162	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  ltI[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltI[i];	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
163	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];    [BUGGY]  final  double[]  ltI  =  lTData[i];  [BUGGY]    for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i];	      final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
