bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[1];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[1];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[1];	  final    double[][]    ltI    =    lTData[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
2	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[2];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[2];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[2];	  final    double[][]    ltI    =    lTData[0];    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
3	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltData[i];  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltData[i];	  double    inverse    =    1.0    /    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
4	[BUG]  [BUGGY]  double  inverse  =  1.0  /  lTData[i]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  lTData[i]  +  1;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  lTData[i]  +  1;	  double    inverse    =    1.0    /    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
5	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i.length;  --q)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  i.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
6	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  0;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	7	replace
7	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  ltI.length;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	7	replace
8	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  order  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	7	replace
9	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  ltI.length;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	7	replace
10	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].inverse;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
11	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].axis;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].axis;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].axis;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
12	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].translateSymmetryThreshold;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].translateSymmetryThreshold;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].translateSymmetryThreshold;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
13	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[0]);  final  double  inverse  =  1.0  /  ltI[0];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[0]);  final  double  inverse  =  1.0  /  ltI[0];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[0]);  final  double  inverse  =  1.0  /  ltI[0];	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
14	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
15	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  order  -  1;  q  ==  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    0;    --q)    {    	compilable	  [FE]  AssertionError  	91	4	replace
17	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  ==  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  ==  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    0;    --q)    {    	compilable	  [FE]  AssertionError  	91	4	replace
18	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[][]    ltI    =    cachedL[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	119	None	replace
19	[BUG]  [BUGGY]  double[][]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);	  double[][]    ltI    =    ltI[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {	  for(int    q    =    i    -    1;    q    <    order;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	7	replace
21	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {	  for(int    q    =    i    -    1;    q    <    order;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	7	replace
22	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  <  order;  --q)  {	  for(int    q    =    i    -    1;    q    <    order;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	7	replace
23	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  order;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  order;  --q)  {	  for(int    q    =    i    -    1;    q    <    order;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	89	7	replace
24	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);	  final    double[][]    ltI    =    ltI[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
25	[BUG]  [BUGGY]  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);	  double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
26	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[j];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  inverse  =  1.0  /  ltI[j];  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  ltI[j];	  ltI[j]    =    Math.sqrt(ltI[j]);    final    double    inverse    =    1.0    /    ltI[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
27	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[j];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[j];  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[j];	  ltI[j]    =    Math.sqrt(ltI[j]);    final    double    inverse    =    1.0    /    ltI[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
28	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[i];	  ltI[j]    =    Math.sqrt(ltI[j]);    final    double    inverse    =    1.0    /    ltI[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
29	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  For(int  q  =  order  -  1;  q!=  0;  --q)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  For(int  q  =  order  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q!=  0;  --q)  {  For(int  q  =  order  -  1;  q!=  0;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    For(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
30	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  For(int  q  =  0;  q!=  i;  --q)  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  For(int  q  =  0;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {  For(int  q  =  0;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    For(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
31	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  For(int  q  =  i  -  1;  q!=  i;  --q)  {  [CE]  '.class'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  For(int  q  =  i  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  i;  --q)  {  For(int  q  =  i  -  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    For(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
32	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  For(int  q  =  order  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  For(int  q  =  order  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q!=  0;  --q)  {  For(int  q  =  order  -  1;  q  >=  0;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    For(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
33	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q!=  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q!=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    order;    --q)    {    for(int  q  =  i  -  1;  q!=  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
34	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    order;    --q)    {    for(int  q  =  i  -  1;  q  >=  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
35	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q  >>  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q  >>  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    order;    --q)    {    for(int  q  =  i  -  1;  q  >>  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
36	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q  ==  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  for(int  q  =  i  -  1;  q  ==  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    order;    --q)    {    for(int  q  =  i  -  1;  q  ==  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
37	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  For(int  q  =  i  -  1;  q!=  order;  --q)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  For(int  q  =  i  -  1;  q!=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    order;    --q)    {    For(int  q  =  i  -  1;  q!=  order;  --q)  {	  	non-compiled	[CE]  '.class'  expected	21	None	add
38	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	95	None	replace
39	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	95	None	replace
40	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	95	None	replace
41	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	95	None	replace
42	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i]  +  1;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i]  +  1;	  final    double    ltI    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
43	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  lTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  lTData[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  lTData[i];	  final    double    ltI    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
44	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]  *  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i]  *  inverse);	  final    double    ltI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
45	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]  +  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i]  +  inverse);	  final    double    ltI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
46	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[0]);	  final    double    ltI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
47	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  ltI[i]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  ltI[i]  +  1;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  ltI[i]  +  1;	  final    double    ltI    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
48	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  ltI[i].doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  ltI[i].doubleValue();  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  ltI[i].doubleValue();	  final    double    ltI    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
49	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  ltI[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  ltI[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  ltI[i]  *  inverse;	  final    double    ltI    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
50	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q!=  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	7	replace
51	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  ltI.length;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	99	7	replace
52	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  i);  --q)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  i);  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    for(int    q    =    i    -    1;    q    <    i);    --q)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
53	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0);  --q)  {  [CE]  ';'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0);  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    for(int    q    =    i    -    1;    q    <    i);    --q)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
54	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q  ==  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int    q    =    order    -    1;    q    ==    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
55	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
56	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
57	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
58	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
59	[BUG]  [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q  ==  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    ==    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
60	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
61	[BUG]  [BUGGY]  final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    final    double[]    ltI    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	138	None	replace
62	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  final  double[]  ltI  =  0;  q  <  i;  --q)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  final  double[]  ltI  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {  final  double[]  ltI  =  0;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    final    double[]    ltI    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	138	None	replace
63	[BUG]  [BUGGY]  for(int  i  =  order  -  1;  i  <  q;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  i  =  order  -  1;  i  <  q;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  i  =  order  -  1;  i  <  q;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    final    double[]    ltI    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	138	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  order  -  1;  i  <  0;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  i  =  order  -  1;  i  <  0;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  i  =  order  -  1;  i  <  0;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    final    double[]    ltI    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
65	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {  for(int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
66	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q  <  0;  --q)  {  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q  <  0;  --q)  {	  for(int    q    =    inverse    -    1;    q    ==    0;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	120	None	replace
67	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
68	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
69	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
70	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
71	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    i;    --q)    {    For(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
72	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[i]  +  1;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i]  +  1;	  double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
73	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i]  *  lJI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[i]  *  lJI[i];  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i]  *  lJI[i];	  double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
74	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[i]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  inverse  =  1.0  /  ltI[i]  +  1;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  ltI[i]  +  1;	  final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
75	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[i].doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  inverse  =  1.0  /  ltI[i].doubleValue();  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  ltI[i].doubleValue();	  final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
76	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[0];  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  inverse  =  1.0  /  ltI[0];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  ltI[0];	  final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
77	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
78	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);	  final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i].inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
79	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0].inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0].inverse);	  final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i].inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
80	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    for(int  q  =  i  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
81	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    for(int  q  =  i  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
82	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    for(int  q  =  i  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
83	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  For(int  q  =  i  -  1;  q  ==  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  For(int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    For(int  q  =  i  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	100	None	add
84	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  >>  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    for(int  q  =  i  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	100	None	add
85	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
86	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
87	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].symmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].symmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].symmetryThreshold(inverse);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
88	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  cachedLT[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  inverse  =  1.0  /  cachedLT[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  cachedLT[i];	  final    double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
89	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	  final    double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	118	None	replace
90	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue()  +  1);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i].doubleValue()  +  1);	  inverse    =    Math.max(inverse,    ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
91	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue()  -  1);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i].doubleValue()  -  1);	  inverse    =    Math.max(inverse,    ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
92	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue()  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i].doubleValue()  +  2);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i].doubleValue()  +  2);	  inverse    =    Math.max(inverse,    ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
93	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0]);	  final    double[]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
94	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);	  final    double[]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
95	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  inverse.length;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  inverse.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  inverse.length;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    ltI.length;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
96	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  inverse.length;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  inverse.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  inverse.length;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    ltI.length;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	replace
97	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q  <  ltI.length;  --q)  {  [CE]  possible  loss  of  precision  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    ltI.length;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	8	None	replace
98	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[][]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
99	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[1]);	  final    double[][]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
100	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[1];  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[1];  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[1];  ltI[i]  =  Math.sqrt(ltI[1]);	  final    double[][]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
101	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltData[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[i];	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
102	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltI[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltI[i]  *  inverse;	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
103	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    (int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	139	None	replace
104	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    (int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	139	None	replace
105	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    (int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	139	None	replace
106	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  (int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    (int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	139	None	replace
107	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q!=  order;  --q)  {	  for(int    q    =    i    -    1;    q!=    order;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	7	replace
108	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  order;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  order;  --q)  {	  for(int    q    =    i    -    1;    q!=    order;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	22	7	replace
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  inverse;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  -  1;  q  >=  inverse;  --q)  {	  for(int    q    =    i    -    1;    q!=    order;    --q)    {    	compilable	  [FE]  AssertionError  	22	4	replace
110	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  inverse;  --q)  {  [FE]  AssertionError  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  inverse;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  inverse;  --q)  {	  for(int    q    =    i    -    1;    q!=    order;    --q)    {    	compilable	  [FE]  AssertionError  	22	4	replace
111	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
112	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
113	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  1.0);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  1.0);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i],  1.0);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
114	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  lJI);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i],  lJI);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
115	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  0);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  0);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i],  0);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
116	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i]  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i]  +  1);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i]  +  1);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
117	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  maxDelta);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
118	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
119	[BUG]  [BUGGY]  double[][]  inverse  =  lTData[i].symmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  inverse  =  lTData[i].symmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  inverse  =  lTData[i].symmetryThreshold(inverse);	  double[][]    inverse    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
120	[BUG]  [BUGGY]  double[][]  inverse  =  lTData[i].sqrt(inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  inverse  =  lTData[i].sqrt(inverse,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  inverse  =  lTData[i].sqrt(inverse,  maxDelta);	  double[][]    inverse    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
121	[BUG]  [BUGGY]  double[][]  inverse  =  ltData[i].sqrt(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  inverse  =  ltData[i].sqrt(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  inverse  =  ltData[i].sqrt(inverse);	  double[][]    inverse    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
122	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    i;    --q)    {    for(int  q  =  i  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
123	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    i;    --q)    {    for(int  q  =  i  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
124	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q  >>  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    i;    --q)    {    for(int  q  =  i  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
125	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    i;    --q)    {    for(int  q  =  i  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
126	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    for(int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
127	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  for(int  q  =  0;  q  <  i);  --q)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  for(int  q  =  0;  q  <  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {  for(int  q  =  0;  q  <  i);  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i);    --q)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
128	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltI[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltI[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltI[i]  *  inverse;	  final    double[][]    ltI    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
129	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
130	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  For(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  For(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    For(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {	  	non-compiled	[CE]  '.class'  expected	42	None	add
131	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    int  q  =  i  -  1;  q  <  ltI.length;  --q)  {	  	non-compiled	[CE]  >  expected	42	None	add
132	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  for(int  q  =  i  -  1;  q  <  ltI.length);  --q)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  for(int  q  =  i  -  1;  q  <  ltI.length);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    for(int  q  =  i  -  1;  q  <  ltI.length);  --q)  {	  	non-compiled	[CE]  ';'  expected	42	None	add
133	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse,  maxDelta);	  final    double[][]    ltData    =    ltData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
134	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].symmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].symmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].symmetryThreshold(inverse);	  final    double[][]    ltData    =    ltData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
135	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[0]);	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
136	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]  *  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[i]  *  inverse);	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
137	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[1]);	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  2;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  2;  q  ==  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    	compilable	  [FE]  AssertionError  	28	4	replace
139	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  2;  q  ==  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  2;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  2;  q  ==  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    	compilable	  [FE]  AssertionError  	28	4	replace
140	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
141	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    i;    --q)    {    For(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	44	None	add
142	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    i;    --q)    {    int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  >  expected	44	None	add
143	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  i);  --q)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  <  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	44	None	add
144	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i].doubleValue()  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[i].doubleValue()  +  1;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i].doubleValue()  +  1;	  double    inverse    =    1.0    /    ltI[i].doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
145	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i].doubleValue()  +  2;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[i].doubleValue()  +  2;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i].doubleValue()  +  2;	  double    inverse    =    1.0    /    ltI[i].doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
146	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    0;    --q)    {    for(int  q  =  order  -  1;  q  >=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
147	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    0;    --q)    {    for(int  q  =  order  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
148	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    0;    --q)    {    for(int  q  =  order  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
149	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    0;    --q)    {    for(int  q  =  order  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	81	None	add
150	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  [Delete]  0;  --q)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  order  -  1;  q  [Delete]  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    0;    --q)    {    for(int  q  =  order  -  1;  q  [Delete]  0;  --q)  {	  	non-compiled	[CE]  ';'  expected	81	None	add
151	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
152	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
153	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
154	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
155	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
156	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
157	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
158	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
159	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  [Delete]  0;  --q)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  [Delete]  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  [Delete]  0;  --q)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
160	[BUG]  [BUGGY]  for(int  q  =  inverse.length  -  1;  q!=  0;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse.length  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse.length  -  1;  q!=  0;  --q)  {	  for(int    q    =    inverse    -    1;    q!=    0;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	6	None	replace
161	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].symmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].symmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].symmetryThreshold(inverse);	  final    double[][]    ltData    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
162	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);	  final    double[][]    ltData    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
163	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);	  final    double[][]    ltData    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
164	[BUG]  [BUGGY]  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	  double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
165	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  cachedL[i];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  inverse  =  1.0  /  cachedL[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  cachedL[i];	  double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	125	None	replace
166	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  For(int  q  =  0;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  For(int  q  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {  For(int  q  =  0;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    For(int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	78	None	replace
167	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  For(int  q  =  order  -  1;  q  <  0;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  For(int  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  <  0;  --q)  {  For(int  q  =  order  -  1;  q  <  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    For(int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	78	None	replace
168	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i]  *  inverse;	  final    double[][]    ltI    =    lTData[i]    +    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
169	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i]  +  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i]  +  ltI[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i]  +  ltI[i];	  final    double[][]    ltI    =    lTData[i]    +    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
170	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[1]);	  final    double[][]    ltI    =    ltData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
171	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[][]    ltI    =    ltData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
172	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[1];  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[1];  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[1];  ltI[i]  =  Math.sqrt(ltI[1]);	  final    double[][]    ltI    =    ltData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
173	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  absolutePositivityThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  absolutePositivityThreshold);	  inverse    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
174	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  inverse    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
175	[BUG]  [BUGGY]  for(int  q  =  inverse.length  -  1;  q!=  ltI.length;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse.length  -  1;  q!=  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse.length  -  1;  q!=  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q!=    ltI.length;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	9	None	replace
176	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q!=  0;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
177	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  maxDelta);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
178	[BUG]  [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
179	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
180	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
181	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
182	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    0;    --q)    {    for(int  q  =  i  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
183	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    0;    --q)    {    for(int  q  =  i  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
184	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    0;    --q)    {    for(int  q  =  i  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	73	None	add
185	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  0;  --q)  {  [CE]  ';'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    0;    --q)    {    for(int  q  =  i  -  1;  q  [Delete]  0;  --q)  {	  	non-compiled	[CE]  ';'  expected	73	None	add
186	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
187	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
188	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
189	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
190	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  2;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  2;  q!=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    	compilable	  [FE]  AssertionError  	26	4	replace
191	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  2;  q!=  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  2;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  2;  q!=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    	compilable	  [FE]  AssertionError  	26	4	replace
192	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  lTData[i]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  lTData[i]  +  1;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  lTData[i]  +  1;	  final    double    ltI    =    1.0    /    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
193	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  lTData[i].doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  lTData[i].doubleValue();  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  lTData[i].doubleValue();	  final    double    ltI    =    1.0    /    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
194	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  ltData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  ltData[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  ltData[i];	  final    double    ltI    =    1.0    /    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
195	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    For(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	66	None	replace
196	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    For(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	66	None	replace
197	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    For(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	66	None	replace
198	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    For(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	66	None	replace
199	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
200	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[maxDelta]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[maxDelta]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[maxDelta]);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
201	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltIJ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltIJ);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltIJ);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
202	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	71	None	add
203	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    0;    --q)    {    For(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	71	None	add
204	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  if(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  if(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    0;    --q)    {    if(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	71	None	add
205	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[]    ltI    =    lTData[i].length;    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
206	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]  *  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]  *  inverse);	  final    double[]    ltI    =    lTData[i].length;    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
207	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[]    ltI    =    lTData[i].length;    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
208	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    0;    --q)    {    for(int  q  =  order  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
209	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    0;    --q)    {    for(int  q  =  order  -  1;  q  >=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
210	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    0;    --q)    {    for(int  q  =  order  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
211	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  order  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    0;    --q)    {    for(int  q  =  order  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
212	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
213	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
214	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
215	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
216	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  [Delete]  0;  --q)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  [Delete]  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  [Delete]  0;  --q)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
217	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  int  q  =  0;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {  int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	115	None	replace
218	[BUG]  [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  int  q  =  0;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  >=  i;  --q)  {  int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	115	None	replace
219	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  int  q  =  i  -  1;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  i;  --q)  {  int  q  =  i  -  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	115	None	replace
220	[BUG]  [BUGGY]  int  q  =  order  -  1;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  int  q  =  order  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	int  q  =  order  -  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	115	None	replace
221	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
222	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[1]);	  final    double[]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
223	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[1];  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[1];  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[1];  ltI[i]  =  Math.sqrt(ltI[1]);	  final    double[]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
224	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    For(int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	108	None	replace
225	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  order;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    For(int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	108	None	replace
226	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  For(int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    For(int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	108	None	replace
227	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  2;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  2;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    0;    --q)    {    	compilable	  [FE]  AssertionError  	24	4	replace
228	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  2;  q  >=  0;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  2;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  2;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    0;    --q)    {    	compilable	  [FE]  AssertionError  	24	4	replace
229	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
230	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
231	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
232	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
233	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	130	None	replace
234	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	130	None	replace
235	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	130	None	replace
236	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	130	None	replace
237	[BUG]  [BUGGY]  inverse  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(ltI[i]);	  inverse    =    Math.sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
238	[BUG]  [BUGGY]  inverse  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(ltI[i],  inverse);	  inverse    =    Math.sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
239	[BUG]  [BUGGY]  inverse  =  Math.sqrt(ltI[j]);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.sqrt(ltI[j]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(ltI[j]);	  inverse    =    Math.sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
240	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);	  final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
241	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);	  final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
242	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  -  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  -  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  -  inverse);	  final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
243	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    0;    --q)    {    for(int  q  =  i  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
244	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    0;    --q)    {    for(int  q  =  i  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
245	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    0;    --q)    {    for(int  q  =  i  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	75	None	add
246	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  For(int  q  =  i  -  1;  q  ==  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  For(int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    0;    --q)    {    For(int  q  =  i  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	75	None	add
247	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
248	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
249	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];	  final    double[]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
250	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  relativeSymmetryThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  relativeSymmetryThreshold);	  inverse    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
251	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  0);	  inverse    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
252	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  1.0);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  1.0);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  1.0);	  inverse    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
253	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
254	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i]  *  inverse;	  final    double[][]    ltI    =    ltData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
255	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i]  +  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i]  +  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i]  +  inverse;	  final    double[][]    ltI    =    ltData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
256	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  (int  q  =  0;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  (int  q  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {  (int  q  =  0;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    (int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	137	None	replace
257	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  (int  q  =  order  -  1;  q  <  0;  --q)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  (int  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  <  0;  --q)  {  (int  q  =  order  -  1;  q  <  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    (int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	137	None	replace
258	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  (int  q  =  order  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    (int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	137	None	replace
259	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    i;    --q)    {    for(int  q  =  i  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
260	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    i;    --q)    {    for(int  q  =  i  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
261	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >>  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    i;    --q)    {    for(int  q  =  i  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
262	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    i;    --q)    {    for(int  q  =  i  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
263	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  i;  --q)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    i;    --q)    {    for(int  q  =  i  -  1;  q  [Delete]  i;  --q)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
264	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	39	None	replace
265	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	39	None	replace
266	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	39	None	replace
267	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    (int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  ')'  expected	117	None	replace
268	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    (int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  ')'  expected	117	None	replace
269	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse,  ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse,  ltI[i]);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
270	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i],  inverse);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
271	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  0;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    [Delete]    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	7	replace
272	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    [Delete]    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	7	replace
273	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  order  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    0;    --q)    {    for(int  q  =  order  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
274	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  int  q  =  order  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  int  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    0;    --q)    {    int  q  =  order  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
275	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  if(int  q  =  order  -  1;  q  <  0;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  if(int  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    0;    --q)    {    if(int  q  =  order  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	90	None	add
276	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  int  q  =  0;  q!=  i;  --q)  {  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  int  q  =  0;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {  int  q  =  0;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	131	None	replace
277	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	131	None	replace
278	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  int  q  =  i  -  1;  q!=  i;  --q)  {  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  int  q  =  i  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  i;  --q)  {  int  q  =  i  -  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	131	None	replace
279	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	131	None	replace
280	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].symbol(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].symbol(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].symbol(inverse);	  final    double[][]    ltData    =    lTData[i].symmetry(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
281	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].synthetic(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].synthetic(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].synthetic(inverse);	  final    double[][]    ltData    =    lTData[i].symmetry(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
282	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[maxDelta]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[maxDelta]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[maxDelta]);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
283	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltIJ);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltIJ);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltIJ);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
284	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);	  final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
285	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);	  final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
286	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  For(int  q  =  order  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  For(int  q  =  order  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  >=  0;  --q)  {  For(int  q  =  order  -  1;  q  >=  0;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    For(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	114	None	replace
287	[BUG]  [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  For(int  q  =  0;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q!=  i;  --q)  {  For(int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q!=  i;  --q)  {  For(int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    For(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	114	None	replace
288	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  For(int  q  =  i  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  For(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  i;  --q)  {  For(int  q  =  i  -  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    For(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	114	None	replace
289	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[0]);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
290	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i],  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i],  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i],  maxDelta);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
291	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[i],  lJI);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
292	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[0]);	  final    double[][]    ltData    =    ltData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
293	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  maxDelta);	  final    double[][]    ltData    =    ltData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
294	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  lJI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  lJI);	  final    double[][]    ltData    =    ltData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
295	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    0;    --q)    {    for(int  q  =  i  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
296	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    0;    --q)    {    for(int  q  =  i  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
297	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    0;    --q)    {    for(int  q  =  i  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
298	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  0;  --q)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    0;    --q)    {    for(int  q  =  i  -  1;  q  [Delete]  0;  --q)  {	  	non-compiled	[CE]  ';'  expected	46	None	add
299	[BUG]  [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  ltI[i],  lTData);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  ltI[i],  lTData);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lJI[i].sqrt(inverse,  ltI[i],  lTData);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i],    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
300	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI,  maxDelta);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i],    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
301	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0],  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0],  lJI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0],  lJI);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i],    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
302	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  (int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  (int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  (int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    (int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	136	None	replace
303	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  order;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    (int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	136	None	replace
304	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  i;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  i  =  0;  i  <  i;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  i  =  0;  i  <  i;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    (int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	136	None	replace
305	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  type  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
306	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  int  q  =  0;  q  <  i;  --q)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  int  q  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {  int  q  =  0;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	110	None	replace
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  i;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]                  ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  i  =  0;  i  <  i;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  i  =  0;  i  <  i;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	110	None	replace
308	[BUG]  [BUGGY]  for(int  i  =  i  -  1;  i  <  q;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]                    ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  i  =  i  -  1;  i  <  q;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  i  =  i  -  1;  i  <  q;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	110	None	replace
309	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	129	None	replace
310	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	129	None	replace
311	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	129	None	replace
312	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    if(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	140	None	replace
313	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    if(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	140	None	replace
314	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  if(int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    if(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	140	None	replace
315	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    order;    --q)    {    for(int  q  =  i  -  1;  q  >=  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
316	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q!=  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q!=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    order;    --q)    {    for(int  q  =  i  -  1;  q!=  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
317	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  >>  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  >>  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    order;    --q)    {    for(int  q  =  i  -  1;  q  >>  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
318	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  ==  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  ==  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    order;    --q)    {    for(int  q  =  i  -  1;  q  ==  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	83	None	add
319	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  order;  --q)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  for(int  q  =  i  -  1;  q  [Delete]  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    order;    --q)    {    for(int  q  =  i  -  1;  q  [Delete]  order;  --q)  {	  	non-compiled	[CE]  ';'  expected	83	None	add
320	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
321	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
322	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
323	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    For(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  '.class'  expected	85	None	add
324	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >>  i;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
325	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  relativeSymmetryThreshold);	  double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
326	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].symmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].symmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].symmetryThreshold(inverse);	  double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
327	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
328	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
329	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
330	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
331	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedL[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedL[i];	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
332	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedTData[i];	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
333	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[i]);	  ltI[j]    =    Math.sqrt(ltI[j]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
334	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]  *  inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j]  *  inverse);	  ltI[j]    =    Math.sqrt(ltI[j]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
335	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]  +  inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j]  +  inverse);	  ltI[j]    =    Math.sqrt(ltI[j]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
336	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  >=  order;  --q)  {	  for(int    q    =    i    -    1;    q    >=    order;    --q)    {    	compilable	  [FE]  AssertionError  	84	4	replace
337	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  order;  --q)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  order;  --q)  {	  for(int    q    =    i    -    1;    q    >=    order;    --q)    {    	compilable	  [FE]  AssertionError  	84	4	replace
338	[BUG]  [BUGGY]  for(int  q  =  inverse  -  1;  q  <  order;  --q)  {  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse  -  1;  q  <  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse  -  1;  q  <  order;  --q)  {	  for(int    q    =    inverse    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  possible  loss  of  precision	87	None	replace
339	[BUG]  [BUGGY]  for(int  q  =  inverse.length  -  1;  q  <  i;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse.length  -  1;  q  <  i;  --q)  {	  for(int    q    =    inverse    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	87	None	replace
340	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    For(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	37	None	replace
341	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  i;  --q)  {  For(int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    For(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	37	None	replace
342	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    For(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	37	None	replace
343	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[maxDelta);  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltI[maxDelta);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  ']'  expected	14	None	replace
344	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
345	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
346	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
347	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >>  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
348	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    For(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	27	None	add
349	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    0;    --q)    {    for(int  q  =  i  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
350	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  if(int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  if(int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    0;    --q)    {    if(int  q  =  i  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	40	None	add
351	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  /  inverse);	  final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
352	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  -  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  -  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i];  ltI[i]  =  Math.sqrt(ltI[i]  -  inverse);	  final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
353	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  order;  --q)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    order;    --q)    {    for(int  q  =  i  -  1;  q  <  order;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
354	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  For(int  q  =  i  -  1;  q  <  order;  --q)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  For(int  q  =  i  -  1;  q  <  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    order;    --q)    {    For(int  q  =  i  -  1;  q  <  order;  --q)  {	  	non-compiled	[CE]  '.class'  expected	88	None	add
355	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  order);  --q)  {  [CE]  ';'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  for(int  q  =  i  -  1;  q  <  order);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    order;    --q)    {    for(int  q  =  i  -  1;  q  <  order);  --q)  {	  	non-compiled	[CE]  ';'  expected	88	None	add
356	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  int  q  =  i  -  1;  q  <  order;  --q)  {  [CE]  >  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  int  q  =  i  -  1;  q  <  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    order;    --q)    {    int  q  =  i  -  1;  q  <  order;  --q)  {	  	non-compiled	[CE]  >  expected	88	None	add
357	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i]  *  inverse;	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
358	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[0];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[0];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[0];	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
359	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i]  +  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i]  +  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i]  +  inverse;	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
360	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse,  maxDelta);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i],  inverse,  maxDelta);	  final    double[][]    ltI    =    lTData[i],    inverse);    	non-compiled	[CE]  ';'  expected	126	None	replace
361	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse,  absoluteSymmetryThreshold);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse,  absoluteSymmetryThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i],  inverse,  absoluteSymmetryThreshold);	  final    double[][]    ltI    =    lTData[i],    inverse);    	non-compiled	[CE]  ';'  expected	126	None	replace
362	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
363	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    0;    --q)    {    For(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
364	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    0;    --q)    {    int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
365	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    ltI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
366	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  for(int  q  =  0;  q  <  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  for(int  q  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {  for(int  q  =  0;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
367	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[1]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[1]);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
368	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0],  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0],  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0],  maxDelta);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
369	[BUG]  [BUGGY]  int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	int  q  =  order  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	79	None	replace
370	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	79	None	replace
371	[BUG]  [BUGGY]  for(int  q  =  inverse.length  -  1;  q!=  i;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse.length  -  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse.length  -  1;  q!=  i;  --q)  {	  for(int    q    =    inverse    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	replace
372	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  0;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  0;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  0;  q  ==  0;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    ==    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
373	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  lJI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  lJI);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
374	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  maxDelta  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  maxDelta  +  1);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  maxDelta  +  1);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
375	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  For(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    For(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	37	None	replace
376	[BUG]  [BUGGY]  final  double  inverse  =  1.0  /  ltI[i].inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  inverse  =  1.0  /  ltI[i].inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  inverse  =  1.0  /  ltI[i].inverse;	  final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
377	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  int  q  =  i  -  1;  q!=  order;  --q)  {  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  order;  --q)  {  int  q  =  i  -  1;  q!=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    order;    --q)    {    int  q  =  i  -  1;  q!=  order;  --q)  {	  	non-compiled	[CE]  not  a  statement	21	None	add
378	[BUG]  [BUGGY]  for(int  q  =  inverse.length  -  1;  q  <  0;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse.length  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse.length  -  1;  q  <  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    0;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	91	None	replace
379	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[0]);  final  double  inverse  =  1.0  /  ltI[0];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[0]);  final  double  inverse  =  1.0  /  ltI[0];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[0]);  final  double  inverse  =  1.0  /  ltI[0];	  final    double    ltI    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
380	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI.doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI.doubleValue());  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI.doubleValue());	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
381	[BUG]  [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData[i]);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
382	[BUG]  [BUGGY]  double[][]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  cachedTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);	  double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
383	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  int  q  =  i  -  1;  q  ==  i;  --q)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    int  q  =  i  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  not  a  statement	100	None	add
384	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  (int  q  =  i  -  1;  q  ==  i;  --q)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  (int  q  =  i  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    (int  q  =  i  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  ')'  expected	100	None	add
385	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[0]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[0]);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
386	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  maxDelta);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i],  maxDelta);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
387	[BUG]  [BUGGY]  final  double[][]  ltI  =  inverse[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  inverse[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  inverse[i];	  final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	154	None	replace
388	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i);  --q)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  i;  --q)  {  for(int  q  =  i  -  1;  q  >=  i);  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  ';'  expected	38	None	replace
389	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  not  a  statement	38	None	replace
390	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i]);	  final    double[][]    ltI    =    ltI[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	2	None	replace
391	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [CE]  '.class'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    For(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	25	None	add
392	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  int  q  =  ltI.length  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    0;    --q)    {    int  q  =  ltI.length  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  not  a  statement	25	None	add
393	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  int  q  =  order  -  1;  q  >=  0;  --q)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  int  q  =  order  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    >=    0;    --q)    {    int  q  =  order  -  1;  q  >=  0;  --q)  {	  	non-compiled	[CE]  not  a  statement	81	None	add
394	[BUG]  [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  ltI[i],  lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  ltI[i],  lTData[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lJI[i].sqrt(inverse,  ltI[i],  lTData[i]);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i],    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
395	[BUG]  [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData[i],  lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData[i],  lTData[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lJI[i].sqrt(inverse,  lTData[i],  lTData[i]);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i],    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
396	[BUG]  [BUGGY]  inverse  =  Math.min(inverse,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.min(inverse,  relativeSymmetryThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.min(inverse,  relativeSymmetryThreshold);	  inverse    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
397	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(relativeSymmetryThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(relativeSymmetryThreshold);	  final    double[][]    ltData    =    ltData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
398	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].symmetry(inverse,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].symmetry(inverse,  ltI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].symmetry(inverse,  ltI);	  final    double[][]    ltData    =    lTData[i].symmetry(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
399	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  lTData[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  lTData[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  lTData[i]  *  inverse;	  final    double    ltI    =    1.0    /    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	151	None	replace
400	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    0;    --q)    {    int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  not  a  statement	27	None	add
401	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;	  double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
402	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i]  *  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD;	  double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
403	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  >=  i;  --q)  {  int  q  =  i  +  1;  q  >=  i;  --q)  {  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  >=  i;  --q)  {  int  q  =  i  +  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  >=  i;  --q)  {  int  q  =  i  +  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	115	None	replace
404	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    (int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	139	None	replace
405	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    (int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	139	None	replace
406	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[0].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[0].doubleValue());  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[0].doubleValue());	  inverse    =    Math.max(inverse,    ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
407	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i],  inverse);	  final    double    ltI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
408	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[i],  inverse);	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
409	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(lTData[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(lTData[i]);	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
410	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q  ==  0;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int    q    =    order    -    1;    q    ==    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
411	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0);  --q)  {  [CE]  ';'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  <  0);  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    for(int    q    =    i    -    1;    q    <    i);    --q)    {    	non-compiled	[CE]  ';'  expected	109	None	replace
412	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
413	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    ltI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
414	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    0;    --q)    {    (int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  ')'  expected	29	None	add
415	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  if(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  if(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    0;    --q)    {    if(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	29	None	add
416	[BUG]  [BUGGY]  final  double[][]  ltI  =  data[i].sqrt(relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  data[i].sqrt(relativeSymmetryThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  data[i].sqrt(relativeSymmetryThreshold);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
417	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].computeSymmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].computeSymmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].computeSymmetryThreshold(inverse);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
418	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta  +  1);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta  +  1);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
419	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta  +  1);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  maxDelta  +  1);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
420	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  For(int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    For(int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	108	None	replace
421	[BUG]  [BUGGY]  final  double  ltI  =  1.0  /  ltI[0];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  1.0  /  ltI[0];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  1.0  /  ltI[0];	  final    double    ltI    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	150	None	replace
422	[BUG]  [BUGGY]  for(int  q  =  i.length  -  1;  q  <  ltI.length;  --q)  {  [CE]  int  cannot  be  dereferenced  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i.length  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i.length  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	43	None	replace
423	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  for(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
424	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i],  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i],  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i],  inverse;	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
425	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i],  inverse);  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i],  inverse);	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  ';'  expected	163	None	replace
426	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltTData[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltTData[i];	  final    double[][]    ltI    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
427	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	110	None	replace
428	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  type  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
429	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    0;    --q)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
430	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  final  double  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  type  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  final  double  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    0;    --q)    {    final  double  q  =  i  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  type	40	None	add
431	[BUG]  [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q!=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    [Delete]    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
432	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  (int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    (int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	136	None	replace
433	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  (int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [CE]  ')'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  (int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  (int  q  =  i  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    (int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	136	None	replace
434	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
435	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
436	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedL[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);	  final    double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
437	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i);  --q)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i);  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    for(int    q    =    ltI.length    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  ';'  expected	94	None	replace
438	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i);  --q)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >=  i);  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    for(int    q    =    ltI.length    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  ';'  expected	94	None	replace
439	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q!=  0;  --q)  {  for(int  q  =  0;  q  >=  0;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
440	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q!=  i;  --q)  {  int  q  =  i  +  1;  q!=  i;  --q)  {  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q!=  i;  --q)  {  int  q  =  i  +  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q!=  i;  --q)  {  int  q  =  i  +  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	131	None	replace
441	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  int  q  =  i  -  1;  q  ==  0;  --q)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    0;    --q)    {    int  q  =  i  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  not  a  statement	75	None	add
442	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  ==  0;  --q)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    0;    --q)    {    (int  q  =  i  -  1;  q  ==  0;  --q)  {	  	non-compiled	[CE]  ')'  expected	75	None	add
443	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].symbol;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].symbol;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].symbol;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
444	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].value;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].value;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].value;	  final    double[][]    ltI    =    lTData[i].symmetry;    	non-compiled	[CE]  class,  interface,  or  enum  expected	156	None	replace
445	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  lTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  lTData[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  lTData[i];	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
446	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
447	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  For(int  q  =  i  -  1;  q  >=  order;  --q)  {  [CE]  '.class'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  For(int  q  =  i  -  1;  q  >=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    order;    --q)    {    For(int  q  =  i  -  1;  q  >=  order;  --q)  {	  	non-compiled	[CE]  '.class'  expected	83	None	add
448	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  int  q  =  i  -  1;  q  >=  order;  --q)  {  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  order;  --q)  {  int  q  =  i  -  1;  q  >=  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    >=    order;    --q)    {    int  q  =  i  -  1;  q  >=  order;  --q)  {	  	non-compiled	[CE]  not  a  statement	83	None	add
449	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
450	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  final  double  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  final  double  q  =  i  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    final  double  q  =  i  -  1;  q  <  ltI.length;  --q)  {	  	non-compiled	[CE]  >  expected	42	None	add
451	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i]  /  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i]  /  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i]  /  inverse;	  final    double[][]    ltI    =    lTData[i]    +    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
452	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i]  +  inverse.doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i]  +  inverse.doubleValue();  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i]  +  inverse.doubleValue();	  final    double[][]    ltI    =    lTData[i]    +    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
453	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  final  double[]  ltI  =  i  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  i;  --q)  {  final  double[]  ltI  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  i;  --q)  {  final  double[]  ltI  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    final    double[]    ltI    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	138	None	replace
454	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  for(int  q  =  i  +  1;  q  <  i);  --q)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  for(int  q  =  i  +  1;  q  <  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  <  i;  --q)  {  for(int  q  =  i  +  1;  q  <  i);  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i);    --q)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
455	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  0;  q  <  i);  --q)  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  0;  q  <  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  0;  q  <  i);  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i);    --q)    {    	non-compiled	[CE]  ';'  expected	80	None	replace
456	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    (int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  ')'  expected	117	None	replace
457	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    0;    --q)    {    (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  ')'  expected	71	None	add
458	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  if(ltI.length  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  if(ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    0;    --q)    {    if(ltI.length  -  1;  q  >  0;  --q)  {	  	non-compiled	[CE]  ')'  expected	71	None	add
459	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  int  q  =  i  -  1;  q  >  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	39	None	replace
460	[BUG]  [BUGGY]  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	For(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    For(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	66	None	replace
461	[BUG]  [BUGGY]  final  double[][]  ltI  =  data[i].sqrt(relativeSymmetryThreshold,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  data[i].sqrt(relativeSymmetryThreshold,  ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  data[i].sqrt(relativeSymmetryThreshold,  ltI[i]);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
462	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI[i]);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
463	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i],  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i],  absolutePositivityThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  ltI[i],  absolutePositivityThreshold);	  final    double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
464	[BUG]  [BUGGY]  inverse  =  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverseSymmetryThreshold,  absolutePositivityThreshold);	  inverse    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	159	None	replace
465	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[0].doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[0].doubleValue();  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[0].doubleValue();	  double    inverse    =    1.0    /    ltI[i].doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	144	None	replace
466	[BUG]  [BUGGY]  final  double[]  ltI  =  ltTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltTData[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltTData[i];	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
467	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
468	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
469	[BUG]  [BUGGY]  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
470	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI.doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI.doubleValue());  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI.doubleValue());	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
471	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  inverse;  --q)  {  if(int  q  =  i  -  1;  q  >  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    if(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	140	None	replace
472	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  final  double[]  ltI  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    0;    --q)    {    final  double[]  ltI  =  order  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
473	[BUG]  [BUGGY]  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);	  double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	70	None	replace
474	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(inverse);	  ltI[j]    =    Math.sqrt(ltI[j]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
475	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j].inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j].inverse);	  ltI[j]    =    Math.sqrt(ltI[j]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
476	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
477	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  0;  q  <  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  0;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  <  0;  --q)  {  for(int  q  =  0;  q  <  0;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
478	[BUG]  [BUGGY]  inverse  =  Math.sqrt(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.sqrt(inverse,  ltI[i]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(inverse,  ltI[i]);	  inverse    =    Math.sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
479	[BUG]  [BUGGY]  inverse  =  Math.sqrt(inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.sqrt(inverse,  maxDelta);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(inverse,  maxDelta);	  inverse    =    Math.sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
480	[BUG]  [BUGGY]  inverse  =  Math.sqrt(inverse,  1.0);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.sqrt(inverse,  1.0);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(inverse,  1.0);	  inverse    =    Math.sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
481	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
482	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  not  a  statement	68	None	replace
483	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].computeSymmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].computeSymmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].computeSymmetryThreshold(inverse);	  double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
484	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  (int  q  =  i  -  1;  q  <  order;  --q)  {  [CE]  ')'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  (int  q  =  i  -  1;  q  <  order;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    order;    --q)    {    (int  q  =  i  -  1;  q  <  order;  --q)  {	  	non-compiled	[CE]  ')'  expected	88	None	add
485	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]  +  1);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[0]  +  1);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
486	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {	  	non-compiled	[CE]  not  a  statement	85	None	add
487	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
488	[BUG]  [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q  >=  i;  --q)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  >=  i;  --q)  {  for(int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
489	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  0;  q  >=  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  0;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  order  -  1;  q  >=  0;  --q)  {  for(int  q  =  0;  q  >=  0;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
490	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].length;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i].length;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i].length;	  final    double[]    ltI    =    lTData[i].length;    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
491	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i].length;  ltI[i]  =  Math.sqrt(ltI[i]  +  inverse);	  final    double[]    ltI    =    lTData[i].length;    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
492	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[0].length;  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[0].length;  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[0].length;  ltI[i]  =  Math.sqrt(ltI[0]);	  final    double[]    ltI    =    lTData[i].length;    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
493	[BUG]  [BUGGY]  double[][]  inverse  =  lTData[i].computeSymmetryThreshold(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  inverse  =  lTData[i].computeSymmetryThreshold(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  inverse  =  lTData[i].computeSymmetryThreshold(inverse);	  double[][]    inverse    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
494	[BUG]  [BUGGY]  final  double[][]  ltData  =  data[i].sqrt(relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  data[i].sqrt(relativeSymmetryThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  data[i].sqrt(relativeSymmetryThreshold);	  final    double[][]    ltData    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	121	None	replace
495	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  >  expected	95	None	replace
496	[BUG]  [BUGGY]  double  inverse  =  1.0  /  lTData[i].doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  lTData[i].doubleValue();  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  lTData[i].doubleValue();	  double    inverse    =    1.0    /    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	145	None	replace
497	[BUG]  [BUGGY]  for(int  i  =  order  -  1;  i  <  q;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  i  =  order  -  1;  i  <  q;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  i  =  order  -  1;  i  <  q;  --q)  {  int  q  =  order  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	79	None	replace
498	[BUG]  [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  For(int  q  =  0;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  For(int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  >=  i;  --q)  {  For(int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    For(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	114	None	replace
499	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[0];  ltI[i]  =  Math.sqrt(ltI[0],  inverse);	  final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
500	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
501	[BUG]  [BUGGY]  final  double[]  ltI  =  inverse[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  inverse[i];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  inverse[i];	  final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
502	[BUG]  [BUGGY]  For(int  q  =  order  -  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  For(int  q  =  order  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	For(int  q  =  order  -  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    For(int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	78	None	replace
503	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int    q    =    i    -    1;    q    >    0);    --q)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
504	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int    q    =    i    -    1;    q    >    0);    --q)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
505	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  int  q  =  order  -  1;  q!=  0;  --q)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q!=  0;  --q)  {  int  q  =  order  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q!=    0;    --q)    {    int  q  =  order  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  not  a  statement	16	None	add
506	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  if(ltI.length  >  i)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  if(ltI.length  >  i)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  }  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    i;    --q)    {    if(ltI.length  >  i)  {  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
507	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  (int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    i;    --q)    {    (int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  	non-compiled	[CE]  ')'  expected	44	None	add
508	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  (int  q  =  i  +  1;  q  <  i;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  (int  q  =  i  +  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  <  i;  --q)  {  (int  q  =  i  +  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    (int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	137	None	replace
509	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  final  int  q  =  0;  q  <  i;  --q)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  final  int  q  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {  final  int  q  =  0;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    (int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	137	None	replace
510	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse,  absolutePositivityThreshold);  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i],  inverse,  absolutePositivityThreshold);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i],  inverse,  absolutePositivityThreshold);	  final    double[][]    ltI    =    lTData[i],    inverse);    	non-compiled	[CE]  ';'  expected	126	None	replace
511	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i]  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i]  +  1);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i]  +  1);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
512	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q!=  0;  --q)  {  [CE]  not  a  statement  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  int  q  =  i  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    0;    --q)    {    int  q  =  i  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  not  a  statement	73	None	add
513	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  For(int  q  =  i  -  1;  q!=  0;  --q)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  0;  --q)  {  For(int  q  =  i  -  1;  q!=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q!=    0;    --q)    {    For(int  q  =  i  -  1;  q!=  0;  --q)  {	  	non-compiled	[CE]  '.class'  expected	73	None	add
514	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q!=  i;  --q)  {  For(int  q  =  i  +  1;  q!=  i;  --q)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q!=  i;  --q)  {  For(int  q  =  i  +  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q!=  i;  --q)  {  For(int  q  =  i  +  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    For(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
515	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  For(int  q  =  i  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q!=  i;  --q)  {  For(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q!=  i;  --q)  {  For(int  q  =  i  -  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    For(int    q    =    order    -    1;    q!=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	35	None	replace
516	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].symbol(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].symbol(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].symbol(inverse);	  final    double[][]    ltData    =    lTData[i].symmetry(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
517	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].symmetry(inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].symmetry(inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].symmetry(inverse);	  final    double[][]    ltData    =    lTData[i].symmetry(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
518	[BUG]  [BUGGY]  int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	110	None	replace
519	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  order;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  order;  --q)  {  int  q  =  i  -  1;  q  <  i;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	110	None	replace
520	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i].inverse);	  final    double[][]    ltI    =    ltData[i];    ltI[i]    =    Math.sqrt(ltI[i].inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	155	None	replace
521	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  int  q  =  i  +  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  int  q  =  i  +  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  <  i;  --q)  {  int  q  =  i  +  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  >  expected	79	None	replace
522	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI  +  1);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  ltI[i],  lJI  +  1);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i],    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	135	None	replace
523	[BUG]  [BUGGY]  double  inverse  =  1.0  /  ltI[i].inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double  inverse  =  1.0  /  ltI[i].inverse;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double  inverse  =  1.0  /  ltI[i].inverse;	  double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	143	None	replace
524	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
525	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	93	None	replace
526	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  0);  --q)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  >  0);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    >    0;    --q)    {    for(int  q  =  ltI.length  -  1;  q  >  0);  --q)  {	  	non-compiled	[CE]  ';'  expected	71	None	add
527	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  ltI[i]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  ltI[i]);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
528	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  ltQ[i]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i],  ltQ[i]);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
529	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  ltI[i]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i],  ltI[i]);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
530	[BUG]  [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(inverse,  ltI[i],  lTData[i]);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(inverse,  ltI[i],  lTData[i]);	  inverse    =    Math.max(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
531	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i]  /  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i]  /  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i]  /  inverse;	  final    double[][]    ltI    =    lTData[i]    +    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
532	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i);  --q)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  i;  --q)  {  for(int  q  =  i  -  1;  q  ==  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    ==    i;    --q)    {    for(int  q  =  i  -  1;  q  ==  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	100	None	add
533	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  <  0;  --q)  {  [CE]  ')'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  <  0;  --q)  {	  for(int    q    =    i    -    1;    q    <    i;    --q)    {    (int    q    =    i    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  ')'  expected	136	None	replace
534	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  if(int  q  =  i  -  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  >=  i;  --q)  {  if(int  q  =  i  -  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  >=  i;  --q)  {  if(int  q  =  i  -  1;  q  >=  i;  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    if(int    q    =    i    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	140	None	replace
535	[BUG]  [BUGGY]  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	147	None	replace
536	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i].inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i].inverse);	  final    double    ltI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
537	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  >=  i;  --q)  {  For(int  q  =  i  +  1;  q  >=  i;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  >=  i;  --q)  {  For(int  q  =  i  +  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  >=  i;  --q)  {  For(int  q  =  i  +  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    For(int    q    =    order    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	114	None	replace
538	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].relativeSymmetryThreshold;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i].relativeSymmetryThreshold;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i].relativeSymmetryThreshold;	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
539	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].symbol();  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  lTData[i].symbol();  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  lTData[i].symbol();	  final    double[]    ltI    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
540	[BUG]  [BUGGY]  double[][]  inverse  =  lTData[i].sqrt(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  inverse  =  lTData[i].sqrt(inverse,  ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  inverse  =  lTData[i].sqrt(inverse,  ltI[i]);	  double[][]    inverse    =    lTData[i].sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
541	[BUG]  [BUGGY]  for(int  q  =  inverse.length  -  1;  q  ==  0;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse.length  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse.length  -  1;  q  ==  0;  --q)  {	  for(int    q    =    inverse    -    1;    q    ==    0;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	120	None	replace
542	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	7	replace
543	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  ltI.length;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  ltI.length;  --q)  {	  for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	43	7	replace
544	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltI[0];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltI[0];  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltI[0];	  final    double[][]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	141	None	replace
545	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i].sqrt(inverse,  ltI[0]);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
546	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  }  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  }  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  }	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  not  a  statement	130	None	replace
547	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  =  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  =  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  =  i;  --q)  {  for(int  q  =  i  -  1;  q  >  i);  --q)  {	  for(int    q    =    i    -    1;    q    >    i;    --q)    {    for(int    q    =    i    -    1;    q    >    i);    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
548	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  +  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i);    --q)    {    	compilable	  [FE]  AssertionError  	80	4	replace
549	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i);    --q)    {    	compilable	  [FE]  AssertionError  	80	4	replace
550	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltIJ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltIJ);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  ltIJ);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
551	[BUG]  [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  0,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  lTData[i].sqrt(inverse,  0,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  lTData[i].sqrt(inverse,  0,  maxDelta);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
552	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltData[i].relativeSymmetryThreshold;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltData[i].relativeSymmetryThreshold;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltData[i].relativeSymmetryThreshold;	  final    double[][]    ltI    =    ltData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
553	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  For(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    For(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	129	None	replace
554	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  0,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(inverse,  0,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(inverse,  0,  maxDelta);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
555	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  if(ltI.length  >  0)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  if(ltI.length  >  0)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  }  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    0;    --q)    {    if(ltI.length  >  0)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  }	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
556	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  if(ltI.length  >  0)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  if(ltI.length  >  0)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    <    0;    --q)    {    if(ltI.length  >  0)  {  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
557	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i);  --q)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  ==  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q  ==  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	85	None	add
558	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  (int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    (int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  ')'  expected	117	None	replace
559	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltI[i].doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltI[i].doubleValue();  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltI[i].doubleValue();	  final    double[][]    ltI    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	153	None	replace
560	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  inverse,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  inverse,  absolutePositivityThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  inverse,  absolutePositivityThreshold);	  inverse    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	157	None	replace
561	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
562	[BUG]  [BUGGY]  final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  ltTData[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[][]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	152	None	replace
563	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j],  inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j],  inverse);	  ltI[j]    =    Math.sqrt(ltI[j]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
564	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  inverse);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  ltI.length;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    ltI.length;    --q)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  inverse);	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
565	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    [Delete]    i;    --q)    {    	compilable	  [FE]  AssertionError  	60	4	replace
566	[BUG]  [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    [Delete]    i;    --q)    {    	compilable	  [FE]  AssertionError  	60	4	replace
567	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  +  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    [Delete]    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	7	replace
568	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  >=  i;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  >=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  >=  i;  --q)  {	  for(int    q    =    order    -    1;    q    >=    i;    --q)    {    for(int    q    =    order    -    1;    q    [Delete]    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	60	7	replace
569	[BUG]  [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  lTData[i].sqrt(relativeSymmetryThreshold,  inverse);	  double[][]    ltI    =    lTData[i].sqrt(relativeSymmetryThreshold);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
570	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  inverse);  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  inverse);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    i    -    1;    q    <    0;    --q)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  inverse);	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
571	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i].length;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltData[i].length;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[i].length;	  final    double[]    ltI    =    lTData[i].length;    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	149	None	replace
572	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  <  0;  --q)  {  for(int  q  =  ltI.length  -  1;  q  ==  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >=    i;    --q)    {    for(int    q    =    ltI.length    -    1;    q    ==    i;    --q)    {    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
573	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltI[0];  ltI[i]  =  Math.sqrt(ltI[0]);	  final    double[]    ltI    =    lTData[0];    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	5	None	replace
574	[BUG]  [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[j].inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[j].inverse;  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	ltI[j]  =  Math.sqrt(ltI[j]);  final  double  inverse  =  1.0  /  ltI[j].inverse;	  ltI[j]    =    Math.sqrt(ltI[j]);    final    double    inverse    =    1.0    /    ltI[j];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
575	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q  >=  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    ltI.length;    --q)    {    	compilable	  [FE]  AssertionError  	8	4	replace
576	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  ltI.length;  --q)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    ltI.length;    --q)    {    	compilable	  [FE]  AssertionError  	8	4	replace
577	[BUG]  [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  if((  q  =  order  -  1;  q  <  0;  --q)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  order  -  1;  q  <  0;  --q)  {  if((  q  =  order  -  1;  q  <  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    order    -    1;    q    <    0;    --q)    {    if((  q  =  order  -  1;  q  <  0;  --q)  {	  	non-compiled	[CE]  ')'  expected	90	None	add
578	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  i  +  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	7	replace
579	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q!=  i;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q!=  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q!=  i;  --q)  {	  for(int    q    =    order    -    1;    q!=    i;    --q)    {    for(int    q    =    order    -    1;    q!=    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	31	7	replace
580	[BUG]  [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  ltI[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.max(relativeSymmetryThreshold,  ltI[i].doubleValue());  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.max(relativeSymmetryThreshold,  ltI[i].doubleValue());	  inverse    =    Math.max(inverse,    ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
581	[BUG]  [BUGGY]  inverse  =  Math.min(inverse,  ltI[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.min(inverse,  ltI[i].doubleValue());  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.min(inverse,  ltI[i].doubleValue());	  inverse    =    Math.max(inverse,    ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	158	None	replace
582	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i].relativeSymmetryThreshold;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltI[i].relativeSymmetryThreshold;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltI[i].relativeSymmetryThreshold;	  final    double[]    ltI    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
583	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  0,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  0,  maxDelta);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  0,  maxDelta);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
584	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  ltI[i]);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
585	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  ltI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  ltI);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  lTData[i].sqrt(inverse,  lJI,  ltI);	  final    double[][]    ltI    =    lTData[i].sqrt(inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
586	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  if(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    if(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	67	None	replace
587	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  ==  0;  --q)  {  for(int  q  =  i  -  1;  q  >=  0);  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    for(int    q    =    i    -    1;    q    >    0);    --q)    {    	non-compiled	[CE]  ';'  expected	148	None	replace
588	[BUG]  [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i].inverse;	  final    double    ltI    =    Math.sqrt(ltI[i]);    final    double    inverse    =    1.0    /    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	48	None	replace
589	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  ltI.length  -  1;  q!=  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q!=    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	7	replace
590	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  ltI.length;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  ltI.length;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q!=  ltI.length;  --q)  {	  for(int    q    =    inverse    -    1;    q!=    ltI.length;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	9	7	replace
591	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltI[i].sqrt(inverse,  lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltI[i].sqrt(inverse,  lTData[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltI[i].sqrt(inverse,  lTData[i]);	  final    double[][]    ltData    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
592	[BUG]  [BUGGY]  inverse  =  Math.sqrt(relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  inverse  =  Math.sqrt(relativeSymmetryThreshold);  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	inverse  =  Math.sqrt(relativeSymmetryThreshold);	  inverse    =    Math.sqrt(inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	146	None	replace
593	[BUG]  [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  lTData[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltData  =  ltData[i].sqrt(inverse,  ltI[i],  lTData[i]);	  final    double[][]    ltData    =    ltData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
594	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedLT[i]  *  inverse;  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedLT[i]  *  inverse;	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
595	[BUG]  [BUGGY]  final  double[]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltI[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
596	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i].length;  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  ltData[i].length;  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  ltData[i].length;  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[]    ltI    =    lTData[i];    ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
597	[BUG]  [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double  ltI[]  =  Math.sqrt(ltI[i].inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double  ltI[]  =  Math.sqrt(ltI[i].inverse);	  final    double    ltI[]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
598	[BUG]  [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  -  1;  q  <  0;  --q)  {  For(int  q  =  i  -  1;  q  >=  0;  --q)  {	  for(int    q    =    i    -    1;    q    >    0;    --q)    {    For(int    q    =    i    -    1;    q    >    0;    --q)    {    	non-compiled	[CE]  '.class'  expected	66	None	replace
599	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i);  --q)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q!=  i;  --q)  {  for(int  q  =  ltI.length  -  1;  q!=  i);  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int    q    =    ltI.length    -    1;    q!=    i;    --q)    {    for(int  q  =  ltI.length  -  1;  q!=  i);  --q)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
600	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  (int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    (int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  ')'  expected	142	None	replace
601	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[][]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[][]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	1	None	replace
602	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  i;  --q)  {  int  q  =  ltI.length  -  1;  q  <  i;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  >  expected	95	None	replace
603	[BUG]  [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  ltI.length  -  1;  q  >=  0;  --q)  {  int  q  =  ltI.length  -  1;  q  >  0;  --q)  {	  for(int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    int    q    =    ltI.length    -    1;    q    >    i;    --q)    {    	non-compiled	[CE]  not  a  statement	95	None	replace
604	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	add	for(int  q  =  0;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	7	replace
605	[BUG]  [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  0;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  0;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    for(int    q    =    order    -    1;    q    <    i;    --q)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	77	7	replace
606	[BUG]  [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  For(int  q  =  i  +  1;  q  <  i;  --q)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  i  +  1;  q  <  i;  --q)  {  For(int  q  =  i  +  1;  q  <  i;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  i  +  1;  q  <  i;  --q)  {  For(int  q  =  i  +  1;  q  <  i;  --q)  {	  for(int    q    =    order    -    1;    q    <    i;    --q)    {    For(int    q    =    order    -    1;    q    <    i;    --q)    {    	non-compiled	[CE]  '.class'  expected	78	None	replace
607	[BUG]  [BUGGY]  for(int  q  =  inverse.length  -  1;  q  >=  0;  --q)  {  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  for(int  q  =  inverse.length  -  1;  q  >=  0;  --q)  {  [BUGGY]      ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	for(int  q  =  inverse.length  -  1;  q  >=  0;  --q)  {	  for(int    q    =    inverse    -    1;    q    >=    0;    --q)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	7	None	replace
608	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	final  double[]  ltI  =  cachedLT[i];  ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  final    double[]    ltI    =    cachedLT[i];    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	4	None	replace
609	[BUG]  [BUGGY]  double[][]  ltI  =  ltI[i].sqrt(inverse,  lTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  ltI[i].sqrt(inverse,  lTData[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  ltI[i].sqrt(inverse,  lTData[i]);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
610	[BUG]  [BUGGY]  double[][]  ltI  =  ltI[i].sqrt(inverse,  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]        for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];      [BUGGY]  double[][]  ltI  =  ltI[i].sqrt(inverse,  ltI[i]);  [BUGGY]      for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	141	141	2	replace	double[][]  ltI  =  ltI[i].sqrt(inverse,  ltI[i]);	  double[][]    ltI    =    lTData[i].sqrt(inverse,    ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
