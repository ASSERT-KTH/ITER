projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76}
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLtData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length][1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length][0];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length()];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLTData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length][LtData.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length][LtData.length];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length];System.arraycopy(matrix,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(matrix);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getLowerBound();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getDecompositionImpl();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.decompositionImpl;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length][2];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length+1][1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length+1][0];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[matrix.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Len];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length()+1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length()+2];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length()*2];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLTData(deFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLTData(),DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLTData(DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length][LtData.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[LtData.length][Matrix.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[LtData.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLtData(DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLtData(DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLtData(deFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length+1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length-1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length+2];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length+1];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[matrix.length];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length-1];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=Math.min(lTData.length,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=Math.min(lTData.length,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);lTData=Math.max(lTData.length,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=Math.min(lTData.length,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);lTData=Math.max(lTData.length,DEFAULT_RELATIVE_SYMMETRY_THRESH
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=Math.min(lTData.length,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);lTData=Math.max(lTData[0],DEFAULT_RELATIVE_SYMMETRY_THRESHOLD
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[matrix.length][LtData.length];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[LtData.length][Matrix.length];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length][LtData.length];System.arraycopy(lTData,0,matrix,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length+1];System.arraycopy(matrix,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[cachedLT.length];System.arraycopy(matrix,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(matrix,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(matrix,DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(cachedLT,matrix);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getUpperBound();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getLowerBound(),DEFAULT_RELATIVE_SYMMETRY_THRESHOLD;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getLowerBound(),DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length+1];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(matrix,DEFAULT_RESOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length*2];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length][LtData.length];System.arraycopy(matrix,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLtData(deFAULT_RELATIVE_SYMMETRY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[lTData.length][3];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(matrix,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD,DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(matrix,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);this.cachedLT=matrix;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.getLTData(),DEFAULT_RELATIVE_SYMMETRY_THRESHOLD;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.decomposition(this.cachedL,DEFAULT_RELATIVE_SYMMETRY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[matrix.length];System.arraycopy(matrix,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length];System.arraycopy(matrix,0,cachedLT,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[matrix.length][LtData.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length];System.arraycopy(lTData,0,matrix,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix,matrix.getLowerBound();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getDecompositionImpl(this.cachedL);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[LenientMatrix.length];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length][1];System.arraycopy(lTData,0,lTData,0,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length][1];System.arraycopy(lTData,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=newdouble[Matrix.length];System.arraycopy(cachedLT,0,lTData,0,matrix.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.decompositionImpl();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.compositionImpl();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.decomposition(this.cachedL,matrix.getLTData());
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.decomposition(cachedLT,matrix.getLTData());
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.lTData=matrix.decomposition(this.cachedLT,matrix.getLTData());
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getLowerBound()-DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76this.cachedLT=matrix.getLowerBound(),DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java76super(matrix,DEFAULT_POSITIVITY_THRESHOLD);
