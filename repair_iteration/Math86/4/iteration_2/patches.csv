bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  /  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[0]  /  1);	  ltI[i]    =    Math.sqrt(ltI[0]    -    1);    	compilable	  [FE]  AssertionError  	6	5	replace
2	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  /  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  /  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  /  1);	  ltI[i]    =    Math.sqrt(ltI[0]    -    1);    	compilable	  [FE]  AssertionError  	6	5	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[1]  -  1);	  ltI[i]    =    Math.sqrt(ltI[0]    -    1);    	compilable	  [FE]  AssertionError  	6	5	replace
4	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]  -  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[1]  -  1);	  ltI[i]    =    Math.sqrt(ltI[0]    -    1);    	compilable	  [FE]  AssertionError  	6	5	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[0]  *  1);	  ltI[i]    =    Math.sqrt(ltI[0]    -    1);    	compilable	  [FE]  AssertionError  	6	5	replace
6	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  *  1);	  ltI[i]    =    Math.sqrt(ltI[0]    -    1);    	compilable	  [FE]  AssertionError  	6	5	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.min(ltI[i],  ltI[i]  +  1);	  ltI[i]    =    Math.min(ltI[i],    ltI[i]);    	compilable	  [FE]  AssertionError  	24	4	replace
8	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  ltI[i]  +  1);	  ltI[i]    =    Math.min(ltI[i],    ltI[i]);    	compilable	  [FE]  AssertionError  	24	4	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    0);    ltI[i]  =  Math.max(ltI[i],  0);	  	compilable	  [FE]  AssertionError  	91	2	add
10	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    0);    ltI[i]  =  Math.max(ltI[i],  0);	  	compilable	  [FE]  AssertionError  	91	2	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0.0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    0);    ltI[i]  =  Math.max(ltI[i],  0.0);	  	compilable	  [FE]  AssertionError  	91	2	add
12	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0.0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0.0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    0);    ltI[i]  =  Math.max(ltI[i],  0.0);	  	compilable	  [FE]  AssertionError  	91	2	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  1.0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    0);    ltI[i]  =  Math.max(ltI[i],  1.0);	  	compilable	  [FE]  AssertionError  	91	2	add
14	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  1.0);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  1.0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    0);    ltI[i]  =  Math.max(ltI[i],  1.0);	  	compilable	  [FE]  AssertionError  	91	2	add
15	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  LtI[i]  =  Math.max(ltI[i],  0);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  LtI[i]  =  Math.max(ltI[i],  0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    0);    LtI[i]  =  Math.max(ltI[i],  0);	  	non-compiled	[CE]  cannot  find  symbol  LtI	91	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    ltI[i]  =  Math.min(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	23	2	add
17	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    ltI[i]  =  Math.min(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	23	2	add
18	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  LtI[i]  =  Math.min(ltI[i],  ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  LtI[i]  =  Math.min(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    LtI[i]  =  Math.min(ltI[i],  ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	23	None	add
19	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  final  double[]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  final  double[]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    final  double[]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);	  	non-compiled	[CE]  ']'  expected	23	None	add
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[0],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    ltI[i]  =  Math.min(ltI[0],  ltI[i]);	  	compilable	  [FE]  AssertionError  	23	5	add
21	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[0],  ltI[i]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[0],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    ltI[i]  =  Math.min(ltI[0],  ltI[i]);	  	compilable	  [FE]  AssertionError  	23	5	add
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	8	5	add
23	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	8	5	add
24	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[1]);    LtI[0]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	8	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	8	5	add
26	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	8	5	add
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	8	6	add
28	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	8	6	add
29	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltJ);  [CE]  cannot  find  symbol  ltJ  [FE]                        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltJ);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ltJ);	  ltI[i]    =    Math.max(ltI[i],    ltQ);    	non-compiled	[CE]  cannot  find  symbol  ltJ	71	None	replace
30	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltJI);  [CE]  cannot  find  symbol  ltJI  [FE]                          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltJI);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ltJI);	  ltI[i]    =    Math.max(ltI[i],    ltQ);    	non-compiled	[CE]  cannot  find  symbol  ltJI	71	None	replace
31	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.ceil(ltI[i].doubleValue());	  ltI[i]    =    Math.ceil(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	21	None	replace
32	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i],  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i],  maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.ceil(ltI[i],  maxDelta);	  ltI[i]    =    Math.ceil(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	21	None	replace
33	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.ceil(ltI[i]  +  1);	  ltI[i]    =    Math.ceil(ltI[i]);    	compilable	  [FE]  AssertionError  	21	4	replace
34	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.ceil(ltI[i]  +  1);	  ltI[i]    =    Math.ceil(ltI[i]);    	compilable	  [FE]  AssertionError  	21	4	replace
35	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	49	6	replace
36	[BUG]  [BUGGY]  ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	49	6	replace
37	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	49	5	replace
38	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	49	5	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[1]  +  1);	  ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	2	4	replace
40	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[1]  +  1);	  ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	2	4	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[2]);	  ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	2	5	replace
42	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[2]);	  ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	2	5	replace
43	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  relativeSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  relativeSymmetryThreshold);	  ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	99	4	replace
44	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  relativeSymmetryThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  relativeSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  relativeSymmetryThreshold);	  ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	99	4	replace
45	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  absoluteSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  absoluteSymmetryThreshold);	  ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	99	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	5	add
47	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	5	add
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[2]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[2]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	5	add
49	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[2]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[2]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[2]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	5	add
50	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	10	5	add
51	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	10	5	add
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[3]  =  Math.sqrt(ltI[3]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[3]  =  Math.sqrt(ltI[3]);	  	compilable	  [FE]  AssertionError  	10	5	add
53	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[3]  =  Math.sqrt(ltI[3]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[3]  =  Math.sqrt(ltI[3]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[3]  =  Math.sqrt(ltI[3]);	  	compilable	  [FE]  AssertionError  	10	5	add
54	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i].cloneTree();  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  cachedLT[i].cloneTree();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  cachedLT[i].cloneTree();	  final    double[]    ltI    =    cachedLT[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	43	None	replace
55	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedTData[i];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedTData[i];	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	74	None	replace
56	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  maxDelta);	  ltI[i]    =    Math.min(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	89	None	replace
57	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  lJ);  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  lJ);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  lJ);	  ltI[i]    =    Math.min(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  lJ	89	None	replace
58	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[i]);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	101	None	replace
59	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[0]);  [CE]  double  cannot  be  dereferenced  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[0]);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
60	[BUG]  [BUGGY]  final  double[][]  ltI  =  Math.sqrt(ltI[i]  +  1);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  Math.sqrt(ltI[i]  +  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[][]    ltI    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	94	None	replace
61	[BUG]  [BUGGY]  final  double[][]  ltI  =  Math.sqrt(ltI[i]);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  Math.sqrt(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  Math.sqrt(ltI[i]);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[][]    ltI    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	94	None	replace
62	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  maxDelta);  [CE]  cannot  find  symbol  LtI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  maxDelta);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  maxDelta);	  LtI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol  LtI	85	None	replace
63	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold()  +  1);  [CE]  cannot  find  symbol  LtI  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold()  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold()  +  1);	  LtI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol  LtI	85	None	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[0]    +    1);    ltI[i]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	3	4	add
65	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    +    1);    ltI[i]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	3	4	add
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[0]    +    1);    ltI[i]  =  Math.sqrt(ltI[1]  +  1);	  	compilable	  [FE]  AssertionError  	3	4	add
67	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    +    1);    ltI[i]  =  Math.sqrt(ltI[1]  +  1);	  	compilable	  [FE]  AssertionError  	3	4	add
68	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  LtI[i]  =  Math.sqrt(ltI[0]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  LtI[i]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    +    1);    LtI[i]  =  Math.sqrt(ltI[0]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	3	None	add
69	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    +    1);    final  double[]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);	  	non-compiled	[CE]  ']'  expected	3	None	add
70	[BUG]  [BUGGY]  LtI  =  Math.sqrt(ltI[i]  -  1);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI  =  Math.sqrt(ltI[i]  -  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI  =  Math.sqrt(ltI[i]  -  1);	  LtI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	42	None	replace
71	[BUG]  [BUGGY]  LtI  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI  =  Math.sqrt(ltI[0]);	  LtI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	42	None	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	33	5	add
73	[BUG]  [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	33	5	add
74	[BUG]  [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  LtI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  LtI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    LtI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	33	None	add
75	[BUG]  [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  final  double[]  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  final  double[]  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    final  double[]  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	non-compiled	[CE]  ']'  expected	33	None	add
76	[BUG]  [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i];  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i];  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i];	  	non-compiled	[CE]  ')'  expected	33	None	add
77	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	46	2	add
78	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	46	2	add
79	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	46	None	add
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	46	5	add
81	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	46	5	add
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	46	5	add
83	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	46	5	add
84	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	27	None	replace
85	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  cachedLT);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  cachedLT);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  cachedLT);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	27	None	replace
86	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  computeSymmetryThreshold(i));  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  computeSymmetryThreshold(i));  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  computeSymmetryThreshold(i));	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
87	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  cachedL);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  cachedL);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  cachedL);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	27	None	replace
88	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[i]  *  2);	  ltI[i]    =    Math.sqrt(ltI[i]    *    1);    	compilable	  [FE]  AssertionError  	63	4	replace
89	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  *  2);	  ltI[i]    =    Math.sqrt(ltI[i]    *    1);    	compilable	  [FE]  AssertionError  	63	4	replace
90	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  4);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[i]  *  4);	  ltI[i]    =    Math.sqrt(ltI[i]    *    1);    	compilable	  [FE]  AssertionError  	63	4	replace
91	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  4);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  4);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  *  4);	  ltI[i]    =    Math.sqrt(ltI[i]    *    1);    	compilable	  [FE]  AssertionError  	63	4	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  order);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  order);	  ltI[i]    =    Math.max(ltI[i],    maxDelta);    	compilable	  [FE]  AssertionError  	22	4	replace
93	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  order);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  order);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  order);	  ltI[i]    =    Math.max(ltI[i],    maxDelta);    	compilable	  [FE]  AssertionError  	22	4	replace
94	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    LtI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	55	None	replace
95	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  +  1);  [CE]  cannot  find  symbol  LtI  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  +  1);	  LtI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	41	None	replace
96	[BUG]  [BUGGY]  LtI[]  =  Math.sqrt(ltI[i].doubleValue());  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[]  =  Math.sqrt(ltI[i].doubleValue());  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[]  =  Math.sqrt(ltI[i].doubleValue());	  LtI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  not  a  statement	41	None	replace
97	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    ltI[i]  =  Math.sqrt(ltI[0]  -  1);	  	compilable	  [FE]  AssertionError  	5	5	add
98	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    ltI[i]  =  Math.sqrt(ltI[0]  -  1);	  	compilable	  [FE]  AssertionError  	5	5	add
99	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  LtI[i]  =  Math.sqrt(ltI[0]  -  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  LtI[i]  =  Math.sqrt(ltI[0]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    LtI[i]  =  Math.sqrt(ltI[0]  -  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	5	None	add
100	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    final  double[]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);	  	non-compiled	[CE]  ']'  expected	5	None	add
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[1]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    ltI[i]  =  Math.sqrt(ltI[1]  -  1);	  	compilable	  [FE]  AssertionError  	5	5	add
102	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[1]  -  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[1]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    ltI[i]  =  Math.sqrt(ltI[1]  -  1);	  	compilable	  [FE]  AssertionError  	5	5	add
103	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue()  /  1);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue()  /  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue()  /  1);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue()    +    1);    	non-compiled	[CE]  double  cannot  be  dereferenced	83	None	replace
104	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix.relativeSymmetryThreshold,  absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    matrix.relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	111	None	replace
105	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.inverseSymmetryThreshold);  [CE]  cannot  find  symbol  inverseSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.inverseSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix.inverseSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    matrix.relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  inverseSymmetryThreshold	111	None	replace
106	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix.maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    matrix.relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	111	None	replace
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	48	5	add
108	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	48	5	add
109	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	48	None	add
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	48	5	add
111	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	48	5	add
112	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	48	5	add
113	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	48	5	add
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	15	5	add
115	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	15	5	add
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	15	5	add
117	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	15	5	add
118	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	15	None	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	15	5	add
120	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	15	5	add
121	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absoluteSymmetryThreshold);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absoluteSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absoluteSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    absolutePositivityThreshold);    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
122	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositivityThreshold,  maxDelta);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositivityThreshold,  maxDelta);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositivityThreshold,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    absolutePositivityThreshold);    	non-compiled	[CE]  double  cannot  be  dereferenced	84	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  ltI[i]  -  1);	  ltI[i]    =    Math.max(ltI[i]    -    1);    	compilable	  [FE]  AssertionError  	25	4	replace
124	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]  -  1);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ltI[i]  -  1);	  ltI[i]    =    Math.max(ltI[i]    -    1);    	compilable	  [FE]  AssertionError  	25	4	replace
125	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  maxDelta  -  1);  [CE]  cannot  find  symbol  maxDelta  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  maxDelta  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  maxDelta  -  1);	  ltI[i]    =    Math.max(ltI[i]    -    1);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	25	None	replace
126	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  maxDelta,  ltI[i]  -  1);  [CE]  cannot  find  symbol  maxDelta  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  maxDelta,  ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  maxDelta,  ltI[i]  -  1);	  ltI[i]    =    Math.max(ltI[i]    -    1);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	25	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	16	4	replace
128	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]  +  1);	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	16	4	replace
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	53	5	add
130	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	53	5	add
131	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	53	None	add
132	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i];  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i];	  	non-compiled	[CE]  ')'  expected	53	None	add
133	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(LtI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(LtI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(LtI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	53	None	add
134	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.sqrt(ltI[0]);	  ltI[i]    =    Math.sqrt(ltI[0]);    final    double[]    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  ']'  expected	17	None	replace
135	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i]  +  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    LtI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  LtI	31	None	replace
136	[BUG]  [BUGGY]  final  double[]  ltI  =  Math.sqrt(ltI[i]  +  1);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  Math.sqrt(ltI[i]  +  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[]    ltI    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	97	None	replace
137	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	118	5	add
138	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	118	5	add
139	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	118	None	add
140	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	118	5	add
141	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	118	5	add
142	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1];  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1];	  	non-compiled	[CE]  ')'  expected	118	None	add
143	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i],  lTData[i].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i],  lTData[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i],  lTData[i].doubleValue());	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	102	None	replace
144	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(lTData[i],  ltI[i].doubleValue());	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	102	None	replace
145	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL.length[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedL.length[i];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedL.length[i];	  final    double[][]    ltI    =    cachedL[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
146	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i].cloneTree();  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedL[i].cloneTree();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedL[i].cloneTree();	  final    double[][]    ltI    =    cachedL[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
147	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  *  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  *  1);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	114	None	replace
148	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  2);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  2);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	114	None	replace
149	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  3);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  3);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  3);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]    +    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	114	None	replace
150	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  1,  ltI[j]);  [CE]  cannot  find  symbol  j  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  1,  ltI[j]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  +  1,  ltI[j]);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  j	114	None	replace
151	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.abs(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.abs(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	compilable	  [FE]  AssertionError  	54	4	replace
152	[BUG]  [BUGGY]  ltI[i]  =  Math.abs(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.abs(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.abs(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	compilable	  [FE]  AssertionError  	54	4	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[i]    *    1);    ltI[i]  =  Math.sqrt(ltI[i]  *  1);	  	compilable	  [FE]  AssertionError  	62	5	add
154	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    *    1);    ltI[i]  =  Math.sqrt(ltI[i]  *  1);	  	compilable	  [FE]  AssertionError  	62	5	add
155	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  LtI[i]  =  Math.sqrt(ltI[i]  *  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  LtI[i]  =  Math.sqrt(ltI[i]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    *    1);    LtI[i]  =  Math.sqrt(ltI[i]  *  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	62	None	add
156	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    *    1);    final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);	  	non-compiled	[CE]  ']'  expected	62	None	add
157	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  computeSymmetryThreshold);  [CE]  cannot  find  symbol  computeSymmetryThreshold  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  computeSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  computeSymmetryThreshold);	  ltI[i]    =    Math.max(ltI[i],    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  computeSymmetryThreshold	90	None	replace
158	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJ[i]);  [CE]  cannot  find  symbol  ltJ  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJ[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltJ[i]);	  ltI[i]    =    Math.sqrt(ltI[i],    lJI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltJ	59	None	replace
159	[BUG]  [BUGGY]  LtI[]  =  Math.sqrt(ltI[i]).doubleValue();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[]  =  Math.sqrt(ltI[i]).doubleValue();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[]  =  Math.sqrt(ltI[i]).doubleValue();	  LtI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  not  a  statement	77	None	replace
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[i]  /  2);	  ltI[i]    =    Math.sqrt(ltI[i]    /    1);    	compilable	  [FE]  AssertionError  	65	4	replace
161	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  /  2);	  ltI[i]    =    Math.sqrt(ltI[i]    /    1);    	compilable	  [FE]  AssertionError  	65	4	replace
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  2.0);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[i]  /  2.0);	  ltI[i]    =    Math.sqrt(ltI[i]    /    1);    	compilable	  [FE]  AssertionError  	65	4	replace
163	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  2.0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  2.0);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  /  2.0);	  ltI[i]    =    Math.sqrt(ltI[i]    /    1);    	compilable	  [FE]  AssertionError  	65	4	replace
164	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.floor(ltI[i].doubleValue());	  ltI[i]    =    Math.floor(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	87	None	replace
165	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.floor(ltI[i]  +  1);	  ltI[i]    =    Math.floor(ltI[i]);    	compilable	  [FE]  AssertionError  	87	4	replace
166	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i]  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.floor(ltI[i]  +  1);	  ltI[i]    =    Math.floor(ltI[i]);    	compilable	  [FE]  AssertionError  	87	4	replace
167	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[0]);	  ltI[i]    =    Math.sqrt(ltI[0]);    LtI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  LtI	14	None	replace
168	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[1]);	  ltI[i]    =    Math.sqrt(ltI[0]);    LtI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  LtI	14	None	replace
169	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	98	2	add
170	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	98	2	add
171	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  LtI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  LtI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    LtI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);	  	non-compiled	[CE]  cannot  find  symbol  LtI	98	None	add
172	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	98	4	add
173	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	98	4	add
174	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.max(ltI[i],  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  ltI[i]  =  Math.max(ltI[i],  absoluteSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    ltI[i]  =  Math.max(ltI[i],  absoluteSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	98	None	add
175	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  relativeSymmetryThreshold,  maxDelta);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  relativeSymmetryThreshold,  maxDelta);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  relativeSymmetryThreshold,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    relativeSymmetryThreshold);    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
176	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  maxDelta,  relativeSymmetryThreshold);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  maxDelta,  relativeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
177	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  inverse);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  inverse);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  inverse);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
178	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[i]    -    1);    ltI[i]  =  Math.sqrt(ltI[i]  -  1);	  	compilable	  [FE]  AssertionError  	66	5	add
179	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    -    1);    ltI[i]  =  Math.sqrt(ltI[i]  -  1);	  	compilable	  [FE]  AssertionError  	66	5	add
180	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  LtI[i]  =  Math.sqrt(ltI[i]  -  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  LtI[i]  =  Math.sqrt(ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    -    1);    LtI[i]  =  Math.sqrt(ltI[i]  -  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	66	None	add
181	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    -    1);    final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);	  	non-compiled	[CE]  ']'  expected	66	None	add
182	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  ltI[i]  =  Math.sqrt(ltI[i]  -  1).sqrt(ltI[i]  -  1);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  ltI[i]  =  Math.sqrt(ltI[i]  -  1).sqrt(ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    -    1);    ltI[i]  =  Math.sqrt(ltI[i]  -  1).sqrt(ltI[i]  -  1);	  	non-compiled	[CE]  double  cannot  be  dereferenced	66	None	add
183	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].getValue();  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  lTData[i].getValue();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  lTData[i].getValue();	  final    double[][]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
184	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedLT[i].value;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedLT[i].value;	  final    double[][]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
185	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedL[i].value;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedL[i].value;	  final    double[][]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
186	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    ltI[0]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	80	5	add
187	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    ltI[0]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	80	5	add
188	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  LtI[0]  =  Math.sqrt(ltI[0]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  LtI[0]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    LtI[0]  =  Math.sqrt(ltI[0]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	80	None	add
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[1]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    ltI[1]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	80	6	add
190	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[1]  =  Math.sqrt(ltI[0]  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[1]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    ltI[1]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	80	6	add
191	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[0]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    ltI[0]  =  Math.sqrt(ltI[1]  +  1);	  	compilable	  [FE]  AssertionError  	80	5	add
192	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[0]  =  Math.sqrt(ltI[1]  +  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[0]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    ltI[0]  =  Math.sqrt(ltI[1]  +  1);	  	compilable	  [FE]  AssertionError  	80	5	add
193	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  *  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]  =  Math.sqrt(ltI[0]  *  1);	  ltI[0]    =    Math.sqrt(ltI[0]    +    1);    	compilable	  [FE]  AssertionError  	81	4	replace
194	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  *  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  *  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.sqrt(ltI[0]  *  1);	  ltI[0]    =    Math.sqrt(ltI[0]    +    1);    	compilable	  [FE]  AssertionError  	81	4	replace
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]  =  Math.sqrt(ltI[1]  +  1);	  ltI[0]    =    Math.sqrt(ltI[0]    +    1);    	compilable	  [FE]  AssertionError  	81	5	replace
196	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.sqrt(ltI[1]  +  1);	  ltI[0]    =    Math.sqrt(ltI[0]    +    1);    	compilable	  [FE]  AssertionError  	81	5	replace
197	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltData[i]);  [CE]  cannot  find  symbol  ltData  [FE]                      AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltData[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltData[i]);	  ltI[i]    =    Math.sqrt(lTData[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltData	61	None	replace
198	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltTData[i]);  [CE]  cannot  find  symbol  ltTData  [FE]                        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltTData[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltTData[i]);	  ltI[i]    =    Math.sqrt(lTData[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltTData	61	None	replace
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    ltI[i]  =  Math.max(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	68	2	add
200	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    ltI[i]  =  Math.max(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	68	2	add
201	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  LtI[i]  =  Math.max(ltI[i],  ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  LtI[i]  =  Math.max(ltI[i],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    LtI[i]  =  Math.max(ltI[i],  ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	68	None	add
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[0],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    ltI[i]  =  Math.max(ltI[0],  ltI[i]);	  	compilable	  [FE]  AssertionError  	68	2	add
203	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[0],  ltI[i]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[0],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    ltI[i]  =  Math.max(ltI[0],  ltI[i]);	  	compilable	  [FE]  AssertionError  	68	2	add
204	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    ltI[i]  =  Math.min(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	68	2	add
205	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    ltI[i]  =  Math.min(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	68	2	add
206	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]).sqrt(ltI[i]);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]).sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]).sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).sqrt(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	108	None	replace
207	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]).sqrt(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]).sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i]).sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).sqrt(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	108	None	replace
208	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	40	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	1	5	add
210	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	1	5	add
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	1	5	add
212	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	1	5	add
213	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  LtI[i]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  LtI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[1]);    LtI[i]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	1	None	add
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	1	5	add
215	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	1	5	add
216	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].getValue();  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  lTData[i].getValue();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  lTData[i].getValue();	  final    double[]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
217	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  cachedLT[i].value;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  cachedLT[i].value;	  final    double[]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
218	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].symmetry;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  lTData[i].symmetry;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  lTData[i].symmetry;	  final    double[]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
219	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  ltI[i]  =  Math.ceil(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.ceil(ltI[i]);    ltI[i]  =  Math.ceil(ltI[i]);	  	compilable	  [FE]  AssertionError  	20	2	add
220	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  ltI[i]  =  Math.ceil(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  ltI[i]  =  Math.ceil(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.ceil(ltI[i]);    ltI[i]  =  Math.ceil(ltI[i]);	  	compilable	  [FE]  AssertionError  	20	2	add
221	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  LtI[i]  =  Math.ceil(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  LtI[i]  =  Math.ceil(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.ceil(ltI[i]);    LtI[i]  =  Math.ceil(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	20	None	add
222	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  final  double[]  ltI[i]  =  Math.ceil(ltI[i]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  final  double[]  ltI[i]  =  Math.ceil(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.ceil(ltI[i]);    final  double[]  ltI[i]  =  Math.ceil(ltI[i]);	  	non-compiled	[CE]  ']'  expected	20	None	add
223	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  ltI[i]  =  Math.ceil(ltI[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  ltI[i]  =  Math.ceil(ltI[i]).doubleValue();  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.ceil(ltI[i]);    ltI[i]  =  Math.ceil(ltI[i]).doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	add
224	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  relativeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    relativeSymmetryThreshold);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
225	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  maxDelta,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  maxDelta  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  maxDelta,  relativeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	72	None	replace
226	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix,  relativeSymmetryThreshold);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix,  relativeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix,  relativeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    relativeSymmetryThreshold);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
227	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  computeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  computeSymmetryThreshold  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  computeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  computeSymmetryThreshold,  relativeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  computeSymmetryThreshold	72	None	replace
228	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	79	None	replace
229	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	79	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.pow(10,  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.pow(10,  ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    ltI[i]    =    Math.log(ltI[i]);    	compilable	  [FE]  AssertionError  	34	5	replace
231	[BUG]  [BUGGY]  ltI[i]  =  Math.pow(10,  ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.pow(10,  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.pow(10,  ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    ltI[i]    =    Math.log(ltI[i]);    	compilable	  [FE]  AssertionError  	34	5	replace
232	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i]).log(ltI[i]);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i]).log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i]).log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    ltI[i]    =    Math.log(ltI[i]).log(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	35	None	replace
233	[BUG]  [BUGGY]  LtI[i]  =  Math.log(ltI[i]).log(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.log(ltI[i]).log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.log(ltI[i]).log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    ltI[i]    =    Math.log(ltI[i]).log(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	35	None	replace
234	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltI[i]).log(ltI[i]);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltI[i]).log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  ltI[i]).log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    ltI[i]    =    Math.log(ltI[i]).log(ltI[i]);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	35	None	replace
235	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    final    double[]    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  ']'  expected	56	None	replace
236	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  maxDelta);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	88	None	replace
237	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltI[i]);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  ltI[i]);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	88	None	replace
238	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  cachedLT);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  cachedLT);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  cachedLT);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	88	None	replace
239	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltJ);  [CE]  cannot  find  symbol  ltJ  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltJ);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  ltJ);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  ltJ	88	None	replace
240	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedL.length[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  cachedL.length[i];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  cachedL.length[i];	  final    double[]    ltI    =    cachedL[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	44	None	replace
241	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedL[i].cloneTree();  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  cachedL[i].cloneTree();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  cachedL[i].cloneTree();	  final    double[]    ltI    =    cachedL[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	44	None	replace
242	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  relativeSymmetryThreshold);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  relativeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  relativeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    absoluteSymmetryThreshold);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	93	None	replace
243	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  maxDelta);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	93	None	replace
244	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  computeSymmetryThreshold);  [CE]  cannot  find  symbol  computeSymmetryThreshold  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  computeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  computeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  computeSymmetryThreshold	93	None	replace
245	[BUG]  [BUGGY]  LtI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[0]  =  Math.sqrt(ltI[0]);	          ltI[0]    =    Math.sqrt(ltI[0]);    LtI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  LtI	50	None	replace
246	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    LtI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  LtI	50	None	replace
247	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  lTData);  [CE]  cannot  find  symbol  lJI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  lTData);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI,  lTData);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData);    	non-compiled	[CE]  cannot  find  symbol  lJI	78	None	replace
248	[BUG]  [BUGGY]  sqrtI  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  sqrtI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  sqrtI  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	sqrtI  =  Math.sqrt(ltI[0]);	  ltI    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  cannot  find  symbol  sqrtI	96	None	replace
249	[BUG]  [BUGGY]  LtI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    LtI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	37	None	replace
250	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  ltI[i]  +  1);	  ltI[i]    =    Math.max(ltI[i],    ltI[i]);    	compilable	  [FE]  AssertionError  	69	4	replace
251	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ltI[i]  +  1);	  ltI[i]    =    Math.max(ltI[i],    ltI[i]);    	compilable	  [FE]  AssertionError  	69	4	replace
252	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  cachedL[i],  ltI);  [CE]  array  required,  but  RealMatrix  found  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  cachedL[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  cachedL[i],  ltI);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    cachedLT);    	non-compiled	[CE]  array  required,  but  RealMatrix  found	60	None	replace
253	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  cachedL[i],  lTData);  [CE]  array  required,  but  RealMatrix  found  [FE]                      AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  cachedL[i],  lTData);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  cachedL[i],  lTData);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    cachedLT);    	non-compiled	[CE]  array  required,  but  RealMatrix  found	60	None	replace
254	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  cachedL,  ltI);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  cachedL,  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  cachedL,  ltI);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    cachedLT);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	60	None	replace
255	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedLT[i].length;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  cachedLT[i].length;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  cachedLT[i].length;	  final    double[]    ltI    =    lTData[i].length;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
256	[BUG]  [BUGGY]  final  double[]  ltI  =  data[i].length;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  data[i].length;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  data[i].length;	  final    double[]    ltI    =    lTData[i].length;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
257	[BUG]  [BUGGY]  LtI[i]  =  Math.min(ltI[i],  ltI[i].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.min(ltI[i],  ltI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.min(ltI[i],  ltI[i].doubleValue());	  ltI[i]    =    Math.min(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	104	None	replace
258	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i].doubleValue()  +  1);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i].doubleValue()  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  ltI[i].doubleValue()  +  1);	  ltI[i]    =    Math.min(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	104	None	replace
259	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.log(ltI[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    final    double[]    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  ']'  expected	36	None	replace
260	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.floor(ltI[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.floor(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.floor(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    final    double[]    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  ']'  expected	36	None	replace
261	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	29	5	add
262	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	29	5	add
263	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  LtI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  LtI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    LtI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	29	None	add
264	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  ']'  expected	29	None	add
265	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[i]    /    1);    ltI[i]  =  Math.sqrt(ltI[i]  /  1);	  	compilable	  [FE]  AssertionError  	64	5	add
266	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    /    1);    ltI[i]  =  Math.sqrt(ltI[i]  /  1);	  	compilable	  [FE]  AssertionError  	64	5	add
267	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  LtI[i]  =  Math.sqrt(ltI[i]  /  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  LtI[i]  =  Math.sqrt(ltI[i]  /  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    /    1);    LtI[i]  =  Math.sqrt(ltI[i]  /  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	64	None	add
268	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    /    1);    final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);	  	non-compiled	[CE]  ']'  expected	64	None	add
269	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  ltI[i]  =  Math.sqrt(ltI[i]  /  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[i]    /    1);    ltI[i]  =  Math.sqrt(ltI[i]  /  2);	  	compilable	  [FE]  AssertionError  	64	5	add
270	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  ltI[i]  =  Math.sqrt(ltI[i]  /  2);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  /  1);  ltI[i]  =  Math.sqrt(ltI[i]  /  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    /    1);    ltI[i]  =  Math.sqrt(ltI[i]  /  2);	  	compilable	  [FE]  AssertionError  	64	5	add
271	[BUG]  [BUGGY]  LtI[i]  =  Math.max(ltI[i],  ltI[i].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.max(ltI[i],  ltI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.max(ltI[i],  ltI[i].doubleValue());	  ltI[i]    =    Math.max(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	105	None	replace
272	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i].doubleValue()  +  1);  [CE]  double  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i].doubleValue()  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ltI[i].doubleValue()  +  1);	  ltI[i]    =    Math.max(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	105	None	replace
273	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	5	add
274	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	5	add
275	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	6	add
276	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	6	add
277	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	51	None	add
278	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	5	add
279	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	5	add
280	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  1);	  ltI[i]    =    Math.max(ltI[i],    0);    	compilable	  [FE]  AssertionError  	92	4	replace
281	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  1);	  ltI[i]    =    Math.max(ltI[i],    0);    	compilable	  [FE]  AssertionError  	92	4	replace
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  2);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  2);	  ltI[i]    =    Math.max(ltI[i],    0);    	compilable	  [FE]  AssertionError  	92	4	replace
283	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  2);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  2);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  2);	  ltI[i]    =    Math.max(ltI[i],    0);    	compilable	  [FE]  AssertionError  	92	4	replace
284	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltI);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  *  ltI);	  ltI[i]    =    Math.sqrt(ltI[0]    *    lJI);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
285	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[j]);  [CE]  cannot  find  symbol  j  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[j]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[j]);	  ltI[i]    =    Math.sqrt(ltI[0]    *    lJI);    	non-compiled	[CE]  cannot  find  symbol  j	7	None	replace
286	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[i]);	  ltI[i]    =    Math.sqrt(ltI[0]    *    lJI);    	compilable	  [FE]  AssertionError  	7	5	replace
287	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[i]);  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  *  ltI[i]);	  ltI[i]    =    Math.sqrt(ltI[0]    *    lJI);    	compilable	  [FE]  AssertionError  	7	5	replace
288	[BUG]  [BUGGY]  tI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  tI  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  tI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	tI[i]  =  Math.sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    tI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  tI	82	None	replace
289	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI);  [CE]  cannot  find  symbol  ltJI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltJI);	  ltI[i]    =    Math.sqrt(ltI[i],    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  ltJI	26	None	replace
290	[BUG]  [BUGGY]  LtI  =  Math.sqrt(ltI[i].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI  =  Math.sqrt(ltI[i].doubleValue());  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI  =  Math.sqrt(ltI[i].doubleValue());	  ltI    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	95	None	replace
291	[BUG]  [BUGGY]  sqrtI  =  Math.sqrt(ltI[i].doubleValue());  [CE]  cannot  find  symbol  sqrtI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  sqrtI  =  Math.sqrt(ltI[i].doubleValue());  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	sqrtI  =  Math.sqrt(ltI[i].doubleValue());	  ltI    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  sqrtI	95	None	replace
292	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[]    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  ']'  expected	32	None	replace
293	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	115	5	add
294	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	115	5	add
295	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    LtI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	115	None	add
296	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	115	5	add
297	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	115	5	add
298	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	115	5	add
299	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	115	5	add
300	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	12	5	add
301	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	12	5	add
302	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	12	None	add
303	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	12	5	add
304	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	12	5	add
305	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	12	5	add
306	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	12	5	add
307	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue());  [CE]  cannot  find  symbol  LtI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue());  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue());	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	100	None	replace
308	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue()  +  1);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue()  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].doubleValue()  +  1);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  double  cannot  be  dereferenced	100	None	replace
309	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  ltI[i]  =  Math.floor(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.floor(ltI[i]);    ltI[i]  =  Math.floor(ltI[i]);	  	compilable	  [FE]  AssertionError  	86	2	add
310	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  ltI[i]  =  Math.floor(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  ltI[i]  =  Math.floor(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.floor(ltI[i]);    ltI[i]  =  Math.floor(ltI[i]);	  	compilable	  [FE]  AssertionError  	86	2	add
311	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  ltI[i]  =  Math.floor(ltI[i]).floor(ltI[i]);  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  ltI[i]  =  Math.floor(ltI[i]).floor(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.floor(ltI[i]);    ltI[i]  =  Math.floor(ltI[i]).floor(ltI[i]);	  	non-compiled	[CE]  double  cannot  be  dereferenced	86	None	add
312	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  final  double[]  ltI[i]  =  Math.floor(ltI[i]);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  final  double[]  ltI[i]  =  Math.floor(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.floor(ltI[i]);    final  double[]  ltI[i]  =  Math.floor(ltI[i]);	  	non-compiled	[CE]  ']'  expected	86	None	add
313	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  LtI[i]  =  Math.floor(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  LtI[i]  =  Math.floor(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.floor(ltI[i]);    LtI[i]  =  Math.floor(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	86	None	add
314	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[j]);  [CE]  cannot  find  symbol  j  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[j]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[j]);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI);    	non-compiled	[CE]  cannot  find  symbol  j	103	None	replace
315	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJ);  [CE]  cannot  find  symbol  ltJ  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJ);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltJ);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI);    	non-compiled	[CE]  cannot  find  symbol  ltJ	103	None	replace
316	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[1]  =  Math.sqrt(ltI[0]);	  ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	11	5	replace
317	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]  =  Math.sqrt(ltI[0]);	  ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	11	5	replace
318	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	109	5	add
319	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	109	5	add
320	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	109	None	add
321	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	109	5	add
322	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	109	5	add
323	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	109	6	add
324	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	109	6	add
325	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI[i].doubleValue());  [CE]  cannot  find  symbol  lJI  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI[i].doubleValue());	  ltI[i]    =    Math.sqrt(ltI[i],    lJI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	59	None	replace
326	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI[i]  +  1);  [CE]  cannot  find  symbol  lJI  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI[i]  +  1);	  ltI[i]    =    Math.sqrt(ltI[i],    lJI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	59	None	replace
327	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [CE]  cannot  find  symbol  inverse  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse);	  ltI[i]    =    Math.sqrt(ltI[i],    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  inverse	26	None	replace
328	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	15	5	add
329	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[1]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[1]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	15	5	add
330	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	119	4	replace
331	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	119	4	replace
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	119	4	replace
333	[BUG]  [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	119	4	replace
334	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  int  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  int  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    int  ltI[i]  =  Math.min(ltI[i],  ltI[i]);	  	non-compiled	[CE]  ']'  expected	23	None	add
335	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].relativeSymmetryThreshold,  absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LtI	19	None	replace
336	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  final  double[][]  ltI[i]  =  Math.ceil(ltI[i]);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  final  double[][]  ltI[i]  =  Math.ceil(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.ceil(ltI[i]);    final  double[][]  ltI[i]  =  Math.ceil(ltI[i]);	  	non-compiled	[CE]  ']'  expected	20	None	add
337	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  i);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]  =  Math.sqrt(ltI[1]  +  i);	  ltI[0]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	9	5	replace
338	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  i);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  i);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.sqrt(ltI[1]  +  i);	  ltI[0]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	9	5	replace
339	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  order  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  order  -  1);	  ltI[i]    =    Math.max(ltI[i]    -    1);    	compilable	  [FE]  AssertionError  	25	4	replace
340	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  order  -  1);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  order  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  order  -  1);	  ltI[i]    =    Math.max(ltI[i]    -    1);    	compilable	  [FE]  AssertionError  	25	4	replace
341	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  lJI  -  1);  [CE]  cannot  find  symbol  lJI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  lJI  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  lJI  -  1);	  ltI[i]    =    Math.max(ltI[i]    -    1);    	non-compiled	[CE]  cannot  find  symbol  lJI	25	None	replace
342	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	110	2	replace
343	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	110	2	replace
344	[BUG]  [BUGGY]  LtI  =  Math.sqrt(ltI[i],  lJI);  [CE]  cannot  find  symbol  LtI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI  =  Math.sqrt(ltI[i],  lJI);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI  =  Math.sqrt(ltI[i],  lJI);	  LtI    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	42	None	replace
345	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);	  ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	99	4	replace
346	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  absolutePositivityThreshold);	  ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	99	4	replace
347	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  LtI[1]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  LtI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]    =    Math.sqrt(ltI[1]);    LtI[1]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	10	None	add
348	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	47	4	replace
349	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	47	4	replace
350	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	47	4	replace
351	[BUG]  [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	47	4	replace
352	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	16	5	replace
353	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	16	5	replace
354	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	16	5	replace
355	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[2]);	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	16	5	replace
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  }	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	13	5	replace
357	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  }	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	13	5	replace
358	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  }	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	13	5	replace
359	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  }	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	13	5	replace
360	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]),  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]),  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]),  ltI[i]  =  Math.sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).sqrt(ltI[i]);    	non-compiled	[CE]  ';'  expected	108	None	replace
361	[BUG]  [BUGGY]  final  double[]  ltI  =  data[i][0];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  data[i][0];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  data[i][0];	  final    double[]    ltI    =    data[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	45	None	replace
362	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	29	6	add
363	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	29	6	add
364	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[]    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  ']'  expected	32	None	replace
365	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	12	5	add
366	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	12	5	add
367	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	53	6	add
368	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	53	6	add
369	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
370	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  LtI[i]  =  Math.sqrt(ltI[i]  +  2);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  LtI[i]  =  Math.sqrt(ltI[i]  +  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  +  2);  LtI[i]  =  Math.sqrt(ltI[i]  +  2);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    LtI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  cannot  find  symbol  LtI	31	None	replace
371	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(cachedL[i],  lTData[i],  ltI);  [CE]  array  required,  but  RealMatrix  found  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(cachedL[i],  lTData[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(cachedL[i],  lTData[i],  ltI);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    cachedLT);    	non-compiled	[CE]  array  required,  but  RealMatrix  found	60	None	replace
372	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  inverse);  [CE]  cannot  find  symbol  inverse  [FE]                      AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  inverse);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  inverse);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    cachedLT);    	non-compiled	[CE]  cannot  find  symbol  inverse	60	None	replace
373	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	109	5	add
374	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	109	5	add
375	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.absolutePositivityThreshold);  [CE]  cannot  find  symbol  absolutePositivityThreshold  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.absolutePositivityThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix.absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    matrix.relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  absolutePositivityThreshold	111	None	replace
376	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(matrix[i],  ltI);  [CE]  array  required,  but  RealMatrix  found  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(matrix[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(matrix[i],  ltI);	  ltI[i]    =    Math.sqrt(ltI[i],    matrix.relativeSymmetryThreshold);    	non-compiled	[CE]  array  required,  but  RealMatrix  found	111	None	replace
377	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ljI);  [CE]  cannot  find  symbol  ljI  [FE]                        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ljI);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ljI);	  ltI[i]    =    Math.max(ltI[i],    ltQ);    	non-compiled	[CE]  cannot  find  symbol  ljI	71	None	replace
378	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.sqrt(ltI[1]);	  ltI[i]    =    Math.sqrt(ltI[0]);    final    double[]    ltI[i]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  ']'  expected	17	None	replace
379	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI[i],  lJI);  [CE]  cannot  find  symbol  lJI  [FE]                      AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI[i],  lJI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(lTData[i],  ltI[i],  lJI);	  ltI[i]    =    Math.sqrt(lTData[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	61	None	replace
380	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI[i],  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]                        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI[i],  absoluteSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(lTData[i],  ltI[i],  absoluteSymmetryThreshold);	  ltI[i]    =    Math.sqrt(lTData[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	61	None	replace
381	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	79	None	replace
382	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  absoluteSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	79	None	replace
383	[BUG]  [BUGGY]  final  double[][]  ltI  =  data[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  data[i].value;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  data[i].value;	  final    double[][]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
384	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i].value);  [CE]  cannot  find  symbol  value  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i].value);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i].value);	  ltI[i]    =    Math.sqrt(ltI[i].value);    	non-compiled	[CE]  cannot  find  symbol  value	117	None	replace
385	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  ltI);  [CE]  cannot  find  symbol  lJI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI,  ltI);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI);    	non-compiled	[CE]  cannot  find  symbol  lJI	103	None	replace
386	[BUG]  [BUGGY]  ltI  =  Math.sqrt(ltI[i].doubleValue()  +  1);  [CE]  cannot  assign  a  value  to  final  variable  ltI  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI  =  Math.sqrt(ltI[i].doubleValue()  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI  =  Math.sqrt(ltI[i].doubleValue()  +  1);	  ltI    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  ltI	95	None	replace
387	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[1]  =  Math.sqrt(ltI[2]);	  ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	11	5	replace
388	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]  =  Math.sqrt(ltI[2]);	  ltI[1]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	11	5	replace
389	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositivityThreshold);	  LtI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol  LtI	85	None	replace
390	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeMaxDelta());  [CE]  cannot  find  symbol  LtI  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeMaxDelta());  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].computeMaxDelta());	  LtI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol  LtI	85	None	replace
391	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeRelativeSymmetryThreshold());  [CE]  cannot  find  symbol  LtI  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].computeRelativeSymmetryThreshold());  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].computeRelativeSymmetryThreshold());	  LtI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol  LtI	85	None	replace
392	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedTData[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  cachedTData[i];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  cachedTData[i];	  final    double[]    ltI    =    cachedLT[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	43	None	replace
393	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  LtI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i]);  LtI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.floor(ltI[i]);  LtI[i]  =  Math.log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    LtI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  LtI	37	None	replace
394	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  lJI);  LtI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  lJI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  lJI);  LtI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  lJI);  LtI[i]  =  Math.log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    LtI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	37	None	replace
395	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i]),  ltI[i]  =  Math.log(ltI[i]).log(ltI[i]);  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i]),  ltI[i]  =  Math.log(ltI[i]).log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i]),  ltI[i]  =  Math.log(ltI[i]).log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    ltI[i]    =    Math.log(ltI[i]).log(ltI[i]);    	non-compiled	[CE]  ';'  expected	35	None	replace
396	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  -  1);  [CE]  cannot  find  symbol  LtI  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  -  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  -  1);	  LtI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol  LtI	41	None	replace
397	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0];  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0];	  	non-compiled	[CE]  ')'  expected	46	None	add
398	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  3);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.max(ltI[i],  3);	  ltI[i]    =    Math.max(ltI[i],    0);    	compilable	  [FE]  AssertionError  	92	4	replace
399	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  3);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  3);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  3);	  ltI[i]    =    Math.max(ltI[i],    0);    	compilable	  [FE]  AssertionError  	92	4	replace
400	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  computeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  computeSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  computeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  computeSymmetryThreshold,  absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  computeSymmetryThreshold	72	None	replace
401	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  lTData);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  lTData);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  lTData);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	88	None	replace
402	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  inverse);  [CE]  cannot  find  symbol  inverse  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  inverse);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  inverse);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  inverse	88	None	replace
403	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  lTData[i]);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  lTData[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  lTData[i]);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	88	None	replace
404	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  final  double[][]  ltI  =  Math.max(ltI[i],  absolutePositivityThreshold);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  absolutePositivityThreshold);  final  double[][]  ltI  =  Math.max(ltI[i],  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    absolutePositivityThreshold);    final  double[][]  ltI  =  Math.max(ltI[i],  absolutePositivityThreshold);	  	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	98	None	add
405	[BUG]  [BUGGY]  final  double[]  ltI  =  cachedL[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  cachedL[i].value;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  cachedL[i].value;	  final    double[]    ltI    =    cachedL[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	44	None	replace
406	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI[i],  lTData[i]);  [CE]  cannot  find  symbol  lJI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI[i],  lTData[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI[i],  lTData[i]);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  lJI	58	None	replace
407	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  lTData);  [CE]  no  suitable  method  found  for  min(double,double[][])  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  lTData);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  lTData);	  ltI[i]    =    Math.min(ltI[i],    lJI);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[][])	89	None	replace
408	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  }	          ltI[i]    =    Math.sqrt(ltI[i]);    final    double[]    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  ']'  expected	56	None	replace
409	[BUG]  [BUGGY]  if(ltI  ==  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI  ==  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI  ==  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]);  }	          ltI[i]    =    Math.sqrt(ltI[i]);    final    double[]    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  ']'  expected	56	None	replace
410	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	52	5	replace
411	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	52	5	replace
412	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	52	4	replace
413	[BUG]  [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI  ==  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[1]);    	compilable	  [FE]  AssertionError  	52	4	replace
414	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI[i]);  [CE]  cannot  find  symbol  ltJI  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltJI[i]);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  ltJI	27	None	replace
415	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  lJI);  [CE]  cannot  find  symbol  lJI  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  lJI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i],  lJI);	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	27	None	replace
416	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  final  double[]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  final  double[]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[0]    +    1);    final  double[]  ltI[0]  =  Math.sqrt(ltI[0]  +  1);	  	non-compiled	[CE]  ']'  expected	80	None	add
417	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.sqrt(ltI[i]  +  2);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	compilable	  [FE]  AssertionError  	30	4	replace
418	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  +  2);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	compilable	  [FE]  AssertionError  	30	4	replace
419	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(lTData[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(lTData[i],  ltI);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	78	None	replace
420	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i],  lJI);  [CE]  cannot  find  symbol  lJI  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i],  lJI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.ceil(ltI[i],  lJI);	  ltI[i]    =    Math.ceil(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	21	None	replace
421	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i  +  1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]  =  Math.ceil(ltI[i  +  1]);	  ltI[i]    =    Math.ceil(ltI[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
422	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i  +  1]);  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i  +  1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.ceil(ltI[i  +  1]);	  ltI[i]    =    Math.ceil(ltI[i]);    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
423	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	compilable	  [FE]  AssertionError  	54	5	replace
424	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	compilable	  [FE]  AssertionError  	54	5	replace
425	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  else  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  else  {  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  else  {	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
426	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  totalDelta);  [CE]  cannot  find  symbol  totalDelta  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  totalDelta);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  totalDelta);	  ltI[i]    =    Math.max(ltI[i],    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  totalDelta	90	None	replace
427	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  LtI[i]  =  Math.sqrt(ltI[i]);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  LtI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  LtI[i]  =  Math.sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    LtI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	55	None	replace
428	[BUG]  [BUGGY]  final  double[]  ltI  =  data[i].value;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  data[i].value;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  data[i].value;	  final    double[]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
429	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  tI[i]  =  Math.max(ltI[i],  ltI[i]);  [CE]  cannot  find  symbol  tI  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  tI[i]  =  Math.max(ltI[i],  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    ltI[i]);    tI[i]  =  Math.max(ltI[i],  ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  tI	68	None	add
430	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedLT[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedLT[i]  *  DEFAULT_ABSOLUTE_POSITIVE_SYMMETRY_THRESHOLD;	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	74	None	replace
431	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedL[i]  +  1;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedL[i]  +  1;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedL[i]  +  1;	  final    double[][]    ltI    =    cachedL[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
432	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[0]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	33	6	add
433	[BUG]  [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[0]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	33	6	add
434	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  absolutePositivityThreshold);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  absolutePositivityThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    absoluteSymmetryThreshold);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	93	None	replace
435	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.ceil(ltI[i]);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.ceil(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.ceil(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    final    double[]    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  ']'  expected	36	None	replace
436	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.pow(10,  ltI[i]);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.pow(10,  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.pow(10,  ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    final    double[]    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  ']'  expected	36	None	replace
437	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  totalPositivityThreshold);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  totalPositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  totalPositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
438	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  lTData);  [CE]  no  suitable  method  found  for  max(double,double[][])  [FE]                      AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  lTData);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  lTData);	  ltI[i]    =    Math.max(ltI[i],    lJI);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[][])	70	None	replace
439	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  lJ);  [CE]  cannot  find  symbol  lJ  [FE]                        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  lJ);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  lJ);	  ltI[i]    =    Math.max(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  lJ	70	None	replace
440	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  lTData[i]);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  lTData[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  lTData[i]);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
441	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	115	5	add
442	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	115	5	add
443	[BUG]  [BUGGY]  final  double[]  ltI  =  Math.sqrt(ltI[0]  +  1);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  Math.sqrt(ltI[0]  +  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[]    ltI    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	97	None	replace
444	[BUG]  [BUGGY]  final  double[]  ltI  =  Math.sqrt(ltI[i]);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  Math.sqrt(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  Math.sqrt(ltI[i]);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[]    ltI    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	97	None	replace
445	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0,  0);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  0);  ltI[i]  =  Math.max(ltI[i],  0,  0);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.max(ltI[i],    0);    ltI[i]  =  Math.max(ltI[i],  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	91	None	add
446	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	48	5	add
447	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	48	5	add
448	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1);  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1);	  	non-compiled	[CE]  ']'  expected	48	None	add
449	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  lTData);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  lTData);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  *  lTData);	  ltI[i]    =    Math.sqrt(ltI[0]    *    lJI);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
450	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  lTData[i]);  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  lTData[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  *  lTData[i]);	  ltI[i]    =    Math.sqrt(ltI[0]    *    lJI);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	7	None	replace
451	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1)];  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1)];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1)];	  	non-compiled	[CE]  ']'  expected	8	None	add
452	[BUG]  [BUGGY]  ltI[i]  =  Math.floor(ltI[i],  lJI);  [CE]  cannot  find  symbol  lJI  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.floor(ltI[i],  lJI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.floor(ltI[i],  lJI);	  ltI[i]    =    Math.floor(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	87	None	replace
453	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	51	5	add
454	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	51	5	add
455	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  absolutePositivityThreshold);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  absolutePositivityThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  absolutePositivityThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	40	None	replace
456	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  computeSymmetryThreshold);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  computeSymmetryThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  computeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	40	None	replace
457	[BUG]  [BUGGY]  final  double[][]  ltI  =  Math.sqrt(ltI[0]  +  1);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  Math.sqrt(ltI[0]  +  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[][]    ltI    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	94	None	replace
458	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].value);  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].value);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].value);	  ltI[i]    =    Math.sqrt(ltI[i].value);    	non-compiled	[CE]  double  cannot  be  dereferenced	117	None	replace
459	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].value,  ltI[i]);  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].value,  ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].value,  ltI[i]);	  ltI[i]    =    Math.sqrt(ltI[i].value);    	non-compiled	[CE]  double  cannot  be  dereferenced	117	None	replace
460	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i].doubleValue());  LtI[i]  =  Math.log(ltI[i]);  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i].doubleValue());  LtI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i].doubleValue());  LtI[i]  =  Math.log(ltI[i]);	  ltI[i]    =    Math.log(ltI[i]);    LtI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	37	None	replace
461	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  <identifier>  expected	53	None	add
462	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	46	5	add
463	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	46	5	add
464	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  computeSymmetryThreshold(maxDelta));  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  computeSymmetryThreshold(maxDelta));  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  computeSymmetryThreshold(maxDelta));	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	38	None	replace
465	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  -  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  -  1);	  ltI[i]    =    Math.sqrt(ltI[i]    -    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	67	None	replace
466	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].symmetryThreshold;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  lTData[i].symmetryThreshold;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  lTData[i].symmetryThreshold;	  final    double[][]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
467	[BUG]  [BUGGY]  final  double[][]  ltI  =  lTData[i].data;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  lTData[i].data;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  lTData[i].data;	  final    double[][]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
468	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	109	5	add
469	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	109	5	add
470	[BUG]  [BUGGY]  final  double[][]  ltI  =  cachedLT[i]  *  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  cachedLT[i]  *  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  cachedLT[i]  *  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD;	  final    double[][]    ltI    =    cachedLT[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	74	None	replace
471	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  ltI);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  ltI);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    lJI);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	58	None	replace
472	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  order);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  order);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  order);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    lJI);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	58	None	replace
473	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[2]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    ltI[i]  =  Math.sqrt(ltI[2]  -  1);	  	compilable	  [FE]  AssertionError  	5	5	add
474	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[2]  -  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  -  1);  ltI[i]  =  Math.sqrt(ltI[2]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    -    1);    ltI[i]  =  Math.sqrt(ltI[2]  -  1);	  	compilable	  [FE]  AssertionError  	5	5	add
475	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]).doubleValue();  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]).doubleValue();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	57	None	replace
476	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    ltI[i]  =  Math.max(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	23	2	add
477	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i]);  ltI[i]  =  Math.max(ltI[i],  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.min(ltI[i],    ltI[i]);    ltI[i]  =  Math.max(ltI[i],  ltI[i]);	  	compilable	  [FE]  AssertionError  	23	2	add
478	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  ltI[i]  =  Math.sqrt(ltI[i]  *  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[i]    *    1);    ltI[i]  =  Math.sqrt(ltI[i]  *  2);	  	compilable	  [FE]  AssertionError  	62	5	add
479	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  ltI[i]  =  Math.sqrt(ltI[i]  *  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  ltI[i]  =  Math.sqrt(ltI[i]  *  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    *    1);    ltI[i]  =  Math.sqrt(ltI[i]  *  2);	  	compilable	  [FE]  AssertionError  	62	5	add
480	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  final  double[]  ltI  =  Math.sqrt(ltI[i]  -  1);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  final  double[]  ltI  =  Math.sqrt(ltI[i]  -  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    -    1);    final  double[]  ltI  =  Math.sqrt(ltI[i]  -  1);	  	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	add
481	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  ltI[i]  =  Math.sqrt(ltI[i]  -  1));  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  -  1);  ltI[i]  =  Math.sqrt(ltI[i]  -  1));  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[i]    -    1);    ltI[i]  =  Math.sqrt(ltI[i]  -  1));	  	non-compiled	[CE]  ';'  expected	66	None	add
482	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[1]);	  ltI[i]    =    Math.sqrt(ltI[0]);    ltI[i]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  cannot  find  symbol  LtI	16	None	replace
483	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	48	5	add
484	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	48	5	add
485	[BUG]  [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI[i]  =  Math.sqrt(ltI[i]  *  1);	  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    final    double[]    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  ']'  expected	32	None	replace
486	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	1	6	add
487	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	1	6	add
488	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    maxDelta);    	non-compiled	[CE]  double  cannot  be  dereferenced	40	None	replace
489	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  ltI[i]  =  Math.ceil(ltI[i]).ceil(ltI[i]);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]);  ltI[i]  =  Math.ceil(ltI[i]).ceil(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.ceil(ltI[i]);    ltI[i]  =  Math.ceil(ltI[i]).ceil(ltI[i]);	  	non-compiled	[CE]  double  cannot  be  dereferenced	20	None	add
490	[BUG]  [BUGGY]  final  double[][]  ltI  =  this.data[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[][]  ltI  =  this.data[i];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[][]  ltI  =  this.data[i];	  final    double[][]    ltI    =    data[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	76	None	replace
491	[BUG]  [BUGGY]  final  double[]  ltI  =  ltData[i].length;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  ltData[i].length;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  ltData[i].length;	  final    double[]    ltI    =    lTData[i].length;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
492	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix.relativeSymmetryThreshold,  relativeSymmetryThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	18	None	replace
493	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	118	6	add
494	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	118	6	add
495	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	118	5	add
496	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	118	5	add
497	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltI);  [CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  ltI);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  method  log  in  class  Math  cannot  be  applied  to  given  types;	88	None	replace
498	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltQ);  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.log(ltI[i],  ltQ);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.log(ltI[i],  ltQ);	  ltI[i]    =    Math.log(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  ltQ	88	None	replace
499	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ltI);	  ltI[i]    =    Math.max(ltI[i],    maxDelta);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	22	None	replace
500	[BUG]  [BUGGY]  final  double[]  ltI  =  lTData[i].symmetryThreshold;  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  lTData[i].symmetryThreshold;  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  lTData[i].symmetryThreshold;	  final    double[]    ltI    =    lTData[i].value;    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
501	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  2);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[0]  =  Math.sqrt(ltI[0]  +  2);	  ltI[0]    =    Math.sqrt(ltI[0]    +    1);    	compilable	  [FE]  AssertionError  	81	5	replace
502	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]  +  2);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[0]  =  Math.sqrt(ltI[0]  +  2);	  ltI[0]    =    Math.sqrt(ltI[0]    +    1);    	compilable	  [FE]  AssertionError  	81	5	replace
503	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  matrix);  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  matrix);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  matrix);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    relativeSymmetryThreshold);    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
504	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositionThreshold);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositionThreshold);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].computeSymmetryThreshold(),  absolutePositionThreshold);	  ltI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold(),    relativeSymmetryThreshold);    	non-compiled	[CE]  double  cannot  be  dereferenced	39	None	replace
505	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].toString());  [CE]  double  cannot  be  dereferenced  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].toString());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].toString());	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
506	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].toLowerCase());  [CE]  double  cannot  be  dereferenced  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].toLowerCase());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i].toLowerCase());	  ltI[i]    =    Math.sqrt(ltI[i],    ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	27	None	replace
507	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	6	add
508	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	51	6	add
509	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[i]  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[i]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[i]	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  not  a  statement	110	None	replace
510	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  else  {  ltI[i]  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  else  {  ltI[i]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  }  else  {  ltI[i]	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  not  a  statement	54	None	replace
511	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  else  {  ltI[0]  =  Math.  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  else  {  ltI[0]  =  Math.  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  }  else  {  ltI[0]  =  Math.	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  <identifier>  expected	52	None	replace
512	[BUG]  [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i].);  ltI[i]  =  Math.log(ltI[i]);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i].);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.log(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i].);  ltI[i]  =  Math.log(ltI[i]);	  	non-compiled	[CE]  <identifier>  expected	33	None	add
513	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  matrix);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  matrix);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  matrix);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    cachedLT);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	60	None	replace
514	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  computedL,  cachedLT);  [CE]  cannot  find  symbol  computedL  [FE]                      AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  computedL,  cachedLT);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lTData[i],  computedL,  cachedLT);	  ltI[i]    =    Math.sqrt(ltI[i],    lTData[i],    cachedLT);    	non-compiled	[CE]  cannot  find  symbol  computedL	60	None	replace
515	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  /  2);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  /  2);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  /  2);	  ltI[i]    =    Math.sqrt(ltI[i]    /    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	65	None	replace
516	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  /  1);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  /  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]  /  1);	  ltI[i]    =    Math.sqrt(ltI[i]    /    1);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	65	None	replace
517	[BUG]  [BUGGY]  LtI[]  ltI  =  Math.max(ltI[i],  ltI[i].doubleValue());  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[]  ltI  =  Math.max(ltI[i],  ltI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[]  ltI  =  Math.max(ltI[i],  ltI[i].doubleValue());	  ltI[i]    =    Math.max(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
518	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltIJ);  [CE]  cannot  find  symbol  ltIJ  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltIJ);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltIJ);	  ltI[i]    =    Math.sqrt(ltI[i],    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  ltIJ	26	None	replace
519	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  order);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  order);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  order);	  ltI[i]    =    Math.sqrt(ltI[i],    maxDelta);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	26	None	replace
520	[BUG]  [BUGGY]  LtI[]  =  Math.sqrt(ltI[i].computeSymmetryThreshold());  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[]  =  Math.sqrt(ltI[i].computeSymmetryThreshold());  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[]  =  Math.sqrt(ltI[i].computeSymmetryThreshold());	  LtI[i]    =    Math.sqrt(ltI[i].computeSymmetryThreshold());    	non-compiled	[CE]  not  a  statement	85	None	replace
521	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i].relativeSymmetryThreshold);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI[i].relativeSymmetryThreshold);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  ltI[i].relativeSymmetryThreshold);	  ltI[i]    =    Math.min(ltI[i],    ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	24	None	replace
522	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  final  double[]  ltI  =  Math.sqrt(ltI[0]  +  1);  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  final  double[]  ltI  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]    =    Math.sqrt(ltI[0]    +    1);    final  double[]  ltI  =  Math.sqrt(ltI[0]  +  1);	  	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	3	None	add
523	[BUG]  [BUGGY]  final  double[]  ltI  =  lData[i];  [CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  final  double[]  ltI  =  lData[i];  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	final  double[]  ltI  =  lData[i];	  final    double[]    ltI    =    data[i];    	non-compiled	[CE]  variable  ltI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	45	None	replace
524	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.computeSymmetryThreshold(maxDelta));  [CE]  cannot  find  symbol  maxDelta  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix.computeSymmetryThreshold(maxDelta));  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix.computeSymmetryThreshold(maxDelta));	  ltI[i]    =    Math.sqrt(ltI[i],    matrix.relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	111	None	replace
525	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI);  [CE]  no  suitable  method  found  for  min(double,double[])  [FE]            AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  ltI);	  ltI[i]    =    Math.min(ltI[i],    lJI);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double[])	89	None	replace
526	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ);  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ);	  ltI[i]    =    Math.min(ltI[i],    lJI);    	non-compiled	[CE]  cannot  find  symbol  ltQ	89	None	replace
527	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltIJ);  [CE]  cannot  find  symbol  ltIJ  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[0]  *  ltIJ);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[0]  *  ltIJ);	  ltI[i]    =    Math.sqrt(ltI[0]    *    lJI);    	non-compiled	[CE]  cannot  find  symbol  ltIJ	7	None	replace
528	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[j]);  [CE]  double  cannot  be  dereferenced  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[j]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltI[j]);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	101	None	replace
529	[BUG]  [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]  *  lJI);  [CE]  cannot  find  symbol  lJI  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.ceil(ltI[i]  *  lJI);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.ceil(ltI[i]  *  lJI);	  ltI[i]    =    Math.ceil(ltI[i]);    	non-compiled	[CE]  cannot  find  symbol  lJI	21	None	replace
530	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i],  ltQ).doubleValue();  [CE]  cannot  find  symbol  LtI  [FE]                  AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i],  ltQ).doubleValue();  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[i]  =  Math.sqrt(ltI[i],  ltQ).doubleValue();	  LtI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  cannot  find  symbol  LtI	77	None	replace
531	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i].length);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltI[i].length);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.max(ltI[i],  ltI[i].length);	  ltI[i]    =    Math.max(ltI[i],    ltI[i]);    	non-compiled	[CE]  double  cannot  be  dereferenced	69	None	replace
532	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[2]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[2]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	10	5	add
533	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[2]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[2]  =  Math.sqrt(ltI[2]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[1]    =    Math.sqrt(ltI[1]);    ltI[2]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	10	5	add
534	[BUG]  [BUGGY]  LtI[]  ltI  =  Math.min(ltI[i],  ltI[i].doubleValue());  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  LtI[]  ltI  =  Math.min(ltI[i],  ltI[i].doubleValue());  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	LtI[]  ltI  =  Math.min(ltI[i],  ltI[i].doubleValue());	  ltI[i]    =    Math.min(ltI[i],    ltI[i].doubleValue());    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
535	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  for(int  i  =  0;  i  <  l  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  for(int  i  =  0;  i  <  l  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  for(int  i  =  0;  i  <  l	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  ';'  expected	47	None	replace
536	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[0]  =  Math.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[0]  =  Math.  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[0]  =  Math.	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  <identifier>  expected	47	None	replace
537	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  matrix);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  matrix);	  ltI[i]    =    Math.sqrt(ltI[i],    relativeSymmetryThreshold);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
538	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  ltI[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  ltI[i]);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  ltI[i]);	  ltI[i]    =    Math.sqrt(ltI[i],    relativeSymmetryThreshold);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	72	None	replace
539	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]).sqrt(ltI[i]);  [CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]).sqrt(ltI[i]);  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltI[i]).sqrt(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).sqrt(ltI[i]);    	non-compiled	[CE]  method  sqrt  in  class  Math  cannot  be  applied  to  given  types;	108	None	replace
540	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	49	5	replace
541	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	compilable	  [FE]  AssertionError  	49	5	replace
542	[BUG]  [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[1]  =  Math.  [CE]  <identifier>  expected  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[1]  =  Math.  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	if(ltI!=  null)  {  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  }  else  {  ltI[1]  =  Math.	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  <identifier>  expected	49	None	replace
543	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  inverse);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  inverse);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absoluteSymmetryThreshold,  inverse);	  ltI[i]    =    Math.sqrt(ltI[i],    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	79	None	replace
544	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  inverse);  [CE]  cannot  find  symbol  inverse  [FE]                AssertionError      [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  inverse);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  absolutePositivityThreshold,  inverse);	  ltI[i]    =    Math.sqrt(ltI[i],    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  inverse	79	None	replace
545	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i].  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i].  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i].  +  1);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  <identifier>  expected	29	None	add
546	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	add	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	29	5	add
547	[BUG]  [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];        [BUGGY]  ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);  [BUGGY]      final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];  for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	138	138	2	replace	ltI[i]        =        Math.sqrt(ltI[i]        +        1);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[0]  +  1);  ltI[i]  =  Math.sqrt(ltI[0]  +  1);	  	compilable	  [FE]  AssertionError  	29	5	add
