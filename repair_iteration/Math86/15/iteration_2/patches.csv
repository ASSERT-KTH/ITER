bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  cachedL);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  cachedL);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(relativeSymmetryThreshold,  cachedL);	  lTData    =    matrix.getData(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
2	[BUG]  [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  cachedLT);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  cachedLT);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(relativeSymmetryThreshold,  cachedLT);	  lTData    =    matrix.getData(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
3	[BUG]  [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  maxDelta);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(relativeSymmetryThreshold,  maxDelta);	  lTData    =    matrix.getData(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
4	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).cachedLT  =  null;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
5	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).cachedLT  =  null;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
6	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)cachedLT).cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)cachedLT).cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)cachedLT).cachedLT  =  null;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
7	[BUG]  [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	L  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    L    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
8	[BUG]  [BUGGY]  CachedL  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  CachedL  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	CachedL  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    L    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
9	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int    i    =    0;    i    >=    lTData.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	53	None	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i!=  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i!=  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int    i    =    0;    i    >=    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	53	2	replace
11	[BUG]  [BUGGY]  for(int  i  =  0;  i!=  lTData.length;  ++i)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i!=  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i!=  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int    i    =    0;    i    >=    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	53	2	replace
12	[BUG]  [BUGGY]  lTData  =  matrix.getData(order,  cachedL);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(order,  cachedL);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(order,  cachedL);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
13	[BUG]  [BUGGY]  lTData  =  matrix.getData(cachedLT);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(cachedLT);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(cachedLT);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
14	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  -  order;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    	compilable	  [FE]  AssertionError  	48	6	replace
15	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  order;  ++i)  {  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  -  order;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    	compilable	  [FE]  AssertionError  	48	6	replace
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  order  +  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	7	replace
17	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  lTData.length;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	48	7	replace
18	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  0;  i  <  order  +  1;  ++i)  {	  For(int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  '.class'  expected	70	None	replace
19	[BUG]  [BUGGY]  For(int  i  =  1;  i  <  order;  ++i)  {  [CE]  '.class'  expected  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  For(int  i  =  1;  i  <  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  1;  i  <  order;  ++i)  {	  For(int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  '.class'  expected	70	None	replace
20	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  2;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  2;  i  <  lTData.length;  ++i)  {	  for(int    i    =    1;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	99	6	replace
21	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  lTData.length;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  2;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  2;  i  <  lTData.length;  ++i)  {	  for(int    i    =    1;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	99	6	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  >=  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  >=  order;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    >=    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	28	6	replace
23	[BUG]  [BUGGY]  for(int  i  =  0;  i  >=  order;  ++i)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  >=  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  >=  order;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    >=    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	28	6	replace
24	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i!=  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i!=  order;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    >=    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	28	2	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i!=  order;  ++i)  {  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i!=  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i!=  order;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    >=    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	28	2	replace
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    }    final    double[]    lTData[i]    =    lTData[i];    if    (lTData[i][i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	replace
27	[BUG]  [BUGGY]  final  double[]  lTData[i]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[]  lTData[i]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[]  lTData[i]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    }    final    double[]    lTData[i]    =    lTData[i];    if    (lTData[i][i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  ']'  expected	77	None	replace
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lTData[i]  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    }    final    double[]    lTData[i]    =    lTData[i];    if    (lTData[i][i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  ']'  expected	77	None	replace
29	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  3;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  incompatible  types  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  3;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  3;  ++i)  {  final  double[][]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  incompatible  types	79	None	replace
30	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  illegal  start  of  type  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ordered  +  1;  ++i)  {  [CE]  cannot  find  symbol  ordered  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  ordered  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  ordered  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    ordered    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	10	None	replace
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ordered.length;  ++i)  {  [CE]  cannot  find  symbol  ordered  [FE]                ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  ordered.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  ordered.length;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    ordered    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	10	None	replace
33	[BUG]  [BUGGY]  lTData  =  matrix.getRowDimension();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getRowDimension();  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getRowDimension();	  lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
34	[BUG]  [BUGGY]  lTData  =  matrix.getDataDimension();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getDataDimension();  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getDataDimension();	  lTData    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
35	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  +  1;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDelta()  +  1;	  int    maxDelta    =    matrix.getMaxDelta();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
36	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  -  order;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  -  order;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDelta()  -  order;	  int    maxDelta    =    matrix.getMaxDelta();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
37	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta(order);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  maxDelta  =  matrix.getMaxDelta(order);  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDelta(order);	  int    maxDelta    =    matrix.getMaxDelta();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
38	[BUG]  [BUGGY]  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	=  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
39	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
40	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDefiniteMatrix;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
41	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDefiniteMatrix;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
42	[BUG]  [BUGGY]  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedLT  =  null;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedLT  =  null;	  lTData    =    matrix.getColumnDimension();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
43	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  cachedLT  =  null;	  lTData    =    matrix.getColumnDimension();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
44	[BUG]  [BUGGY]  lTData  =  matrix.getDataDimension();  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getDataDimension();  cachedLT  =  null;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getDataDimension();  cachedLT  =  null;	  lTData    =    matrix.getColumnDimension();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
45	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedLT;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedLT;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedLT;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    super.cachedLT;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
46	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.cachedLT;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.cachedLT;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  super.cachedLT;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    super.cachedLT;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
47	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    For(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	47	None	add
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {	  	non-compiled	[CE]  >  expected	47	None	add
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  for(int  i  =  0;  i  <  lTData[length  +  order;  ++i)  {  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  for(int  i  =  0;  i  <  lTData[length  +  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    for(int  i  =  0;  i  <  lTData[length  +  order;  ++i)  {	  	non-compiled	[CE]  ']'  expected	47	None	add
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    for(int  i  =  0;  i  <  order  *  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  int  i  =  0;  i  <  order  *  2;  ++i)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  int  i  =  0;  i  <  order  *  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    int  i  =  0;  i  <  order  *  2;  ++i)  {	  	non-compiled	[CE]  >  expected	89	None	add
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  For(int  i  =  0;  i  <  order  *  2;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  For(int  i  =  0;  i  <  order  *  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    For(int  i  =  0;  i  <  order  *  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	89	None	add
54	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  for(int  i  =  0;  i  <  ordered  *  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  for(int  i  =  0;  i  <  ordered  *  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    for(int  i  =  0;  i  <  ordered  *  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
55	[BUG]  [BUGGY]  cachedL  =  lTData;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  lTData;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  lTData;	  cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
56	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  new  RealMatrix();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  new  RealMatrix();	  cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
57	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix[lTData.length];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  new  RealMatrix[lTData.length];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  new  RealMatrix[lTData.length];	  cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
58	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix(lTData,  ltQ);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  new  RealMatrix(lTData,  ltQ);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  new  RealMatrix(lTData,  ltQ);	  cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
59	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  lTData[order  +  1];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  lTData[order  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension();  cachedL  =  lTData[order  +  1];	  int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order    +    1];    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
60	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];	  int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order    +    1];    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  1;  i  <  order;  ++i)  {	  for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	24	6	replace
62	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  order;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  1;  i  <  order;  ++i)  {	  for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	24	6	replace
63	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  2;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  2;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	24	6	replace
64	[BUG]  [BUGGY]  for(int  i  =  2;  i  <  absolutePositivityThreshold;  ++i)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  2;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  2;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	24	6	replace
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  /  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  order  /  2;  ++i)  {	  for(int    i    =    0;    i    <    order    *    2;    ++i)    {    	compilable	  [FE]  AssertionError  	90	5	replace
66	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  /  2;  ++i)  {  [FE]  AssertionError  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  /  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  /  2;  ++i)  {	  for(int    i    =    0;    i    <    order    *    2;    ++i)    {    	compilable	  [FE]  AssertionError  	90	5	replace
67	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length  *  2;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order.length  *  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length  *  2;  ++i)  {	  for(int    i    =    0;    i    <    order    *    2;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	90	None	replace
68	[BUG]  [BUGGY]  double  order  =  matrix.getColumnDimension();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getColumnDimension();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getColumnDimension();  cachedL  =  null;	  float    order    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ordered.length  +  2;  ++i)  {  [CE]  cannot  find  symbol  ordered  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  ordered.length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  ordered.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order.length    +    2;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	58	None	replace
70	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  For(int  i  =  0;  i  <  order.length;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  For(int  i  =  0;  i  <  order.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  For(int  i  =  0;  i  <  order.length;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    For(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
71	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    For(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
72	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  >  expected	27	None	replace
73	[BUG]  [BUGGY]  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  >  expected	27	None	replace
74	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
75	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    For(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {	  	non-compiled	[CE]  >  expected	20	None	add
78	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    for(int  i  =  0;  i  >=  lTData.length  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  lTData[length  +  1;  ++i)  {  [CE]  ']'  expected  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  for(int  i  =  0;  i  <  lTData[length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    for(int  i  =  0;  i  <  lTData[length  +  1;  ++i)  {	  	non-compiled	[CE]  ']'  expected	20	None	add
80	[BUG]  [BUGGY]  L  =  cachedLT.getLocalMatrix();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  L  =  cachedLT.getLocalMatrix();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	L  =  cachedLT.getLocalMatrix();	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
81	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  >  expected	51	None	replace
82	[BUG]  [BUGGY]  int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  >  expected	51	None	replace
83	[BUG]  [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  for(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
84	[BUG]  [BUGGY]  nTData  =  matrix.getData();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  nTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	nTData  =  matrix.getData();	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
85	[BUG]  [BUGGY]  null  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  null  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	null  =  matrix.getData();  lTData  =  matrix.getData();	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
86	[BUG]  [BUGGY]  null  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  null  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	null  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];	  int    order    =    matrix.getRowDimension();    cachedL    =    lTData[order];    	non-compiled	[CE]  not  a  statement	29	None	replace
87	[BUG]  [BUGGY]  lTData  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getRowDimension();  cachedL  =  lTData[order];	  int    order    =    matrix.getRowDimension();    cachedL    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension());  }  [CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension());  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension());  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	92	None	replace
89	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  matrix.get  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  matrix.get  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  matrix.get	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  ')'  expected	92	None	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getRowDimension(),  matrix.get  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getRowDimension(),  matrix.get  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getRowDimension(),  matrix.get	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  ')'  expected	92	None	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
93	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
94	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
95	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
97	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
98	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [CE]  cannot  find  symbol  cadL  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cadL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    lTData  =  matrix.getData();  cadL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cadL	13	None	add
99	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
100	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	13	2	add
101	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  totalSymmetryThreshold;  ++i)  {  [CE]  cannot  find  symbol  totalSymmetryThreshold  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  totalSymmetryThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  totalSymmetryThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  totalSymmetryThreshold	25	None	replace
102	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold.length;  ++i)  {  [CE]  double  cannot  be  dereferenced  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold.length;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	25	None	replace
103	[BUG]  [BUGGY]  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    RealMatrix    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
104	[BUG]  [BUGGY]  L  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  L  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	L  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    RealMatrix    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
105	[BUG]  [BUGGY]  ((  RealMatrix)matrix).setData(lTData);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).setData(lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
106	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(lTData);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
107	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    lTData.length;    ++i)    {    for(int  i  =  1;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
108	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  For(int  i  =  1;  i  <  lTData.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  For(int  i  =  1;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    lTData.length;    ++i)    {    For(int  i  =  1;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	98	None	add
109	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  int  i  =  1;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  int  i  =  1;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    lTData.length;    ++i)    {    int  i  =  1;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  >  expected	98	None	add
110	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  for(int  i  =  1;  i  <  lTData.length);  ++i)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  for(int  i  =  1;  i  <  lTData.length);  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    lTData.length;    ++i)    {    for(int  i  =  1;  i  <  lTData.length);  ++i)  {	  	non-compiled	[CE]  ';'  expected	98	None	add
111	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  for(int  i  =  1;  i  <  lTData.length,  ++i)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  for(int  i  =  1;  i  <  lTData.length,  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    lTData.length;    ++i)    {    for(int  i  =  1;  i  <  lTData.length,  ++i)  {	  	non-compiled	[CE]  ';'  expected	98	None	add
112	[BUG]  [BUGGY]  ((  RealMatrix)matrix).getData();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
113	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
114	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
115	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[][]  lTData  =  lTData[i];  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[][]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
116	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    For(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
117	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    For(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
118	[BUG]  [BUGGY]  double  order  =  matrix.getColumnDimension()  -  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getColumnDimension()  -  1;	  double    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	38	2	add
120	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	38	2	add
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	38	2	add
122	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	38	2	add
123	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
124	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  LTData  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    LTData  =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  LTData	38	None	add
125	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  int  i  =  0;  i  <  order.length;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  int  i  =  0;  i  <  order.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  int  i  =  0;  i  <  order.length;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
126	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  >  expected  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  1;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
127	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedLT;  ++i)  {  [CE]  cannot  find  symbol  orderedLT  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedLT;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedLT;  ++i)  {	  for(int    i    =    0;    i    <    orderedL;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedLT	87	None	replace
128	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
129	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
130	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[][]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[][]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    final    double[][]    lTData    =    lTData[i];    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  i	76	None	replace
131	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  1;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    For(int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	32	None	replace
132	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  cachedLT;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  cachedLT;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension();  cachedL  =  cachedLT;	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
133	[BUG]  [BUGGY]  cachedL  =  matrix.getColumnDimension();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  matrix.getColumnDimension();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
134	[BUG]  [BUGGY]  cachedL  =  cachedLT;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  cachedLT;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  cachedLT;	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
135	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
136	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
137	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  cachedLT[order];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  cachedLT[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension();  cachedL  =  cachedLT[order];	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT[order];    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
138	[BUG]  [BUGGY]  cachedL  =  cachedLT[order];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  cachedLT[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  cachedLT[order];	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT[order];    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
139	[BUG]  [BUGGY]  float  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  float  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	float  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order];	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT[order];    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
140	[BUG]  [BUGGY]  double  order  =  matrix.getRowDimension()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getRowDimension()  -  1;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getRowDimension()  -  1;	  double    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
141	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).clear();  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).clear();  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).clear();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    ((    RealMatrix)lTData).clear();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
142	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  cachedLT.clear();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  cachedLT.clear();  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  cachedLT.clear();	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    ((    RealMatrix)lTData).clear();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
143	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  cachedLT.clear();  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  cachedLT.clear();  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  cachedLT.clear();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    ((    RealMatrix)lTData).clear();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
144	[BUG]  [BUGGY]  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
145	[BUG]  [BUGGY]  if(matrix  instanceof  RealMatrix)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix  instanceof  RealMatrix)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix  instanceof  RealMatrix)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
146	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getRowDimension()  +  1;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension()  +  1;	  int    order    =    matrix.getColumnDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
147	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  /  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getColumnDimension()  /  1;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension()  /  1;	  int    order    =    matrix.getColumnDimension()    +    1;    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
148	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {  [CE]  cannot  find  symbol  ordered  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    for(int    i    =    0;    i    <    ordered    +    2;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	34	None	replace
149	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    For(int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  '.class'  expected	50	None	replace
150	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	5	replace
151	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  -  2;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	5	replace
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  4;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  -  4;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	5	replace
153	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  4;  ++i)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  4;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  -  4;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	5	replace
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	5	replace
155	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  -  3;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	5	replace
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	11	2	add
157	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	11	2	add
158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	11	2	add
159	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	11	2	add
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	11	2	add
161	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	11	2	add
162	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	11	2	add
163	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	11	2	add
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	65	2	add
165	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	65	2	add
166	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	65	2	add
167	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	65	2	add
168	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	65	2	add
169	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	65	2	add
170	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
171	[BUG]  [BUGGY]  int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  i  =  0;  i  <  order  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  >  expected	9	None	replace
172	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length  +  3;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order.length  +  3;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length  +  3;  ++i)  {	  for(int    i    =    0;    i    <    order.length    +    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
173	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ordered.length  +  1;  ++i)  {  [CE]  cannot  find  symbol  ordered  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  ordered.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  ordered.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  ordered	22	None	replace
174	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
175	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
176	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length  +  2;  ++i)  {  [CE]  cannot  find  symbol  orderedL  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    size    +    2;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedL	86	None	replace
177	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedLT.length;  ++i)  {  [CE]  cannot  find  symbol  orderedLT  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedLT.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedLT.length;  ++i)  {	  for(int    i    =    0;    i    <    orderedL.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedLT	4	None	replace
178	[BUG]  [BUGGY]  null  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  null  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	null  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;	  int    order    =    matrix.getColumnDimension();    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
179	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
180	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  For(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  For(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    For(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	23	None	add
181	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  >  expected	23	None	add
182	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  1;  i  >=  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  1;  i  >=  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    for(int  i  =  1;  i  >=  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
183	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
184	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [CE]  >  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {	  	non-compiled	[CE]  >  expected	56	None	add
185	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    For(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	56	None	add
186	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  lTData[length  +  2;  ++i)  {  [CE]  ']'  expected  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  for(int  i  =  0;  i  <  lTData[length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    for(int  i  =  0;  i  <  lTData[length  +  2;  ++i)  {	  	non-compiled	[CE]  ']'  expected	56	None	add
187	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    for(int  i  =  0;  i  >=  lTData.length  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
188	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  cachedLT;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  cachedL  =  cachedLT;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  cachedL  =  cachedLT;	  lTData    =    matrix.getColumnDimension();    cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
189	[BUG]  [BUGGY]  lTData  =  matrix.getDataDimension();  cachedL  =  cachedLT;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getDataDimension();  cachedL  =  cachedLT;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getDataDimension();  cachedL  =  cachedLT;	  lTData    =    matrix.getColumnDimension();    cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
190	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    true;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
191	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  true;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  true;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  true;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    true;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
192	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension();  lTData  =  lTData[order];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getColumnDimension();  lTData  =  lTData[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension();  lTData  =  lTData[order];	  int    order    =    matrix.getRowDimension();    lTData    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
193	[BUG]  [BUGGY]  null  order  =  matrix.getRowDimension();  lTData  =  lTData[order];  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  null  order  =  matrix.getRowDimension();  lTData  =  lTData[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	null  order  =  matrix.getRowDimension();  lTData  =  lTData[order];	  int    order    =    matrix.getRowDimension();    lTData    =    lTData[order];    	non-compiled	[CE]  not  a  statement	30	None	replace
194	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	16	2	add
195	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	16	2	add
196	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	16	2	add
197	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	16	2	add
198	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
199	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	2	add
200	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	2	add
201	[BUG]  [BUGGY]  lTData  =  matrix.getData(cachedL,  cachedLT);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(cachedL,  cachedLT);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(cachedL,  cachedLT);	  lTData    =    matrix.getData(cachedL);    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
202	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
203	[BUG]  [BUGGY]  if(cachedL  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
204	[BUG]  [BUGGY]  double  order  =  matrix.getRowDimension();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getRowDimension();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getRowDimension();  cachedL  =  null;	  float    order    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
205	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  --i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  order  +  1;  --i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    order    +    1;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	7	replace
206	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  --i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  --i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  1;  --i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    order    +    1;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	7	replace
207	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  order  +  1;  --i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  order  +  1;  --i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  order  +  1;  --i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    order    +    1;    --i)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
208	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  --i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  order  +  2;  --i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    order    +    1;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	7	replace
209	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  --i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  --i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  2;  --i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    order    +    1;    --i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	88	7	replace
210	[BUG]  [BUGGY]  ((  RealMatrix)cachedLT).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)cachedLT).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)cachedLT).relativeSymmetryThreshold  =  absolutePositivityThreshold;	  ((    RealMatrix)cachedL).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
211	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order;	  int    maxDelta    =    matrix.getMaxDeltaDimension();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
212	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  +  1;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  +  1;	  int    maxDelta    =    matrix.getMaxDeltaDimension();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
213	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  1;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  -  1;	  int    maxDelta    =    matrix.getMaxDeltaDimension();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
214	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  cannot  find  symbol  i  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  i	64	None	replace
215	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i].getData();  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[]  lTData  =  lTData[i].getData();  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[]  lTData  =  lTData[i].getData();  for(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  i	64	None	replace
216	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length  +  2;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  cachedL.length  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  cachedL.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    cachedL.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
217	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length  +  1;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  cachedLT.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    cachedL.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
218	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length  +  3;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  cachedL.length  +  3;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  cachedL.length  +  3;  ++i)  {	  for(int    i    =    0;    i    <    cachedL.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
219	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length);  ++i)  {  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length);  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length);  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int    i    =    0;    i    <    lTData.length);    ++i)    {    	non-compiled	[CE]  ';'  expected	52	None	replace
220	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
221	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    For(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	45	None	add
222	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  	non-compiled	[CE]  >  expected	45	None	add
223	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    for(int  i  =  0;  i  >=  lTData.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
224	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lData.length  -  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lData.length  -  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  lData.length  -  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
225	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  *  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  *  2;  ++i)  {	  for(int    i    =    0;    i    <    order    *    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	7	replace
226	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  *  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  *  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  *  2;  ++i)  {	  for(int    i    =    0;    i    <    order    *    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	90	7	replace
227	[BUG]  [BUGGY]  ((  RealMatrix)cachedL).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)cachedL).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)cachedL).relativeSymmetryThreshold  =  relativeSymmetryThreshold;	  ((    RealMatrix)cachedL).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
228	[BUG]  [BUGGY]  ((  RealMatrix)cachedL).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  ((  RealMatrix)cachedL).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)cachedL).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;	  ((    RealMatrix)cachedL).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
229	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
230	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  RealMatrix  matrix  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  variable  matrix  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  RealMatrix  matrix  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    RealMatrix  matrix  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  variable  matrix  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	65	None	add
231	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  LtData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  cannot  find  symbol  LtData  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  LtData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    LtData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  cannot  find  symbol  LtData	65	None	add
232	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  ')'  expected	93	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
234	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolute  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolute  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolute	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  ')'  expected	93	None	replace
236	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  L  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  L  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  L  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    L    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
237	[BUG]  [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }	  int    order    =    matrix.getRowDimension();    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
238	[BUG]  [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  int    order    =    matrix.getRowDimension();    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
239	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
240	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
241	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
242	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    true;    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
243	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedLT  =  null;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
244	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
245	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
246	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
247	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  For(int  i  =  0;  i  <  cachedL.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  0;  i  <  cachedL.length;  ++i)  {	  For(int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  '.class'  expected	70	None	replace
248	[BUG]  [BUGGY]  double  order  =  matrix.getRowDimension()  -  cachedL;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getRowDimension()  -  cachedL;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getRowDimension()  -  cachedL;	  double    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
249	[BUG]  [BUGGY]  RelativeMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  RelativeMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	RelativeMatrix  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    RealMatrix    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
250	[BUG]  [BUGGY]  FixedMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  FixedMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	FixedMatrix  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    RealMatrix    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
251	[BUG]  [BUGGY]  if(absolutePositivityThreshold!=  absolutePositivityThreshold)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(absolutePositivityThreshold!=  absolutePositivityThreshold)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(absolutePositivityThreshold!=  absolutePositivityThreshold)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
252	[BUG]  [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getDataRef();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getDataRef();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  lTData  =  matrix.getDataRef();  cachedL  =  null;  }	  lTData    =    matrix.getDataRef();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
253	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  2];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  2];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  2];	  int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order    +    1];    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
254	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  order  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
255	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  for(int  i  =  0;  i  <  i  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  for(int  i  =  0;  i  <  i  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  for(int  i  =  0;  i  <  i  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
256	[BUG]  [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getDataDimension();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getDataDimension();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  lTData  =  matrix.getDataDimension();  cachedL  =  null;  }	  lTData    =    matrix.getDataDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
257	[BUG]  [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getDataDimension();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getDataDimension();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  lTData  =  matrix.getDataDimension();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  lTData    =    matrix.getDataDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
258	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  i  +  1;  --i)  {  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  i  +  1;  --i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  for(int  i  =  0;  i  <  i  +  1;  --i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int    i    =    0;    i    <    order    +    1;    --i)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
259	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  final  double[][]  lTData  =  lTData[i];  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  final  double[][]  lTData  =  lTData[i];  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    final  double[][]  lTData  =  lTData[i];  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
260	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    final  double[][]  lTData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
261	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    lTData.length;    ++i)    {    final  double[]  lTData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
262	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedL;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedL;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedL;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    super.cachedLT;    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[][]  lTData  =  matrix.getDataReflection();  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[][]  lTData  =  matrix.getDataReflection();  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    final  double[][]  lTData  =  matrix.getDataReflection();	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
265	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
266	[BUG]  [BUGGY]  double  order  =  matrix.getColumnDimension()  -  cachedL;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getColumnDimension()  -  cachedL;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getColumnDimension()  -  cachedL;	  double    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
267	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  incompatible  types	11	None	add
268	[BUG]  [BUGGY]  cachedL  =  matrix.getCachedL();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  matrix.getCachedL();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  matrix.getCachedL();	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
269	[BUG]  [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }	  int    order    =    matrix.getColumnDimension();    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
270	[BUG]  [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  int    order    =    matrix.getColumnDimension();    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
271	[BUG]  [BUGGY]  if(absolutePositiveDefiniteMatrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(absolutePositiveDefiniteMatrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(absolutePositiveDefiniteMatrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDefiniteMatrix;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
272	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  >  expected	9	None	replace
273	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
274	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  LTData  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	LTData  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
275	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    }    final    double[]    lTData[i]    =    lTData[i];    if    (lTData[i][i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	replace
276	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    For(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
277	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  order);  ++i)  {  [CE]  ';'  expected  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  for(int  i  =  0;  i  <  lTData.length  +  order);  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    order;    ++i)    {    for(int  i  =  0;  i  <  lTData.length  +  order);  ++i)  {	  	non-compiled	[CE]  ';'  expected	47	None	add
278	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix(cachedLT,  lTData);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  new  RealMatrix(cachedLT,  lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  new  RealMatrix(cachedLT,  lTData);	  cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
279	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        ((    RealMatrix)matrix).getData();    cachedL    =    null;    RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	non-compiled	[CE]  incompatible  types	13	None	add
280	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
281	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
282	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
283	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalStateException( " ");  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
284	[BUG]  [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getRowDimension();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getRowDimension();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  lTData  =  matrix.getRowDimension();  cachedL  =  null;  }	  lTData    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
285	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  >  expected	27	None	replace
286	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  0;  i  <  order  +  2;  ++i)  {	  for(int    i    =    0;    i    <    size    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	86	None	replace
287	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    For(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
288	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  2;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    For(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
289	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDefiniteMatrixException    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
290	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedLT  =  null;  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
291	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
292	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedL  =  null;  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
293	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[0];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[]  lTData  =  lTData[0];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[]  lTData  =  lTData[0];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final    double[]    lTData    =    lTData[i];    for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  incompatible  types	64	None	replace
294	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
295	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  cachedLT  =  null;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
296	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
297	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    ArrayIndexOutOfBoundsException  a  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
298	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
299	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  lTData  =  cachedLT[order];  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getRowDimension();  lTData  =  cachedLT[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension();  lTData  =  cachedLT[order];	  int    order    =    matrix.getRowDimension();    lTData    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
300	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        lTData    =    matrix.getData();    cachedLT    =    null;    RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;	  	non-compiled	[CE]  incompatible  types	16	None	add
301	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  cannot  find  symbol  ordered  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol  ordered	79	None	replace
302	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  L  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  L  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  L  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    L  =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  L	38	None	add
303	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
304	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    ((    RealMatrix)matrix).getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
305	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
306	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  final  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  final  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    final  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
307	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
308	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order  +  1];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order  +  1];	  int    order    =    matrix.getColumnDimension();    cachedL    =    cachedLT[order];    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
309	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData[i]).clear();  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData[i]).clear();  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData[i]).clear();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    ((    RealMatrix)lTData).clear();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
310	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).close();  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).close();  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).close();  }	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    ((    RealMatrix)lTData).clear();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
311	[BUG]  [BUGGY]  Integer  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  Integer  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	Integer  i  =  0;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int    i    =    0;    i    <    lTData.length;    ++i)    {    	non-compiled	[CE]  >  expected	51	None	replace
312	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length  +  1;  ++i)  {  [CE]  cannot  find  symbol  orderedL  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  orderedL.length  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order.length    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedL	22	None	replace
313	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  >  expected	9	None	replace
314	[BUG]  [BUGGY]  if(cachedLT  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
315	[BUG]  [BUGGY]  double  maxDelta  =  matrix.getMaxDelta();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  maxDelta  =  matrix.getMaxDelta();  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  maxDelta  =  matrix.getMaxDelta();	  int    maxDelta    =    matrix.getMaxDelta();    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
316	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(cachedLT);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(cachedLT);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(cachedLT);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
317	[BUG]  [BUGGY]  LTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  LTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	LTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
318	[BUG]  [BUGGY]  For(int  i  =  0;  j  <  order;  ++i)  {  [CE]  '.class'  expected  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  For(int  i  =  0;  j  <  order;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  0;  j  <  order;  ++i)  {	  For(int    i    =    0;    i    <    order;    ++i)    {    	non-compiled	[CE]  '.class'  expected	70	None	replace
319	[BUG]  [BUGGY]  null  =  matrix.getColumnDimension();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  null  =  matrix.getColumnDimension();  cachedL  =  null;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	null  =  matrix.getColumnDimension();  cachedL  =  null;	  null    order    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
320	[BUG]  [BUGGY]  float  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  float  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	float  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];	  int    order    =    matrix.getRowDimension();    cachedL    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
321	[BUG]  [BUGGY]  if(matrix!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(matrix!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(matrix!=  null)  {  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  }	  int    order    =    matrix.getRowDimension();    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
322	[BUG]  [BUGGY]  double  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];	  int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order    +    1];    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
323	[BUG]  [BUGGY]  L  =  cachedLT.evaluate(matrix,  matrix.getColumnDimension());  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  L  =  cachedLT.evaluate(matrix,  matrix.getColumnDimension());  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	L  =  cachedLT.evaluate(matrix,  matrix.getColumnDimension());	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
324	[BUG]  [BUGGY]  L  =  cachedLT.evaluate(matrix,  matrix.getColumnDimension(),  order);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  L  =  cachedLT.evaluate(matrix,  matrix.getColumnDimension(),  order);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	L  =  cachedLT.evaluate(matrix,  matrix.getColumnDimension(),  order);	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
325	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).clear();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).clear();  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    lTData.length;    ++i)    {    ((  RealMatrix)lTData).clear();	  	non-compiled	[CE]  illegal  start  of  expression	98	None	add
326	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  matrix  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  matrix  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension(),  matrix	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  ')'  expected	93	None	replace
327	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension()  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension()  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException(matrix.getColumnDimension()	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold    >    0)    {    final    double[][]    lTData    =    lTData[i];    if(lTData[i][i]    <    absolutePositivityThreshold)    {    throw    new    NotPositiveDef    	non-compiled	[CE]  ')'  expected	93	None	replace
328	[BUG]  [BUGGY]  double  order  =  matrix.getColumnDimension()  -  4;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  order  =  matrix.getColumnDimension()  -  4;  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getColumnDimension()  -  4;	  double    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
329	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
330	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    1;    ++i)    {    ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
331	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  FOR(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  FOR(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  FOR(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    For(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
332	[BUG]  [BUGGY]  if(cachedL  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedL  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
333	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[][]  lTData  =  lTData.toArray(new  double[lTData.length  -  1]);  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  final  double[][]  lTData  =  lTData.toArray(new  double[lTData.length  -  1]);  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    final  double[][]  lTData  =  lTData.toArray(new  double[lTData.length  -  1]);	  	non-compiled	[CE]  illegal  start  of  expression	45	None	add
334	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  illegal  start  of  type  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  +  1;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
335	[BUG]  [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lTData    =    matrix.getData(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
336	[BUG]  [BUGGY]  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedLT  =  null;  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedLT  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  cachedLT  =  null;  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
337	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositionThreshold;  ++i)  {  [CE]  cannot  find  symbol  absolutePositionThreshold  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  absolutePositionThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  absolutePositionThreshold;  ++i)  {	  for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  absolutePositionThreshold	24	None	replace
338	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  >  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  >  expected	33	None	replace
339	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
340	[BUG]  [BUGGY]  lTData  =  matrix.getData(order,  cachedLT);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  lTData  =  matrix.getData(order,  cachedLT);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(order,  cachedLT);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
341	[BUG]  [BUGGY]  if(absolutePositiveDefiniteMatrix!=  matrix.getData())  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(absolutePositiveDefiniteMatrix!=  matrix.getData())  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(absolutePositiveDefiniteMatrix!=  matrix.getData())  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositiveDefiniteMatrix;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
342	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
343	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    *    2;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
344	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[][]  lTData  =  lTData[0];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[][]  lTData  =  lTData[0];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    final    double[][]    lTData    =    lTData[i];    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  incompatible  types	76	None	replace
345	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
346	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [CE]  illegal  start  of  expression  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length    +    2;    ++i)    {    ArrayIndexOutOfBoundsException  pt  =  new  ArrayIndexOutOfBoundsException(matrix.getColumnDimension(),  matrix.getColumnDimension());	  	non-compiled	[CE]  illegal  start  of  expression	56	None	add
347	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  this.order.length;  ++i)  {  [CE]  cannot  find  symbol  order  [FE]                AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  this.order.length;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  this.order.length;  ++i)  {	  for(int    i    =    0;    i    <    order.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  order	97	None	replace
348	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix(cachedLT,  matrix.getColumnDimension());  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  new  RealMatrix(cachedLT,  matrix.getColumnDimension());  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  new  RealMatrix(cachedLT,  matrix.getColumnDimension());	  cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
349	[BUG]  [BUGGY]  cachedL  =  new  RealMatrix(cachedLT,  matrix.getColumnDimension(),  lTData);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  cachedL  =  new  RealMatrix(cachedLT,  matrix.getColumnDimension(),  lTData);  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  new  RealMatrix(cachedLT,  matrix.getColumnDimension(),  lTData);	  cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
350	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  &  2;  ++i)  {  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  &  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  &  2;  ++i)  {	  for(int    i    =    0;    i    <    order    *    2;    ++i)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	90	None	replace
351	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CE]  cannot  find  symbol  i  [FE]          AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    }    final    double[]    lTData[i]    =    lTData[i];    if    (lTData[i][i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  cannot  find  symbol  i	77	None	replace
352	[BUG]  [BUGGY]  final  double[]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CE]  cannot  find  symbol  i  [FE]            AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  final  double[]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	final  double[]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    }    final    double[]    lTData[i]    =    lTData[i];    if    (lTData[i][i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  cannot  find  symbol  i	77	None	replace
353	[BUG]  [BUGGY]  if(cachedLT  ==  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT  ==  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT  ==  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
354	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    For(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
355	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    For(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  '.class'  expected	8	None	replace
356	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	2	replace
357	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order  -  1;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  -  1;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length    -    1;    ++i)    {    	compilable	  [FE]  AssertionError  	46	2	replace
358	[BUG]  [BUGGY]  double  maxDelta  =  matrix.getMaxDeltaDimension();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  double  maxDelta  =  matrix.getMaxDeltaDimension();  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  maxDelta  =  matrix.getMaxDeltaDimension();	  int    maxDelta    =    matrix.getMaxDeltaDimension();    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
359	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getColumnDimension();  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getColumnDimension();  cachedLT  =  null;  }  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getColumnDimension();  cachedLT  =  null;  }	  lTData    =    matrix.getColumnDimension();    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
360	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  	non-compiled	[CE]  '('  or  '['  expected	23	None	add
361	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]      AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    1;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  	non-compiled	[CE]  '('  or  '['  expected	23	None	add
362	[BUG]  [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }  [BUGGY]      for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedLT!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
363	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;        [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]        final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    For(int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  '.class'  expected	32	None	replace
