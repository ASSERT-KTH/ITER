bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL  =  null;	      int    order    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
2	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension();  lTData  =  matrix.getData();  cachedL  =  null;	      int    order    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
3	[BUG]  [BUGGY]  lTData  =  matrix.getRowDimension();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getRowDimension();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getRowDimension();  cachedL  =  null;	      int    order    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
4	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  [CE]  cannot  find  symbol  orderedL  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  orderedL.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL.length;  ++i)  {	  for(int    i    =    0;    i    <    size;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedL	15	None	replace
5	[BUG]  [BUGGY]  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	cachedL  =  null;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
6	[BUG]  [BUGGY]  lTData  =  matrix.getDataDimension();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getDataDimension();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getDataDimension();  cachedL  =  null;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
7	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int  i  =  0;  i  <  order  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
8	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  For(int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    1;    ++i)    {    For(int  i  =  0;  i  <  order  +  1;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
9	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  int  i  =  0;  i  <  order  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    1;    ++i)    {    int  i  =  0;  i  <  order  +  1;  ++i)  {	  	non-compiled	[CE]  >  expected	3	None	add
10	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  for(int  i  =  0;  i  <  ordered  +  1;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  for(int  i  =  0;  i  <  ordered  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int  i  =  0;  i  <  ordered  +  1;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	9	2	add
12	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	9	2	add
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	        lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	9	2	add
14	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  ((  RealMatrix)matrix).getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    ((  RealMatrix)matrix).getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	9	2	add
15	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  =  matrix.getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	9	2	add
17	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	9	2	add
18	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]            AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  cachedLT.length;  ++i)  {	  for(int    i    =    0;    i    <    cachedL.length;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
19	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension()  -  1;	      int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
20	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	7	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	7	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length  +  1;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order.length  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	4	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	14	6	replace
24	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  1;  i  <  absolutePositivityThreshold;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	compilable	  [FE]  AssertionError  	14	6	replace
25	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
26	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    For(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	13	None	add
27	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  >  expected	13	None	add
28	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  >=  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  >=  absolutePositivityThreshold;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int  i  =  0;  i  >=  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
29	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension();  cachedL  =  lTData[order];	      int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
30	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  lTData  =  lTData[order];  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getRowDimension();  lTData  =  lTData[order];  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension();  lTData  =  lTData[order];	      int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
31	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    2;    ++i)    {    for(int  i  =  0;  i  <  order  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
32	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  '.class'  expected  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  For(int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    2;    ++i)    {    For(int  i  =  0;  i  <  order  +  2;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	20	None	add
33	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [CE]  >  expected  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  int  i  =  0;  i  <  order  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    2;    ++i)    {    int  i  =  0;  i  <  order  +  2;  ++i)  {	  	non-compiled	[CE]  >  expected	20	None	add
34	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    2;    ++i)    {    for(int  i  =  0;  i  <  ordered  +  2;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
35	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getColumnDimension();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getColumnDimension();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
36	[BUG]  [BUGGY]  ((  RealMatrix)cachedL).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  ((  RealMatrix)cachedL).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	((  RealMatrix)cachedL).relativeSymmetryThreshold  =  absolutePositivityThreshold;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
37	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedLT  =  null;  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getColumnDimension();  cachedLT  =  null;	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	        lTData    =    matrix.getData();    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	2	add
39	[BUG]  [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	2	add
40	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
41	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositiveDefiniteMatrix;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
42	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  true;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
43	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedLT;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedLT;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).relativeSymmetryThreshold  =  super.cachedLT;	  	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	16	None	add
44	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension()  -  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getRowDimension()  -  1;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getRowDimension()  -  1;	      int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
45	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	2	2	replace
46	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  -  1;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	2	2	replace
47	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
48	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  +  order;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
49	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int  i  =  0;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
50	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  For(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    For(int  i  =  0;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
51	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    int  i  =  0;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  >  expected	1	None	add
52	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  <  lTData.length);  ++i)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  <  lTData.length);  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int  i  =  0;  i  <  lTData.length);  ++i)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
53	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  for(int  i  =  0;  i  >=  lTData.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    for(int  i  =  0;  i  >=  lTData.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
54	[BUG]  [BUGGY]  lTData  =  matrix.getData(cachedL);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getData(cachedL);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(cachedL);	      lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
55	[BUG]  [BUGGY]  lTData  =  matrix.getData(order);  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getData(order);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(order);	      lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
56	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
57	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  lTData.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
58	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length  +  2;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order.length  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
59	[BUG]  [BUGGY]  lTData  =  matrix.getDataRef();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getDataRef();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getDataRef();  cachedL  =  null;	      lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
60	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension();  cachedL  =  lTData[order  +  1];	      int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  lTData  =  matrix.getDataRef();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getDataRef();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getDataRef();	      lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
62	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
63	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  maxDelta  =  matrix.getMaxDelta();	      	non-compiled	[CE]  illegal  start  of  type	6	None	replace
64	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    final  double[]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  lTData.length;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
65	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	16	2	add
66	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	16	2	add
67	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).setData(lTData);	  	non-compiled	[CE]  cannot  find  symbol	16	None	add
68	[BUG]  [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedLT  =  null;  [CE]  cannot  find  symbol  cachedLT  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  ((  RealMatrix)matrix).cachedLT  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    ((  RealMatrix)matrix).cachedLT  =  null;	  	non-compiled	[CE]  cannot  find  symbol  cachedLT	16	None	add
69	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length  +  1;  ++i)  {  [CE]  cannot  find  symbol  length  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length  +  1;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  cachedL.length  +  1;  ++i)  {	  for(int    i    =    0;    i    <    order    +    1;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  length	4	None	replace
70	[BUG]  [BUGGY]  For(int  i  =  0;  i  <  order;  ++i)  {  [CE]  '.class'  expected  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  For(int  i  =  0;  i  <  order;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	For(int  i  =  0;  i  <  order;  ++i)  {	  for(int    i    =    0;    i    <    size;    ++i)    {    	non-compiled	[CE]  '.class'  expected	15	None	replace
71	[BUG]  [BUGGY]  null  order  =  matrix.getColumnDimension();  cachedL  =  null;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  null  order  =  matrix.getColumnDimension();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	null  order  =  matrix.getColumnDimension();  cachedL  =  null;	      int    order    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  not  a  statement	8	None	replace
72	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT;	      int    order    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
73	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    1;    ++i)    {    final  double[][]  lTData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
74	[BUG]  [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	      lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
75	[BUG]  [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  IllegalArgumentException( " ");  }	      lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
76	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  final  double[][]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  final  double[][]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    final  double[][]  lTData  =  lTData[i];  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
77	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }  final  double[]  lTData[i]  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }  final  double[]  lTData[i]  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  }  final  double[]  lTData[i]  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  ']'  expected	13	None	add
78	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  cachedLT;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  cachedLT;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getColumnDimension();  cachedL  =  cachedLT;	      lTData    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
79	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  2;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    2;    ++i)    {    final  double[][]  lTData  =  lTData[i];	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
80	[BUG]  [BUGGY]  double  order  =  matrix.getRowDimension();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  double  order  =  matrix.getRowDimension();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getRowDimension();	      int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
81	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension()  +  1;	      int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
82	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  incompatible  types  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    RealMatrix  lTData  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  incompatible  types	9	None	add
83	[BUG]  [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  L  =  matrix.getData();  cachedL  =  null;  [CE]  cannot  find  symbol  L  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]      lTData  =  matrix.getData();  cachedL  =  null;  L  =  matrix.getData();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	        lTData    =    matrix.getData();    cachedL    =    null;    L  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  cannot  find  symbol  L	9	None	add
84	[BUG]  [BUGGY]  null  order  =  matrix.getRowDimension();  cachedL  =  null;  [CE]  not  a  statement  [FE]                AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  null  order  =  matrix.getRowDimension();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	null  order  =  matrix.getRowDimension();  cachedL  =  null;	      int    order    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  not  a  statement	12	None	replace
85	[BUG]  [BUGGY]  float  order  =  matrix.getRowDimension();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  float  order  =  matrix.getRowDimension();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	float  order  =  matrix.getRowDimension();  cachedL  =  null;	      int    order    =    matrix.getRowDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
86	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  size  +  2;  ++i)  {  [CE]  cannot  find  symbol  size  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  size  +  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  size  +  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  size	21	None	replace
87	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  orderedL;  ++i)  {  [CE]  cannot  find  symbol  orderedL  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  orderedL;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  orderedL;  ++i)  {	  for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    	non-compiled	[CE]  cannot  find  symbol  orderedL	14	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  for(int  i  =  0;  i  <  order  +  1;  --i)  {  [CE]  illegal  start  of  expression  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  +  1;  ++i)  {  for(int  i  =  0;  i  <  order  +  1;  --i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    order    +    1;    ++i)    {    for(int  i  =  0;  i  <  order  +  1;  --i)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
89	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  0;  i  <  order  *  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
90	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order  *  2;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order  *  2;  ++i)  {	  for(int    i    =    0;    i    <    order    +    2;    ++i)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	21	7	replace
91	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).clear();  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  ((  RealMatrix)lTData).clear();  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    lTData.length;    ++i)    {    ((  RealMatrix)lTData).clear();	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
92	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [CE]  '('  or  '['  expected  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException	  	non-compiled	[CE]  '('  or  '['  expected	13	None	add
93	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]      AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  absolutePositivityThreshold;  ++i)  {  if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int    i    =    0;    i    <    absolutePositivityThreshold;    ++i)    {    if(absolutePositivityThreshold  >  0)  {  final  double[][]  lTData  =  lTData[i];  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDef	  	non-compiled	[CE]  '('  or  '['  expected	13	None	add
94	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order];  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order];  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	int  order  =  matrix.getColumnDimension();  cachedL  =  cachedLT[order];	      int    order    =    matrix.getColumnDimension();    cachedL    =    lTData[order];    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
95	[BUG]  [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  lTData  =  matrix.getData(relativeSymmetryThreshold);  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	lTData  =  matrix.getData(relativeSymmetryThreshold);	      lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
96	[BUG]  [BUGGY]  double  order  =  matrix.getColumnDimension();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  double  order  =  matrix.getColumnDimension();  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	double  order  =  matrix.getColumnDimension();	      int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
97	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  0;  i  <  order.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  0;  i  <  order.length;  ++i)  {	  for(int    i    =    0;    i    <    cachedL.length;    ++i)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	5	None	replace
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	add	for(int  i  =  1;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	2	6	replace
99	[BUG]  [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  for(int  i  =  1;  i  <  lTData.length;  ++i)  {  [BUGGY]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	for(int  i  =  1;  i  <  lTData.length;  ++i)  {	  for(int    i    =    0;    i    <    lTData.length;    ++i)    {    	compilable	  [FE]  AssertionError  	2	6	replace
100	[BUG]  [BUGGY]  float  order  =  matrix.getColumnDimension();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;      [BUGGY]  float  order  =  matrix.getColumnDimension();  cachedL  =  null;  [BUGGY]    for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	110	110	2	replace	float  order  =  matrix.getColumnDimension();  cachedL  =  null;	      int    order    =    matrix.getColumnDimension();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
