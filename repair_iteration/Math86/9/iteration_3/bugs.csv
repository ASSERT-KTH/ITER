bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order.length;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    for(int    p    =    0;    p    <    order);    ++p)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	27	None	replace
2	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  for(int  p  =  2;  p  <  q;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  for(int  p  =  2;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    q;    ++p)    {    for(int  p  =  2;  p  <  q;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
3	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  For(int  p  =  2;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  For(int  p  =  2;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    q;    ++p)    {    For(int  p  =  2;  p  <  q;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	141	None	add
4	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  int  p  =  2;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  int  p  =  2;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    q;    ++p)    {    int  p  =  2;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	141	None	add
5	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  for(int  p  =  2;  p  <  q);  ++p)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  for(int  p  =  2;  p  <  q);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    q;    ++p)    {    for(int  p  =  2;  p  <  q);  ++p)  {	  	non-compiled	[CE]  ';'  expected	141	None	add
6	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  (int  p  =  2;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  (int  p  =  2;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    q;    ++p)    {    (int  p  =  2;  p  <  q;  ++p)  {	  	non-compiled	[CE]  ')'  expected	141	None	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  1;  p  <  q;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	140	4	replace
8	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  1;  p  <  q;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	140	4	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  2;  p  <  q;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	140	5	replace
10	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  2;  p  <  q;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	140	5	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltI.length;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltI.length;  p  <  q;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	140	4	replace
12	[BUG]  [BUGGY]  for(int  p  =  ltI.length;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltI.length;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltI.length;  p  <  q;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	140	4	replace
13	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order;  p  >=  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	7	replace
14	[BUG]  [BUGGY]  for(int  p  =  order;  p  >=  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order;  p  >=  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	11	7	replace
15	[BUG]  [BUGGY]  for(int  p  =  order.length  -  2;  p  <  ltQ.length;  ++p)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order.length  -  2;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order.length  -  2;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	83	None	replace
16	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  2;  p  >=  0;  ++p)  {	  for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	7	replace
17	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  >=  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  2;  p  >=  0;  ++p)  {	  for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	83	7	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  2;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	83	4	replace
19	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  0;  ++p)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  2;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	83	4	replace
20	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.log(ltI[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	67	None	replace
21	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	46	None	replace
22	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	46	None	replace
23	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	46	None	replace
24	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	46	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  2;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	40	5	replace
26	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  2;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	40	5	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltQ.length  -  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  <  ltQ.length  -  1;  ++p)  {	  for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	40	5	replace
28	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltQ.length  -  1;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltQ.length  -  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  ltQ.length  -  1;  ++p)  {	  for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	40	5	replace
29	[BUG]  [BUGGY]  For(int  p  =  order;  p  >=  0;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  order;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  order;  p  >=  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    For(int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
30	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
31	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
32	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
33	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  ltQ.length;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  ltQ.length;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  ltQ.length;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	36	None	replace
34	[BUG]  [BUGGY]  For(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  0;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    For(int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
35	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  For(int  p  =  0;  p  <  order.length;  ++p)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  For(int  p  =  0;  p  <  order.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order.length;  ++p)  {  For(int  p  =  0;  p  <  order.length;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    For(int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
36	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltData[q-1];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltData[q-1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltData[q-1];	  final    double[][]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
37	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltData[q]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltData[q]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltData[q]  *  inverse;	  final    double[][]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
38	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order  -  1;  p  >=  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	7	replace
39	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  >=  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order  -  1;  p  >=  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	7	replace
40	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
41	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  0;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  ==  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order  -  1;  p  ==  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
43	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  ==  0;  ++p)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  ==  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order  -  1;  p  ==  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
44	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p!=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order  -  1;  p!=  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	7	replace
45	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p!=  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p!=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order  -  1;  p!=  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	7	replace
46	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i].inverse);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i].inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	137	None	replace
47	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltQ[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltQ[q];	  final    double[]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
48	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltQ[q]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltQ[q]  *  inverse;	  final    double[]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
49	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltI[q]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltI[q]  *  inverse;	  final    double[]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
50	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	23	None	replace
51	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {  }  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {  }  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {  }	  for(int    p    =    1;    p    <    order;    ++p)    {    int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	23	None	replace
52	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  1;  p  <  ltQ.length;  ++p)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  1;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	23	None	replace
53	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    0;    ++p)    {    for(int  p  =  order  -  1;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
54	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  For(int  p  =  order  -  1;  p  <  0;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  For(int  p  =  order  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    0;    ++p)    {    For(int  p  =  order  -  1;  p  <  0;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
55	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  int  p  =  order  -  1;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  int  p  =  order  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    0;    ++p)    {    int  p  =  order  -  1;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
56	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  (int  p  =  order  -  1;  p  <  0;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  (int  p  =  order  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    0;    ++p)    {    (int  p  =  order  -  1;  p  <  0;  ++p)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
57	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  for(int  p  =  order  -  1;  p  <  0);  ++p)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  for(int  p  =  order  -  1;  p  <  0);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    0;    ++p)    {    for(int  p  =  order  -  1;  p  <  0);  ++p)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
58	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[0]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[0]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[0]);	  double    p    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
59	[BUG]  [BUGGY]  double  p  =  Math.pow(10.0,  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.pow(10.0,  ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.pow(10.0,  ltQ[i]);	  double    p    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
60	[BUG]  [BUGGY]  double  p  =  Math.pow(10,  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.pow(10,  ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.pow(10,  ltQ[i]);	  double    p    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
61	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[i]  *  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i]  *  inverse);	  double    p    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
62	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    for(int  p  =  0;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
63	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    For(int  p  =  0;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
64	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    int  p  =  0;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  >  expected	1	None	add
65	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    (int  p  =  0;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
66	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  for(int  p  =  0;  p  <  ltQ.length);  ++p)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  for(int  p  =  0;  p  <  ltQ.length);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    for(int  p  =  0;  p  <  ltQ.length);  ++p)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
67	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  *  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[1]  *  inverse);	  ltI[0]    =    Math.sqrt(ltQ[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
68	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[1]  +  1);	  ltI[0]    =    Math.sqrt(ltQ[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
69	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltQ[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.log(ltQ[i]  *  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.log(ltQ[i]  *  inverse);	  ltI[i]    =    Math.log(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
70	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltQ[i],  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.log(ltQ[i],  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.log(ltQ[i],  inverse);	  ltI[i]    =    Math.log(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
71	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  order;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    (int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
72	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p]);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p]);	  for(int    p    =    0;    p    <    order;    ++p)    {    (int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
73	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  int  p  =  0;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  int  p  =  0;  p  <  order;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    (int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	29	None	replace
74	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p])  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p])  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p])  {	  for(int    p    =    0;    p    <    order;    ++p)    {    (int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
75	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  ltQ);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI,  ltQ);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
76	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ,  maxDelta);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
77	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJ,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJ,  ltQ);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJ,  ltQ);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
78	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  int  p  =  1;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  final  int  p  =  1;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    (int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	24	None	replace
79	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  1;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  1;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    (int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	24	None	replace
80	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    (int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	96	5	add
82	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	96	5	add
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	96	5	add
84	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	96	5	add
85	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  LtI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  LtI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    LtI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	96	None	add
86	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.log(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.log(ltQ[0]);	  	compilable	  [FE]  AssertionError  	96	5	add
87	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.log(ltQ[0]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.log(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.log(ltQ[0]);	  	compilable	  [FE]  AssertionError  	96	5	add
88	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  for(int  p  =  0;  p  <  1;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  for(int  p  =  0;  p  <  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    1;    ++p)    {    for(int  p  =  0;  p  <  1;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	135	None	add
89	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  For(int  p  =  0;  p  <  1;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  For(int  p  =  0;  p  <  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    1;    ++p)    {    For(int  p  =  0;  p  <  1;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	135	None	add
90	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  int  p  =  0;  p  <  1;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  int  p  =  0;  p  <  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    1;    ++p)    {    int  p  =  0;  p  <  1;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	135	None	add
91	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  for(int  p  =  0;  p  <  1);  ++p)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  for(int  p  =  0;  p  <  1);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    1;    ++p)    {    for(int  p  =  0;  p  <  1);  ++p)  {	  	non-compiled	[CE]  ';'  expected	135	None	add
92	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  (int  p  =  0;  p  <  1;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  (int  p  =  0;  p  <  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    1;    ++p)    {    (int  p  =  0;  p  <  1;  ++p)  {	  	non-compiled	[CE]  ')'  expected	135	None	add
93	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  inverse);	  ltI[i]    =    Math.sqrt(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
94	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltQ  +  1);	  ltI[i]    =    Math.sqrt(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
95	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltQ[i]);	  ltI[i]    =    Math.sqrt(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
96	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  order.length;  ++p)  {  [CE]  int  cannot  be  dereferenced  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  order.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  order.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    for(int    p    =    1;    p    <    order);    ++p)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	22	None	replace
97	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i].doubleValue());  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ[i].doubleValue());	  ltI[i]    =    Math.min(ltI[i],    ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
98	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i]  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ[i]  +  1);	  ltI[i]    =    Math.min(ltI[i],    ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
99	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i]  *  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ[i]  *  inverse);	  ltI[i]    =    Math.min(ltI[i],    ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
100	[BUG]  [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.max(ltI[i],  ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.max(ltI[i],  ltQ[i]);	  ltI[i]    =    Math.min(ltI[i],    ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
101	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  <  0;  ++p)  {	  for(int    p    =    1;    p    <    2;    ++p)    {    	compilable	  [FE]  AssertionError  	128	4	replace
102	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  0;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  0;  ++p)  {	  for(int    p    =    1;    p    <    2;    ++p)    {    	compilable	  [FE]  AssertionError  	128	4	replace
103	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
104	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  For(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  For(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    For(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	82	None	add
105	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  2;  p  <  order);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  2;  p  <  order);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    for(int  p  =  ltQ.length  -  2;  p  <  order);  ++p)  {	  	non-compiled	[CE]  ';'  expected	82	None	add
106	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	82	None	add
107	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  (int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  (int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    (int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  ')'  expected	82	None	add
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	54	4	add
109	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	54	4	add
110	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	54	4	add
111	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	54	4	add
112	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	54	None	add
113	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0];  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0];	  	non-compiled	[CE]  ')'  expected	54	None	add
114	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltI.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  <  ltI.length;  ++p)  {	  for(int    p    =    0;    p    <    ltI.length;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
115	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltI.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltI.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  ltI.length;  ++p)  {	  for(int    p    =    0;    p    <    ltI.length;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length  -  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltI.length  -  1;  ++p)  {	  for(int    p    =    0;    p    <    ltI.length;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
117	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length  -  1;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length  -  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltI.length  -  1;  ++p)  {	  for(int    p    =    0;    p    <    ltI.length;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order  -  1;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	81	4	replace
119	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order  -  1;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	81	4	replace
120	[BUG]  [BUGGY]  for(int  p  =  order.length  -  1;  p  <  ltQ.length;  ++p)  {  [CE]  int  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order.length  -  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order.length  -  1;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	81	None	replace
121	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  1;  p  >=  0;  ++p)  {	  for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	81	7	replace
122	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  >=  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  1;  p  >=  0;  ++p)  {	  for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	81	7	replace
123	[BUG]  [BUGGY]  LtI[0]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[0]  =  Math.sqrt(ltI[0]);	          ltI[0]    =    Math.sqrt(ltI[0]);    LtI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
124	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
125	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltI.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
126	[BUG]  [BUGGY]  int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
127	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order  -  1;  p  <  0;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
128	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltQ[0]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[1]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[1]  =  Math.sqrt(ltQ[0]);	  ltI[1]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	134	None	replace
129	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedL[i];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedL[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedL[i];	  final    double[][]    ltQ    =    cachedLT[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
130	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedT[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedT[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedT[i];	  final    double[][]    ltQ    =    cachedLT[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
131	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
132	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
133	[BUG]  [BUGGY]  ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.log(ltI[0]);  ltI[1]  =  Math.log(ltI[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
134	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltQ[p];	  ltQ[p]    -=    ltQ[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
135	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[i];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltQ[i];	  ltQ[p]    -=    ltQ[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
136	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[0];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[0];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltQ[0];	  ltQ[p]    -=    ltQ[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
137	[BUG]  [BUGGY]  double  p  =  Math.max(ltQ,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(ltQ,  relativeSymmetryThreshold);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(ltQ,  relativeSymmetryThreshold);	  double    p    =    Math.max(relativeSymmetryThreshold,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
138	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ,  absolutePositivityThreshold);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  ltQ,  absolutePositivityThreshold);	  double    p    =    Math.max(relativeSymmetryThreshold,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
139	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  ltQ[i]);	  double    p    =    Math.max(relativeSymmetryThreshold,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
140	[BUG]  [BUGGY]  double  p  =  Math.min(relativeSymmetryThreshold,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]                              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.min(relativeSymmetryThreshold,  ltQ);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.min(relativeSymmetryThreshold,  ltQ);	  double    p    =    Math.max(relativeSymmetryThreshold,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
141	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[1]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
142	[BUG]  [BUGGY]  final  double[][]  ltQ  =  lTData[q]  *  inverse  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  lTData[q]  *  inverse  +  1;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  lTData[q]  *  inverse  +  1;	  final    double[][]    ltQ    =    lTData[q]    *    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
143	[BUG]  [BUGGY]  final  double[][]  ltQ  =  lTData[q]  *  inverse.doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  lTData[q]  *  inverse.doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  lTData[q]  *  inverse.doubleValue();	  final    double[][]    ltQ    =    lTData[q]    *    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
144	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltData[q]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltData[q]  *  inverse;	  final    double[]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
145	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedL[ltQ];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedL[ltQ];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedL[ltQ];	  final    double[][]    ltQ    =    cachedLT[ltQ];    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
146	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedT[ltQ];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedT[ltQ];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedT[ltQ];	  final    double[][]    ltQ    =    cachedLT[ltQ];    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
147	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[i];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[i];	  ltI[p]    -=    ltI[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
148	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[q];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltQ[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltQ[q]  *  ltQ[q];	  ltI[p]    -=    ltI[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
149	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  for(int  p  =  0;  p  <  2;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  for(int  p  =  0;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    2;    ++p)    {    for(int  p  =  0;  p  <  2;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
150	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  For(int  p  =  0;  p  <  2;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  For(int  p  =  0;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    2;    ++p)    {    For(int  p  =  0;  p  <  2;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	30	None	add
151	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  int  p  =  0;  p  <  2;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  int  p  =  0;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    2;    ++p)    {    int  p  =  0;  p  <  2;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	30	None	add
152	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  (int  p  =  0;  p  <  2;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  (int  p  =  0;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    2;    ++p)    {    (int  p  =  0;  p  <  2;  ++p)  {	  	non-compiled	[CE]  ')'  expected	30	None	add
153	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    (int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
154	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    (int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
155	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ;  ++p)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    for(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	44	None	replace
156	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltQ[1]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[1]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[1]  =  Math.sqrt(ltQ[1]);	  ltI[1]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	91	None	replace
157	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
158	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
159	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
160	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
161	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
162	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
163	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	68	None	add
164	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length;  p  >=  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    For(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	7	replace
165	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  >=  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  >=  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    For(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	33	7	replace
166	[BUG]  [BUGGY]  For(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    For(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	33	None	replace
167	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	72	4	add
168	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	72	4	add
169	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LtI	72	None	add
170	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	72	4	add
171	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	72	4	add
172	[BUG]  [BUGGY]  for(int  p  =  ltQ[i];  p  <  0;  ++p)  {  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ[i];  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ[i];  p  <  0;  ++p)  {	  for(int    p    =    ltQ;    p    <    0;    ++p)    {    	non-compiled	[CE]  possible  loss  of  precision	106	None	replace
173	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltI.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltI.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	106	4	replace
174	[BUG]  [BUGGY]  for(int  p  =  ltI.length;  p  <  0;  ++p)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltI.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltI.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	106	4	replace
175	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	58	4	add
176	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	58	4	add
177	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	58	None	add
178	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1];  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1];	  	non-compiled	[CE]  ')'  expected	58	None	add
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	58	5	add
180	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	58	5	add
181	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	66	4	add
182	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	66	4	add
183	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	66	4	add
184	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	66	4	add
185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	66	4	add
186	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	66	4	add
187	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	66	4	add
188	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	66	4	add
189	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  order.length;  ++p)  {  [CE]  int  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  order.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  <  order.length;  ++p)  {	  for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    	non-compiled	[CE]  int  cannot  be  dereferenced	85	None	replace
190	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    for(int  p  =  order;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
191	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  For(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  For(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    For(int  p  =  order;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	84	None	add
192	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  ltQ.length;  ++p)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  int  p  =  order;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    int  p  =  order;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  >  expected	84	None	add
193	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  for(int  p  =  order;  p  <  ltQ.length);  ++p)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  for(int  p  =  order;  p  <  ltQ.length);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    for(int  p  =  order;  p  <  ltQ.length);  ++p)  {	  	non-compiled	[CE]  ';'  expected	84	None	add
194	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  ltQ.length;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    (int  p  =  order;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  ')'  expected	84	None	add
195	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse  +  1);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
196	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue(),  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue(),  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i].doubleValue(),  inverse);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
197	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  i  -  1;  p  <  q;  ++p)  {	  for(int    p    =    order    -    1;    p    <    q;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	7	replace
198	[BUG]  [BUGGY]  for(int  p  =  i  -  1;  p  <  q;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  i  -  1;  p  <  q;  ++p)  {	  for(int    p    =    order    -    1;    p    <    q;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	19	7	replace
199	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
200	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p!=  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p!=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    for(int  p  =  0;  p!=  ltQ.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
201	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p  >>  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p  >>  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    for(int  p  =  0;  p  >>  ltQ.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
202	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p  ==  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  for(int  p  =  0;  p  ==  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    for(int  p  =  0;  p  ==  ltQ.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
203	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  For(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  For(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    For(int  p  =  0;  p  >=  ltQ.length;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	104	None	add
204	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[p];	  ltI[p]    -=    ltI[q]    *    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
205	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltQ[q]  *  ltI[p];	  ltI[p]    -=    ltI[q]    *    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
206	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]).doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]).doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i]).doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
207	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  for(int  p  =  1;  p  <  q;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  for(int  p  =  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    q;    ++p)    {    for(int  p  =  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
208	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  For(int  p  =  1;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  For(int  p  =  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    q;    ++p)    {    For(int  p  =  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	117	None	add
209	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  for(int  p  =  1;  p  <  q);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  for(int  p  =  1;  p  <  q);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    q;    ++p)    {    for(int  p  =  1;  p  <  q);  ++p)  {	  	non-compiled	[CE]  ';'  expected	117	None	add
210	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  int  p  =  1;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  int  p  =  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    q;    ++p)    {    int  p  =  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	117	None	add
211	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  (int  p  =  1;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  (int  p  =  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    q;    ++p)    {    (int  p  =  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  ')'  expected	117	None	add
212	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    for(int  p  =  1;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	39	None	add
213	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  For(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  For(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    For(int  p  =  1;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	39	None	add
214	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  for(int  p  =  1;  p  <  ltQ.length);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  for(int  p  =  1;  p  <  ltQ.length);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    for(int  p  =  1;  p  <  ltQ.length);  ++p)  {	  	non-compiled	[CE]  ';'  expected	39	None	add
215	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  (int  p  =  1;  p  <  ltQ.length;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  (int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    (int  p  =  1;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  ')'  expected	39	None	add
216	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  int  p  =  1;  p  <  ltQ.length;  ++p)  {  [CE]  >  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    int  p  =  1;  p  <  ltQ.length;  ++p)  {	  	non-compiled	[CE]  >  expected	39	None	add
217	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  i;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length;  p  <  i;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	32	4	replace
218	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  i;  ++p)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  i;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  <  i;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	32	4	replace
219	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
220	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
221	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
222	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	98	5	add
224	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	98	5	add
225	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
226	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[1]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
227	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  +  1);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
228	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedL[q  +  1];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedL[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedL[q  +  1];	  final    double[][]    ltQ    =    cachedL[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	78	None	replace
229	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedL[q],  inverse);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedL[q],  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedL[q],  inverse);	  final    double[][]    ltQ    =    cachedL[q];    	non-compiled	[CE]  ';'  expected	78	None	replace
230	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  for(int  p  =  0;  p  <  q;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  for(int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    q;    ++p)    {    for(int  p  =  0;  p  <  q;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
231	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  For(int  p  =  0;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  For(int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    q;    ++p)    {    For(int  p  =  0;  p  <  q;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
232	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  0;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    q;    ++p)    {    (int  p  =  0;  p  <  q;  ++p)  {	  	non-compiled	[CE]  ')'  expected	16	None	add
233	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  +  1);	  ltI[i]    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
234	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  *  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  *  inverse);	  ltI[i]    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
235	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  -  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  -  1);	  ltI[i]    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
236	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltI.length;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    final    double[]    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
237	[BUG]  [BUGGY]  final  double[]  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    final    double[]    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
238	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  0;  ++p)  {  final  double[]  p  =  1;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  0;  ++p)  {  final  double[]  p  =  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  0;  ++p)  {  final  double[]  p  =  1;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    final    double[]    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
239	[BUG]  [BUGGY]  double  p  =  Math.max(ltQ,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(ltQ,  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(ltQ,  inverse);	  double    p    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
240	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  0);	  double    p    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
241	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
242	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
243	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
244	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
245	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
246	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
247	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
248	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	56	5	add
249	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]  *  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[0]  *  inverse);	  ltI[0]    =    Math.sqrt(ltQ[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	90	None	replace
250	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	93	4	add
251	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	93	4	add
252	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	93	4	add
253	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	93	4	add
254	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltY[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [CE]  cannot  find  symbol  ltY  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltY[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltY[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	non-compiled	[CE]  cannot  find  symbol  ltY	93	None	add
255	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	93	5	add
256	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	93	5	add
257	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue()  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i].doubleValue()  +  1);	  double    p    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
258	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[0].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[0].doubleValue());  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[0].doubleValue());	  double    p    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
259	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue()  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue()  *  inverse);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i].doubleValue()  *  inverse);	  double    p    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
260	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  for(int  p  =  1;  p  <  2;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  for(int  p  =  1;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    2;    ++p)    {    for(int  p  =  1;  p  <  2;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	127	None	add
261	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  For(int  p  =  1;  p  <  2;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  For(int  p  =  1;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    2;    ++p)    {    For(int  p  =  1;  p  <  2;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	127	None	add
262	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  int  p  =  1;  p  <  2;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  int  p  =  1;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    2;    ++p)    {    int  p  =  1;  p  <  2;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	127	None	add
263	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  (int  p  =  1;  p  <  2;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  (int  p  =  1;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    2;    ++p)    {    (int  p  =  1;  p  <  2;  ++p)  {	  	non-compiled	[CE]  ')'  expected	127	None	add
264	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[i]  =  Math.sqrt(ltQ[i].doubleValue());	  LtI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
265	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  +  1);	  LtI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
266	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  -  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[i]  =  Math.sqrt(ltI[i].doubleValue()  -  1);	  LtI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	111	None	replace
267	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  lJI);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  lJI);	  ltI[i]    =    Math.sqrt(ltQ[i]    *    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
268	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse  +  1);	  ltI[i]    =    Math.sqrt(ltQ[i]    *    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
269	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  1);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  1);	  ltI[i]    =    Math.sqrt(ltQ[i]    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length  -  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltQ.length  -  1;  ++p)  {	  for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	2	5	replace
271	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length  -  1;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length  -  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length  -  1;  ++p)  {	  for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	2	5	replace
272	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ[p];  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltQ[p];  ++p)  {	  for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	2	4	replace
273	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ[p];  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ[p];  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ[p];  ++p)  {	  for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	2	4	replace
274	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ[p].length;  ++p)  {  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ[p].length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ[p].length;  ++p)  {	  for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    	non-compiled	[CE]  double  cannot  be  dereferenced	2	None	replace
275	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[q];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[q];	  final    double[][]    ltQ    =    ltData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
276	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedL.cachedTData[q];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedL.cachedTData[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedL.cachedTData[q];	  final    double[][]    ltQ    =    cachedTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
277	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedTData[ltQ];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedTData[ltQ];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedTData[ltQ];	  final    double[][]    ltQ    =    cachedTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
278	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[0];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[0];	  final    double[][]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
279	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[q]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[q]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[q]  *  inverse;	  final    double[][]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
280	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	52	2	add
281	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	52	2	add
282	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	52	5	add
283	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	52	5	add
284	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	52	None	add
285	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	52	5	add
286	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	52	5	add
287	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  3;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  3;  p  <  order;  ++p)  {	  for(int    p    =    2;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	42	5	replace
288	[BUG]  [BUGGY]  for(int  p  =  3;  p  <  order;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  3;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  3;  p  <  order;  ++p)  {	  for(int    p    =    2;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	42	5	replace
289	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltQ[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltQ[i];	  final    double[]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
290	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltQ[i]  *  inverse;	  final    double[]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
291	[BUG]  [BUGGY]  For(int  p  =  order;  p  <  0;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    For(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  '.class'  expected	45	None	replace
292	[BUG]  [BUGGY]  For(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  order;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    For(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  '.class'  expected	45	None	replace
293	[BUG]  [BUGGY]  ltI[i]  =  Math.pow(10.0,  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.pow(10.0,  ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.pow(10.0,  ltQ[i]);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
294	[BUG]  [BUGGY]  ((  double[])ltQ).doubleValue()  *  inverse;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ((  double[])ltQ).doubleValue()  *  inverse;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	((  double[])ltQ).doubleValue()  *  inverse;	  ((    double[])ltQ).doubleValue();    	non-compiled	[CE]  not  a  statement	114	None	replace
295	[BUG]  [BUGGY]  ((  double[])ltQ).doubleValue()  +  1;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ((  double[])ltQ).doubleValue()  +  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	((  double[])ltQ).doubleValue()  +  1;	  ((    double[])ltQ).doubleValue();    	non-compiled	[CE]  not  a  statement	114	None	replace
296	[BUG]  [BUGGY]  ((  double[])ltQ).doubleValue()  /  2.0;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ((  double[])ltQ).doubleValue()  /  2.0;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	((  double[])ltQ).doubleValue()  /  2.0;	  ((    double[])ltQ).doubleValue();    	non-compiled	[CE]  not  a  statement	114	None	replace
297	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	70	4	add
298	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	70	4	add
299	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
300	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
301	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
302	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
303	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	70	5	add
304	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	70	5	add
305	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltTData[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltTData[i]  *  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltTData[i]  *  inverse);	  ltI[i]    =    Math.sqrt(ltTData[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
306	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  inverse,  maxDelta);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  inverse,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
307	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[i]  =  Math.sqrt(ltQ[i]);	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltY[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
308	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltY[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltY[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltY[i]);	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltY[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	133	None	replace
309	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    for(int  p  =  ltQ.length;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
310	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  For(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  For(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    For(int  p  =  ltQ.length;  p  <  0;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	7	None	add
311	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    int  p  =  ltQ.length;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
312	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    (int  p  =  ltQ.length;  p  <  0;  ++p)  {	  	non-compiled	[CE]  ')'  expected	7	None	add
313	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  for(int  p  =  ltQ.length;  p  <  0);  ++p)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  for(int  p  =  ltQ.length;  p  <  0);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    for(int  p  =  ltQ.length;  p  <  0);  ++p)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
314	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  for(int  p  =  2;  p  <  order;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  for(int  p  =  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    order;    ++p)    {    for(int  p  =  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	41	None	add
315	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  For(int  p  =  2;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  For(int  p  =  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    order;    ++p)    {    For(int  p  =  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	41	None	add
316	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  for(int  p  =  2;  p  <  order);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  for(int  p  =  2;  p  <  order);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    order;    ++p)    {    for(int  p  =  2;  p  <  order);  ++p)  {	  	non-compiled	[CE]  ';'  expected	41	None	add
317	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  int  p  =  2;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  int  p  =  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    order;    ++p)    {    int  p  =  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	41	None	add
318	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  (int  p  =  2;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  (int  p  =  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    2;    p    <    order;    ++p)    {    (int  p  =  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  ')'  expected	41	None	add
319	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltI.length;    ++p)    {    for(int  p  =  0;  p  <  ltI.length;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
320	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  For(int  p  =  0;  p  <  ltI.length;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  For(int  p  =  0;  p  <  ltI.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltI.length;    ++p)    {    For(int  p  =  0;  p  <  ltI.length;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
321	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  int  p  =  0;  p  <  ltI.length;  ++p)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  int  p  =  0;  p  <  ltI.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltI.length;    ++p)    {    int  p  =  0;  p  <  ltI.length;  ++p)  {	  	non-compiled	[CE]  >  expected	3	None	add
322	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  (int  p  =  0;  p  <  ltI.length;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  (int  p  =  0;  p  <  ltI.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltI.length;    ++p)    {    (int  p  =  0;  p  <  ltI.length;  ++p)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
323	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  =  ltQ.length;  ++p)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  =  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  =  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    =    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
324	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ,  lJI);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ,  lJI);	  ltI[i]    =    Math.min(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
325	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ  +  1);	  ltI[i]    =    Math.min(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
326	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
327	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  i;  ++p)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  i;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  i;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	35	None	replace
328	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	35	None	replace
329	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  }  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  }	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
330	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    for(int  p  =  ltQ.length;  p  <  q;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
331	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  For(int  p  =  ltQ.length;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  For(int  p  =  ltQ.length;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    For(int  p  =  ltQ.length;  p  <  q;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	139	None	add
332	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  for(int  p  =  ltQ.length;  p  <  q);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  for(int  p  =  ltQ.length;  p  <  q);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    for(int  p  =  ltQ.length;  p  <  q);  ++p)  {	  	non-compiled	[CE]  ';'  expected	139	None	add
333	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  int  p  =  ltQ.length;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  int  p  =  ltQ.length;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    int  p  =  ltQ.length;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	139	None	add
334	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  (int  p  =  ltQ.length;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  (int  p  =  ltQ.length;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    (int  p  =  ltQ.length;  p  <  q;  ++p)  {	  	non-compiled	[CE]  ')'  expected	139	None	add
335	[BUG]  [BUGGY]  double  p  =  Math.pow(10.0,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.pow(10.0,  ltQ);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.pow(10.0,  ltQ);	  double    p    =    Math.sqrt(ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
336	[BUG]  [BUGGY]  double  p  =  Math.pow(10,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.pow(10,  ltQ);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.pow(10,  ltQ);	  double    p    =    Math.sqrt(ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	116	None	replace
337	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  3;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  3;  ++p)  {	  for(int    p    =    0;    p    <    2;    ++p)    {    	compilable	  [FE]  AssertionError  	31	5	replace
338	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  3;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  3;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  3;  ++p)  {	  for(int    p    =    0;    p    <    2;    ++p)    {    	compilable	  [FE]  AssertionError  	31	5	replace
339	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    q;    ++p)    {    for(int  p  =  order  -  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
340	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  For(int  p  =  order  -  1;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  For(int  p  =  order  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    q;    ++p)    {    For(int  p  =  order  -  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	18	None	add
341	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  for(int  p  =  order  -  1;  p  <  q);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  for(int  p  =  order  -  1;  p  <  q);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    q;    ++p)    {    for(int  p  =  order  -  1;  p  <  q);  ++p)  {	  	non-compiled	[CE]  ';'  expected	18	None	add
342	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  int  p  =  order  -  1;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  int  p  =  order  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    q;    ++p)    {    int  p  =  order  -  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	18	None	add
343	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  (int  p  =  order  -  1;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  (int  p  =  order  -  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    q;    ++p)    {    (int  p  =  order  -  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  ')'  expected	18	None	add
344	[BUG]  [BUGGY]  For(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  1;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    For(int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	21	None	replace
345	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
346	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[q];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltI[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[i]  *  ltI[q];	  ltQ[p]    -=    ltI[q]    *    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	75	None	replace
347	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
348	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltI.length;  ++p)  {  final  double[]  ltQ  =  lTData[q];	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
349	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double[]  ltQ  =  lTData[q];	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
350	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ;  ++p)  {  final  double[]  ltQ  =  lTData[p];  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ;  ++p)  {  final  double[]  ltQ  =  lTData[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ;  ++p)  {  final  double[]  ltQ  =  lTData[p];	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	107	None	replace
351	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  int  p  =  order;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  final  int  p  =  order;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    (int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	48	None	replace
352	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  order;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  order;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    (int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
353	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double  p  =  order;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double  p  =  order;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  final  double  p  =  order;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    (int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	48	None	replace
354	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ[p];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ[p];	  for(int    p    =    0;    p    <    order;    ++p)    {    int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ']'  expected	28	None	replace
355	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  int  p  =  0;  p  <  order.length;  ++p)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  int  p  =  0;  p  <  order.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order.length;  ++p)  {  int  p  =  0;  p  <  order.length;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	28	None	replace
356	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	28	None	replace
357	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[i];	  final    double[][]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
358	[BUG]  [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  for(int  p  =  i;  p  <  q;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  for(int  p  =  i;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    i;    p    <    q;    ++p)    {    for(int  p  =  i;  p  <  q;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
359	[BUG]  [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  For(int  p  =  i;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  For(int  p  =  i;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    i;    p    <    q;    ++p)    {    For(int  p  =  i;  p  <  q;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	119	None	add
360	[BUG]  [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  for(int  p  =  i;  p  <  q);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  for(int  p  =  i;  p  <  q);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    i;    p    <    q;    ++p)    {    for(int  p  =  i;  p  <  q);  ++p)  {	  	non-compiled	[CE]  ';'  expected	119	None	add
361	[BUG]  [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  int  p  =  i;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  int  p  =  i;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    i;    p    <    q;    ++p)    {    int  p  =  i;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	119	None	add
362	[BUG]  [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  (int  p  =  i;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  (int  p  =  i;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    i;    p    <    q;    ++p)    {    (int  p  =  i;  p  <  q;  ++p)  {	  	non-compiled	[CE]  ')'  expected	119	None	add
363	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  ltQ[2]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  ltQ[2]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltI[1]  +  ltQ[2]);	  ltI[0]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
364	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  i;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    i;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	120	5	replace
365	[BUG]  [BUGGY]  for(int  p  =  i;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  i;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    i;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	120	5	replace
366	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[p];	  ltI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
367	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltJI[p];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltJI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[p]  *  ltJI[p];	  ltI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
368	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltI[p];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltI[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[q]  *  ltI[p];	  ltI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
369	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
370	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  For(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  For(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    For(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	80	None	add
371	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  1;  p  <  order);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length  -  1;  p  <  order);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    for(int  p  =  ltQ.length  -  1;  p  <  order);  ++p)  {	  	non-compiled	[CE]  ';'  expected	80	None	add
372	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	80	None	add
373	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  (int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  (int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    (int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  ')'  expected	80	None	add
374	[BUG]  [BUGGY]  final  double  p  =  0;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double  p  =  0;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double  p  =  0;  p  <  order;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    final    double    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	125	None	replace
375	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  final  double  p  =  0;  p  <  order.length;  ++p)  {  [CE]  >  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order.length;  ++p)  {  final  double  p  =  0;  p  <  order.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order.length;  ++p)  {  final  double  p  =  0;  p  <  order.length;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    final    double    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	125	None	replace
376	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  final  double  p  =  0;  p  <  2;  ++p)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  final  double  p  =  0;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  2;  ++p)  {  final  double  p  =  0;  p  <  2;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    final    double    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
377	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI,  inverse);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
378	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI,  maxDelta);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
379	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue()  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i].doubleValue()  -  1);	  double    p    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	131	None	replace
380	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  cannot  find  symbol	72	None	add
381	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	72	5	add
382	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[0]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	72	5	add
383	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  for(int  p  =  0;  p  <  ltI.length);  ++p)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  for(int  p  =  0;  p  <  ltI.length);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    ltI.length;    ++p)    {    for(int  p  =  0;  p  <  ltI.length);  ++p)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
384	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	58	5	add
385	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	  	compilable	  [FE]  AssertionError  	58	5	add
386	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltQ.length;  p++)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	32	5	replace
387	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	32	5	replace
388	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	54	4	add
389	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	54	4	add
390	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  final  double  p  =  ltQ[p];  [CE]  variable  p  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  final  double  p  =  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {  final  double  p  =  ltQ[p];	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  variable  p  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	36	None	replace
391	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  double  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  double  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  double  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
392	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  final  double  p  =  ltQ[p].length;  ++p)  {  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  final  double  p  =  ltQ[p].length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {  final  double  p  =  ltQ[p].length;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  ';'  expected	36	None	replace
393	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  0;  p  <  ltQ[p];  ++p)  {  [CE]  ')'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  0;  p  <  ltQ[p];  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  0;  p  <  ltQ[p];  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
394	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ  +  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  ltQ  +  1);	  double    p    =    Math.max(relativeSymmetryThreshold,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	132	None	replace
395	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  inverse,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  inverse,  lJI);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  inverse,  lJI);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    lJI);    	non-compiled	[CE]  class,  interface,  or  enum  expected	65	None	replace
396	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[1]);    LtI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	56	None	add
397	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  final  double[]  ltQ  =  ltQ.length;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  final  double[]  ltQ  =  ltQ.length;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    q;    ++p)    {    final  double[]  ltQ  =  ltQ.length;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	139	None	add
398	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[q];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltTData[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltTData[q];	  final    double[]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
399	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q-1];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltData[q-1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltData[q-1];	  final    double[]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
400	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltTData[q];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltTData[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltTData[q];	  final    double[][]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
401	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];  }  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];  }  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];  }	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	107	None	replace
402	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[p];	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
403	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  final  double  p  =  1;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  final  double  p  =  1;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    q;    ++p)    {    final  double  p  =  1;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	117	None	add
404	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  >=  1;  ++p)  {	  for(int    p    =    0;    p    <    1;    ++p)    {    	compilable	  [FE]  AssertionError  	136	4	replace
405	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  1;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  >=  1;  ++p)  {	  for(int    p    =    0;    p    <    1;    ++p)    {    	compilable	  [FE]  AssertionError  	136	4	replace
406	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  final  double  p  =  0;  p  <  1;  ++p)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  final  double  p  =  0;  p  <  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    1;    ++p)    {    final  double  p  =  0;  p  <  1;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	135	None	add
407	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  3;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  3;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	83	5	replace
408	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  3;  p  <  order;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  3;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  3;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	83	5	replace
409	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  3;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  3;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	40	5	replace
410	[BUG]  [BUGGY]  for(int  p  =  3;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  3;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  3;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	40	5	replace
411	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p!=  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p!=  order;  ++p)  {	  for(int    p    =    1;    p    <    =    order;    ++p)    {    	compilable	  [FE]  AssertionError  	43	5	replace
412	[BUG]  [BUGGY]  for(int  p  =  1;  p!=  order;  ++p)  {  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p!=  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p!=  order;  ++p)  {	  for(int    p    =    1;    p    <    =    order;    ++p)    {    	compilable	  [FE]  AssertionError  	43	5	replace
413	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[2]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
414	[BUG]  [BUGGY]  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
415	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltI[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.log(ltI[i].doubleValue());  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.log(ltI[i].doubleValue());	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.log(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	69	None	replace
416	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	98	5	add
417	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	98	5	add
418	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[1]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[0]  =  Math.sqrt(ltQ[1]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
419	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[1]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltQ[1]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[0]  =  Math.sqrt(ltQ[1]);  ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	98	4	add
420	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[q  +  1];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltQ[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltQ[q  +  1];	  final    double[]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
421	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  >=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  >=  ltQ.length;  ++p)  {	  for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	105	4	replace
422	[BUG]  [BUGGY]  for(int  p  =  1;  p  >=  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  >=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  >=  ltQ.length;  ++p)  {	  for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	105	4	replace
423	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p!=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p!=  ltQ.length;  ++p)  {	  for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	105	5	replace
424	[BUG]  [BUGGY]  for(int  p  =  0;  p!=  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p!=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p!=  ltQ.length;  ++p)  {	  for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	105	5	replace
425	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltTData[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltTData[i];	  final    double[][]    ltQ    =    ltData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
426	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedT[q  +  1];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedT[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedT[q  +  1];	  final    double[][]    ltQ    =    cachedT[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
427	[BUG]  [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[q];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltQ[q]  *  ltI[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltQ[q]  *  ltI[q];	  ltI[p]    -=    ltI[q]    *    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	74	None	replace
428	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {  }  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {  }  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  int  p  =  0;  p  <  q;  ++p)  {  }	  for(int    p    =    order;    p    <    q;    ++p)    {    int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	46	None	replace
429	[BUG]  [BUGGY]  int  p  =  order;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	int  p  =  order;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	46	None	replace
430	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedTData[q-1];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedTData[q-1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedTData[q-1];	  final    double[][]    ltQ    =    cachedTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	100	None	replace
431	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  int  p  =  0;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  final  int  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    (int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	48	None	replace
432	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double  p  =  0;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  final  double  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    (int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	48	None	replace
433	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  final  double[]  ltQ  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  final  double[]  ltQ  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    final  double[]  ltQ  =  ltQ.length  -  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	80	None	add
434	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedTData[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedTData[i];	  final    double[][]    ltQ    =    cachedLT[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
435	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltI[1]  +  inverse);	  ltI[0]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
436	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p!=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  1;  p!=  0;  ++p)  {	  for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	81	7	replace
437	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p!=  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  1;  p!=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  1;  p!=  0;  ++p)  {	  for(int    p    =    ltQ.length    -    1;    p    <    order;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	81	7	replace
438	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltQ);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  ltQ);	  ltI[i]    =    Math.sqrt(ltI[i].doubleValue(),    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	62	None	replace
439	[BUG]  [BUGGY]  double  p  =  Math.max(inverse,  relativeSymmetryThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(inverse,  relativeSymmetryThreshold);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(inverse,  relativeSymmetryThreshold);	  double    p    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
440	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  double    p    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
441	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  +  inverse);	  ltI[i]    =    Math.sqrt(ltQ[i]    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
442	[BUG]  [BUGGY]  For(int  p  =  0;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    For(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  '.class'  expected	45	None	replace
443	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  Integer  p  =  0;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  Integer  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  Integer  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    For(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  >  expected	45	None	replace
444	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  ltQ;  ++p)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  ltQ;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  ltQ;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	23	None	replace
445	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  n;  ++p)  {  [CE]  cannot  find  symbol  n  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  n;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  n;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    for(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  cannot  find  symbol  n	44	None	replace
446	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  i;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  i;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	44	4	replace
447	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  i;  ++p)  {  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  i;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  i;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	44	4	replace
448	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  q  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  q  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
449	[BUG]  [BUGGY]  for(int  p  =  q  -  1;  p  <  0;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  q  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  q  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
450	[BUG]  [BUGGY]  for(int  p  =  ltQ  -  1;  p  <  0;  ++p)  {  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	6	None	replace
451	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  i  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	7	replace
452	[BUG]  [BUGGY]  for(int  p  =  i  -  1;  p  <  0;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  i  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  i  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order    -    1;    p    <    0;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	6	7	replace
453	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]  +  2);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i]  +  2);	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]    +    1);    	non-compiled	[CE]  class,  interface,  or  enum  expected	73	None	replace
454	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltTData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltTData[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltTData[i];	  final    double[]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
455	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[0];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltQ[0];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltQ[0];	  final    double[]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
456	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  final  double[]  p  =  1;  p  <  2;  ++p)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  final  double[]  p  =  1;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    2;    ++p)    {    final  double[]  p  =  1;  p  <  2;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	127	None	add
457	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  ltQ);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  ltQ);	  ltI[i]    =    Math.sqrt(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
458	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  lJI);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  lJI);	  ltI[i]    =    Math.sqrt(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
459	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[0]);  LtI[0]  =  Math.sqrt(ltI[0]);	          ltI[0]    =    Math.sqrt(ltI[0]);    LtI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	124	None	replace
460	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  For(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  For(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  For(int  p  =  0;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    For(int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	21	None	replace
461	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[q]  +  1;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[q]  +  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltQ[q]  +  1;	  ltQ[p]    -=    ltQ[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
462	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[q-1];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[q-1];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltQ[q-1];	  ltQ[p]    -=    ltQ[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
463	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  q  -  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  q  -  1;  p  <  order;  ++p)  {	  for(int    p    =    order    -    1;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	19	5	replace
464	[BUG]  [BUGGY]  for(int  p  =  q  -  1;  p  <  order;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  q  -  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  q  -  1;  p  <  order;  ++p)  {	  for(int    p    =    order    -    1;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	19	5	replace
465	[BUG]  [BUGGY]  ((  double[])ltQ).doubleValue()  +  inverse;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ((  double[])ltQ).doubleValue()  +  inverse;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	((  double[])ltQ).doubleValue()  +  inverse;	  ((    double[])ltQ).doubleValue();    	non-compiled	[CE]  not  a  statement	114	None	replace
466	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedL[ltQ]  +  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedL[ltQ]  +  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedL[ltQ]  +  inverse;	  final    double[][]    ltQ    =    cachedLT[ltQ];    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
467	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltTData[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltTData[i].doubleValue());  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltTData[i].doubleValue());	  ltI[i]    =    Math.sqrt(ltTData[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	108	None	replace
468	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ[p];  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ[p];  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ[p];  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    For(int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
469	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ[p];  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  For(int  p  =  0;  p  <  ltQ[p];	  for(int    p    =    0;    p    <    order;    ++p)    {    For(int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	26	None	replace
470	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  final  double[]  p  =  order  -  1;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  final  double[]  p  =  order  -  1;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    0;    ++p)    {    final  double[]  p  =  order  -  1;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
471	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  +  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  +  inverse);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[1]  +  inverse);	  ltI[0]    =    Math.sqrt(ltQ[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
472	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[0]  =  Math.sqrt(ltI[1]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
473	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	70	None	add
474	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	non-compiled	[CE]  cannot  find  symbol	70	None	add
475	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[1]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[1]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[1]);	  double    p    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
476	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i]  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[i]  -  1);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i]  -  1);	  double    p    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
477	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  int  p  =  0;  p  <  ltQ[p];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  int  p  =  0;  p  <  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {  int  p  =  0;  p  <  ltQ[p];	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  ']'  expected	35	None	replace
478	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {  int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
479	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p];  ++p)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p];  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p];  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    (int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
480	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p];  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  (int  p  =  0;  p  <  ltQ[p];	  for(int    p    =    0;    p    <    order;    ++p)    {    (int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	29	None	replace
481	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  double[]  ltQ  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  final  double[]  ltQ  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    final  double[]  ltQ  =  ltQ.length;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	7	None	add
482	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  LtI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  LtI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    LtI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	93	None	add
483	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  >=  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  >=  2;  ++p)  {	  for(int    p    =    1;    p    <    2;    ++p)    {    	compilable	  [FE]  AssertionError  	128	4	replace
484	[BUG]  [BUGGY]  for(int  p  =  1;  p  >=  2;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  >=  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  >=  2;  ++p)  {	  for(int    p    =    1;    p    <    2;    ++p)    {    	compilable	  [FE]  AssertionError  	128	4	replace
485	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  ==  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length;  p  ==  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	8	4	replace
486	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  ==  0;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  ==  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  ==  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	8	4	replace
487	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p++)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p++)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p++)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
488	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
489	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  ltQ[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  ltQ[i].doubleValue());  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  ltQ[i].doubleValue());	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	112	None	replace
490	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
491	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.log(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	68	5	add
492	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    (int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
493	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  final  double[]  ltQ  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  final  double[]  ltQ  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length    -    2;    p    <    order;    ++p)    {    final  double[]  ltQ  =  ltQ.length  -  2;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	82	None	add
494	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[q];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[q];	  ltI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
495	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[i];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[i];	  ltI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
496	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  [CE]  class,  interface,  or  enum  expected  [FE]                          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[p]  *  ltQ[0];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[p]  *  ltQ[0];	  ltI[p]    -=    ltI[p]    *    ltI[p];    	non-compiled	[CE]  class,  interface,  or  enum  expected	76	None	replace
497	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    LtI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	66	None	add
498	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.qrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);	  	non-compiled	[CE]  cannot  find  symbol	66	None	add
499	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltQ[i],  ltI[i]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltQ[i],  ltI[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltQ[i],  ltI[i]);	  ltI[i]    =    Math.min(ltI[i],    ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
500	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double  p  =  0;  p  <  ltQ[p];  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double  p  =  0;  p  <  ltQ[p];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double  p  =  0;  p  <  ltQ[p];	  for(int    p    =    0;    p    <    order;    ++p)    {    final    double    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ']'  expected	125	None	replace
501	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
502	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  [CE]  cannot  find  symbol  p  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  cannot  find  symbol  p	94	None	replace
503	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    final    double[]    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
504	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  2)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    final    double[]    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ';'  expected	110	None	replace
505	[BUG]  [BUGGY]  ltI[i]  =  Math.cos(ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.cos(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.cos(ltQ[i]);	  ltI[i]    =    Math.log(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
506	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [CE]  not  a  statement  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    int  p  =  0;  p  >=  ltQ.length;  ++p)  {	  	non-compiled	[CE]  not  a  statement	104	None	add
507	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  (int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  (int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    >=    ltQ.length;    ++p)    {    (int  p  =  0;  p  >=  ltQ.length;  ++p)  {	  	non-compiled	[CE]  ')'  expected	104	None	add
508	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length  +  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltI.length  +  1;  ++p)  {	  for(int    p    =    0;    p    <    ltI.length;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	7	replace
509	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length  +  1;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltI.length  +  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltI.length  +  1;  ++p)  {	  for(int    p    =    0;    p    <    ltI.length;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	4	7	replace
510	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.log(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	97	None	replace
511	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  else  {  [CE]  cannot  find  symbol  p  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  else  {  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  else  {	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.log(ltQ[i]);    	non-compiled	[CE]  cannot  find  symbol  p	97	None	replace
512	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  +  2);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i].doubleValue()  +  2);	  ltI[i]    =    Math.sqrt(ltQ[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
513	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length  +  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltQ.length  +  1;  ++p)  {	  for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
514	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length  +  1;  ++p)  {  [FE]  ArrayIndexOutOfBoundsException  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length  +  1;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length  +  1;  ++p)  {	  for(int    p    =    0;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	2	7	replace
515	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ[p];  }  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ[p];  }  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  int  p  =  0;  p  <  ltQ[p];  }	  for(int    p    =    0;    p    <    order;    ++p)    {    int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  ']'  expected	28	None	replace
516	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ  +  1);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
517	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  maxDelta);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltQ,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
518	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  lJI,  maxDelta);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  lJI,  maxDelta);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    maxDelta);    	non-compiled	[CE]  class,  interface,  or  enum  expected	64	None	replace
519	[BUG]  [BUGGY]  for(int  p  =  ltQ;  p  >=  0;  ++p)  {  [CE]  incompatible  types  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ;  p  >=  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ;  p  >=  0;  ++p)  {	  for(int    p    =    ltQ;    p    <    0;    ++p)    {    	non-compiled	[CE]  incompatible  types	106	None	replace
520	[BUG]  [BUGGY]  For(int  p  =  0;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  0;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    for(int    p    =    1;    p    <    order);    ++p)    {    	non-compiled	[CE]  '.class'  expected	22	None	replace
521	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  For(int  p  =  0;  p  <  3;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  For(int  p  =  0;  p  <  3;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  2;  ++p)  {  For(int  p  =  0;  p  <  3;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    For(int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  '.class'  expected	12	None	replace
522	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  i;  ++p)  {  for(int  p  =  0;  p  <  i;  ++p)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  i;  ++p)  {  for(int  p  =  0;  p  <  i;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  i;  ++p)  {  for(int  p  =  0;  p  <  i;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    for(int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
523	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[q-1];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[q-1];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[q-1];	  ltI[p]    -=    ltI[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
524	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	52	5	add
525	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	52	5	add
526	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	85	4	replace
527	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  ltQ.length;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    order;    p    <    ltQ.length;    ++p)    {    	compilable	  [FE]  AssertionError  	85	4	replace
528	[BUG]  [BUGGY]  for(int  p  =  q;  p  <  ltQ;  ++p)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  q;  p  <  ltQ;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  q;  p  <  ltQ;  ++p)  {	  for(int    p    =    ltQ;    p    <    q;    ++p)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	121	None	replace
529	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  ltQ[1]);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]  +  ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltI[1]  +  ltQ[1]);	  ltI[0]    =    Math.sqrt(ltI[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	92	None	replace
530	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltJI);	  ltI[i]    =    Math.sqrt(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	138	None	replace
531	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  Math.sqrt(ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltQ[i]  *  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltQ[i]  *  Math.sqrt(ltQ[i]);	  final    double[]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	61	None	replace
532	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[i]  *  Math.sqrt(ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[i]  *  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[i]  *  Math.sqrt(ltQ[i]);	  final    double[][]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
533	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[i]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[i]  *  inverse;	  final    double[][]    ltQ    =    ltI[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
534	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[j];  [CE]  class,  interface,  or  enum  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[j];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltQ[j];	  ltQ[p]    -=    ltQ[q]    *    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	115	None	replace
535	[BUG]  [BUGGY]  For(int  p  =  ltQ;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  ltQ;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  ltQ;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    For(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  '.class'  expected	45	None	replace
536	[BUG]  [BUGGY]  For(int  p  =  order;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  order;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    For(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  '.class'  expected	45	None	replace
537	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
538	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  ltQ.length;  p  <  0);  ++p)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  ltQ.length;  p  <  0);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  p++)  {  (int  p  =  ltQ.length;  p  <  0);  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int    p    =    ltQ.length;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	36	None	replace
539	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2)  {  For(int  p  =  0;  p  <  ltQ.length)  {  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2)  {  For(int  p  =  0;  p  <  ltQ.length)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  2)  {  For(int  p  =  0;  p  <  ltQ.length)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    For(int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ';'  expected	12	None	replace
540	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[j];  [CE]  class,  interface,  or  enum  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[j];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[j];	  ltI[p]    -=    ltI[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	77	None	replace
541	[BUG]  [BUGGY]  For(int  p  =  1;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  For(int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	For(int  p  =  1;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    For(int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  '.class'  expected	21	None	replace
542	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  ((  int  p  =  order  -  1;  p  <  0;  ++p))  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  ((  int  p  =  order  -  1;  p  <  0;  ++p))  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order    -    1;    p    <    0;    ++p)    {    ((  int  p  =  order  -  1;  p  <  0;  ++p))  {	  	non-compiled	[CE]  ')'  expected	5	None	add
543	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  +  ltQ[1]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]  +  ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[1]  +  ltQ[1]);	  ltI[0]    =    Math.sqrt(ltQ[1]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	103	None	replace
544	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltData[q]  *  inverse.doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltData[q]  *  inverse.doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltData[q]  *  inverse.doubleValue();	  final    double[][]    ltQ    =    lTData[q]    *    inverse;    	non-compiled	[CE]  class,  interface,  or  enum  expected	123	None	replace
545	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltJI[i];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltJI[i];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltJI[i];	  final    double[][]    ltQ    =    ltData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	122	None	replace
546	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  for(int  p  =  ltQ.length);  p  <  0;  ++p)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  for(int  p  =  ltQ.length);  p  <  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    0;    ++p)    {    for(int  p  =  ltQ.length);  p  <  0;  ++p)  {	  	non-compiled	[CE]  ';'  expected	7	None	add
547	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  p  =  1;  p  <  2;  ++p)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  p  =  1;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    2;    ++p)    {    p  =  1;  p  <  2;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	127	None	add
548	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  ltQ[i]).doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i],  ltQ[i]).doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i],  ltQ[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i]).doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
549	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltQ[i]).doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[i]  =  Math.sqrt(ltQ[i]).doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[i]  =  Math.sqrt(ltQ[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i]).doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	95	None	replace
550	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltQ[i],  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltQ[i],  ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltQ[i],  ltQ[i]);	  ltI[i]    =    Math.min(ltI[i],    ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
551	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
552	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];	  for(int    p    =    order;    p    <    q;    ++p)    {    final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  variable  ltQ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	107	None	replace
553	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltData[q  +  1];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltData[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltData[q  +  1];	  final    double[][]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
554	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltJI[q];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltJI[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltJI[q];	  final    double[][]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	86	None	replace
555	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  p  =  0;  p  <  2;  ++p)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  p  =  0;  p  <  2;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    2;    ++p)    {    p  =  0;  p  <  2;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	30	None	add
556	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[i]  =  Math.sqrt(ltI[i]).doubleValue();	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  class,  interface,  or  enum  expected	102	None	replace
557	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]),  ltQ).doubleValue();  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i]),  ltQ).doubleValue();  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i]),  ltQ).doubleValue();	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i]).doubleValue();    	non-compiled	[CE]  ';'  expected	102	None	replace
558	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    (int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
559	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  0;  p  <  q);  ++p)  {  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  0;  p  <  q);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {  (int  p  =  0;  p  <  q);  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    (int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  ')'  expected	48	None	replace
560	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltJI[q];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltJI[q];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltJI[q];	  final    double[]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	89	None	replace
561	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  for(int  p  =  0;  p  <  q);  ++p)  {  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  for(int  p  =  0;  p  <  q);  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    q;    ++p)    {    for(int  p  =  0;  p  <  q);  ++p)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
562	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	54	4	add
563	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	54	4	add
564	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	54	4	add
565	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	54	4	add
566	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
567	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  throw  new  IllegalArgumentException( " ");  }	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	71	None	replace
568	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  ltI[i]  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  ltI[i]  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  ltI[i]	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  not  a  statement	71	None	replace
569	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  3;  ++p)  {  (int  p  =  order;  p  <  3;  ++p)  {  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  3;  ++p)  {  (int  p  =  order;  p  <  3;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  3;  ++p)  {  (int  p  =  order;  p  <  3;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    (int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ')'  expected	14	None	replace
570	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  else  {  for(int  j  =  0;  j  <  lt  [CE]  ';'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  else  {  for(int  j  =  0;  j  <  lt  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  }  else  {  for(int  j  =  0;  j  <  lt	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.log(ltQ[i]);    	non-compiled	[CE]  ';'  expected	97	None	replace
571	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]    +    1);    ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	non-compiled	[CE]  <identifier>  expected	72	None	add
572	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltQ[p]  -=  ltQ[i]  *  ltQ[q];  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[i]  *  ltQ[q];	  ltQ[p]    -=    ltQ[q]    *    ltQ[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	113	None	replace
573	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.sqrt(ltY[i]);  ltI[i]  =  Math.log(ltQ[i]);  [CE]  cannot  find  symbol  ltY  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);  ltI[i]  =  Math.sqrt(ltY[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.log(ltQ[i]);    ltI[i]  =  Math.sqrt(ltY[i]);  ltI[i]  =  Math.log(ltQ[i]);	  	non-compiled	[CE]  cannot  find  symbol  ltY	96	None	add
574	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	98	4	add
575	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[0]    =    Math.sqrt(ltQ[0]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[1]);	  	compilable	  [FE]  AssertionError  	98	4	add
576	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ[i].doubleValue());  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltQ[i].doubleValue());	          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	101	None	replace
577	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  1;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  1;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    (int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  ')'  expected	24	None	replace
578	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2)  {  final  double[]  p  =  0;  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2)  {  final  double[]  p  =  0;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  2)  {  final  double[]  p  =  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    final    double[]    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ';'  expected	110	None	replace
579	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltJI,  ltQ);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltJI,  ltQ);	  ltI[i]    =    Math.sqrt(ltI[i],    inverse,    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	63	None	replace
580	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	52	4	add
581	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	52	4	add
582	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	52	4	add
583	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	52	4	add
584	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  int  p  =  0;  p++)  {  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  int  p  =  0;  p++)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  2;  ++p)  {  int  p  =  0;  p++)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
585	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[i]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltData[i]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltData[i]  *  inverse;	  final    double[]    ltQ    =    ltData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
586	[BUG]  [BUGGY]  for(int  p  =  ltQ[i];  p  <  q;  ++p)  {  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  for(int  p  =  ltQ[i];  p  <  q;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ[i];  p  <  q;  ++p)  {	  for(int    p    =    ltQ;    p    <    q;    ++p)    {    	non-compiled	[CE]  possible  loss  of  precision	121	None	replace
587	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[q  +  1];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[q  +  1];	  final    double[][]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
588	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltQ[q-1];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  ltQ[q-1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltQ[q-1];	  final    double[][]    ltQ    =    ltI[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	87	None	replace
589	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltQ[i]);  [CE]  <identifier>  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltI[i].);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	non-compiled	[CE]  <identifier>  expected	70	None	add
590	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
591	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	70	4	add
592	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltQ[i],  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.min(ltQ[i],  ltQ);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltQ[i],  ltQ);	  ltI[i]    =    Math.min(ltI[i],    ltQ);    	non-compiled	[CE]  class,  interface,  or  enum  expected	109	None	replace
593	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q  +  1];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[]  ltQ  =  ltData[q  +  1];  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltData[q  +  1];	  final    double[]    ltQ    =    ltData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	88	None	replace
594	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  ltJI);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  ltJI);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  ltJI);	  ltI[i]    =    Math.sqrt(ltQ[i]    *    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
595	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse,  ltQ[i]);	  ltI[i]    =    Math.sqrt(ltQ[i]    *    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	49	None	replace
596	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedLT[ltQ]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  final  double[][]  ltQ  =  cachedLT[ltQ]  *  inverse;  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedLT[ltQ]  *  inverse;	  final    double[][]    ltQ    =    cachedLT[ltQ];    	non-compiled	[CE]  class,  interface,  or  enum  expected	79	None	replace
597	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltJ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [CE]  cannot  find  symbol  ltJ  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltJ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltQ[i]);        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltJ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);	  	non-compiled	[CE]  cannot  find  symbol  ltJ	93	None	add
598	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[0]);  ltI[1]  =  Math.sqrt(ltI[0]);	          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
599	[BUG]  [BUGGY]  int  p  =  0;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	int  p  =  0;  p  <  order;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    int    p    =    0;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	28	None	replace
600	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	58	4	add
601	[BUG]  [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);  ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[0]        =        Math.sqrt(ltI[0]);        ltI[1]    =    Math.sqrt(ltI[1]);    ltI[1]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	58	4	add
602	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	66	4	add
603	[BUG]  [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]          ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);  ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	                ltI[i]        =        Math.sqrt(ltI[i]);        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[0]  =  Math.sqrt(ltI[0]);  ltI[i]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	66	4	add
604	[BUG]  [BUGGY]  int  p  =  1;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	int  p  =  1;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  >  expected	23	None	replace
605	[BUG]  [BUGGY]  ((  double[])ltQ).doubleValue()  -  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  ((  double[])ltQ).doubleValue()  -  1;  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	((  double[])ltQ).doubleValue()  -  1;	  ((    double[])ltQ).doubleValue();    	non-compiled	[CE]  not  a  statement	114	None	replace
606	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  inverse,  absolutePositivityThreshold);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  inverse,  absolutePositivityThreshold);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  inverse,  absolutePositivityThreshold);	  double    p    =    Math.max(relativeSymmetryThreshold,    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	130	None	replace
607	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i]  *  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  double  p  =  Math.sqrt(ltQ[i]  *  ltQ[i]);  [BUGGY]      ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i]  *  ltQ[i]);	  double    p    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
608	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltJI[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltJI[i]);  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltJI[i]);  }	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
609	[BUG]  [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  ltI[i]  =  Math.sqrt(ltQ[i]);  }  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];      [BUGGY]  if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  ltI[i]  =  Math.sqrt(ltQ[i]);  }  [BUGGY]      for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	if(ltQ!=  null)  {  ltI[i]  =  Math.sqrt(ltQ[i]);  }  else  {  ltI[i]  =  Math.sqrt(ltQ[i]);  }	          ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	94	None	replace
