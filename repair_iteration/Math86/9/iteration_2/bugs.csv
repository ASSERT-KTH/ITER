bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	5	replace
2	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	5	replace
3	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  ltI.length;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	5	replace
4	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  ltI.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  ltI.length;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	5	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
6	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order  -  1;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order  -  1;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
8	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
9	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ[i]);	      ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
10	[BUG]  [BUGGY]  ltI[i]  =  Math.log(ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.log(ltQ[i]);	      ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
11	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  for(int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  for(int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    0;    ++p)    {    for(int  p  =  order;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
12	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  For(int  p  =  order;  p  <  0;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  For(int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    0;    ++p)    {    For(int  p  =  order;  p  <  0;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	5	None	add
13	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    0;    ++p)    {    int  p  =  order;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
14	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  (int  p  =  order;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    0;    ++p)    {    (int  p  =  order;  p  <  0;  ++p)  {	  	non-compiled	[CE]  ')'  expected	5	None	add
15	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  for(int  p  =  order);  p  <  0;  ++p)  {  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  for(int  p  =  order);  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    0;    ++p)    {    for(int  p  =  order);  p  <  0;  ++p)  {	  	non-compiled	[CE]  ';'  expected	5	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
17	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
18	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order  -  1;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	4	replace
19	[BUG]  [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order  -  1;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order  -  1;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	4	replace
20	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  for(int  p  =  1;  p  <  order;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  for(int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    order;    ++p)    {    for(int  p  =  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
21	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  For(int  p  =  1;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  For(int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    order;    ++p)    {    For(int  p  =  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	16	None	add
22	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  for(int  p  =  1;  p  <  order);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  for(int  p  =  1;  p  <  order);  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    order;    ++p)    {    for(int  p  =  1;  p  <  order);  ++p)  {	  	non-compiled	[CE]  ';'  expected	16	None	add
23	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  int  p  =  1;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    order;    ++p)    {    int  p  =  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	16	None	add
24	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  (int  p  =  1;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  order;  ++p)  {  (int  p  =  1;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    1;    p    <    order;    ++p)    {    (int  p  =  1;  p  <  order;  ++p)  {	  	non-compiled	[CE]  ')'  expected	16	None	add
25	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  for(int  p  =  0;  p  <  order;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  for(int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    order;    ++p)    {    for(int  p  =  0;  p  <  order;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
26	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  For(int  p  =  0;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  For(int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    order;    ++p)    {    For(int  p  =  0;  p  <  order;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	1	None	add
27	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  for(int  p  =  0;  p  <  order);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  for(int  p  =  0;  p  <  order);  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    order;    ++p)    {    for(int  p  =  0;  p  <  order);  ++p)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
28	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    order;    ++p)    {    int  p  =  0;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	1	None	add
29	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  (int  p  =  0;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    order;    ++p)    {    (int  p  =  0;  p  <  order;  ++p)  {	  	non-compiled	[CE]  ')'  expected	1	None	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  2;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	2	5	replace
31	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  2;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  2;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	2	5	replace
32	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    for(int  p  =  ltQ.length;  p  <  order;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
33	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  For(int  p  =  ltQ.length;  p  <  order;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  For(int  p  =  ltQ.length;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    For(int  p  =  ltQ.length;  p  <  order;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	23	None	add
34	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length;  p  <  order);  ++p)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  for(int  p  =  ltQ.length;  p  <  order);  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    for(int  p  =  ltQ.length;  p  <  order);  ++p)  {	  	non-compiled	[CE]  ';'  expected	23	None	add
35	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  int  p  =  ltQ.length;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    int  p  =  ltQ.length;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	23	None	add
36	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  order;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  order;  ++p)  {  (int  p  =  ltQ.length;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    (int  p  =  ltQ.length;  p  <  order;  ++p)  {	  	non-compiled	[CE]  ')'  expected	23	None	add
37	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedLT[i];  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  cachedLT[i];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedLT[i];	      final    double[][]    ltQ    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
38	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  ltI[i];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltI[i];	      final    double[][]    ltQ    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	19	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	17	5	replace
40	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	17	5	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  2;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	17	5	replace
42	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  2;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  2;  p  <  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	17	5	replace
43	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  =  order;  ++p)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  =  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  =  order;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
44	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  for(int  p  =  order;  p  <  q;  ++p)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  for(int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    q;    ++p)    {    for(int  p  =  order;  p  <  q;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
45	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  For(int  p  =  order;  p  <  q;  ++p)  {  [CE]  '.class'  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  For(int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    q;    ++p)    {    For(int  p  =  order;  p  <  q;  ++p)  {	  	non-compiled	[CE]  '.class'  expected	3	None	add
46	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {  [CE]  >  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    q;    ++p)    {    int  p  =  order;  p  <  q;  ++p)  {	  	non-compiled	[CE]  >  expected	3	None	add
47	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  for(int  p  =  order;  p  <  q);  ++p)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  for(int  p  =  order;  p  <  q);  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    q;    ++p)    {    for(int  p  =  order;  p  <  q);  ++p)  {	  	non-compiled	[CE]  ';'  expected	3	None	add
48	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  (int  p  =  order;  p  <  q;  ++p)  {  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  (int  p  =  order;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    q;    ++p)    {    (int  p  =  order;  p  <  q;  ++p)  {	  	non-compiled	[CE]  ')'  expected	3	None	add
49	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  *  inverse);	      ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
50	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i]  +  1);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i]  +  1);	      ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
51	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());	      ltI[i]    =    Math.sqrt(ltQ[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	10	2	add
53	[BUG]  [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	10	2	add
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	10	4	add
55	[BUG]  [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[0]);	  	compilable	  [FE]  AssertionError  	10	4	add
56	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	5	add
57	[BUG]  [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[0]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	5	add
58	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	4	add
59	[BUG]  [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[0]    =    Math.sqrt(ltI[0]);    ltI[1]  =  Math.sqrt(ltI[1]);	  	compilable	  [FE]  AssertionError  	10	4	add
60	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[i];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[]  ltQ  =  ltData[i];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltData[i];	      final    double[]    ltQ    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
61	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[i];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[]  ltQ  =  ltI[i];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltI[i];	      final    double[]    ltQ    =    lTData[i];    	non-compiled	[CE]  class,  interface,  or  enum  expected	15	None	replace
62	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i].doubleValue(),  inverse);	      ltI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
63	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  ltQ);	      ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
64	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  maxDelta);  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  maxDelta);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  maxDelta);	      ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
65	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  inverse,  lJI);	      ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
66	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	8	4	add
67	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]);	  	compilable	  [FE]  AssertionError  	8	4	add
68	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	8	5	add
69	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.log(ltI[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.log(ltI[i]);	  	compilable	  [FE]  AssertionError  	8	5	add
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	8	4	add
71	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	8	4	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	8	4	add
73	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]  +  1);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]  +  1);	  	compilable	  [FE]  AssertionError  	8	4	add
74	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltI[q];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[p]  -=  ltI[q]  *  ltI[q];  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[q]  *  ltI[q];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
75	[BUG]  [BUGGY]  ltQ[p]  -=  ltI[q]  *  ltI[q];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltQ[p]  -=  ltI[q]  *  ltI[q];  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltI[q]  *  ltI[q];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
76	[BUG]  [BUGGY]  ltI[p]  -=  ltI[p]  *  ltI[p];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[p]  -=  ltI[p]  *  ltI[p];  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[p]  *  ltI[p];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
77	[BUG]  [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[q];  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[p]  -=  ltI[q]  *  ltQ[q];  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[p]  -=  ltI[q]  *  ltQ[q];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
78	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedL[q];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  cachedL[q];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedL[q];	      final    double[][]    ltQ    =    cachedLT[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
79	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedLT[ltQ];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  cachedLT[ltQ];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedLT[ltQ];	      final    double[][]    ltQ    =    cachedLT[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	24	4	replace
81	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  1;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	24	4	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	24	5	replace
83	[BUG]  [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length  -  2;  p  <  order;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	24	5	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  order;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	24	4	replace
85	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  order;  p  <  ltQ.length;  ++p)  {	  for(int    p    =    ltQ.length;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	24	4	replace
86	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltData[q];  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  ltData[q];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltData[q];	      final    double[][]    ltQ    =    lTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
87	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltI[q];  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  ltI[q];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltI[q];	      final    double[][]    ltQ    =    lTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
88	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltData[q];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[]  ltQ  =  ltData[q];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltData[q];	      final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
89	[BUG]  [BUGGY]  final  double[]  ltQ  =  ltI[q];  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[]  ltQ  =  ltI[q];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[]  ltQ  =  ltI[q];	      final    double[]    ltQ    =    lTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	14	None	replace
90	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[0]);	      ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
91	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[1]  =  Math.sqrt(ltI[1]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[1]  =  Math.sqrt(ltI[1]);	      ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
92	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[0]  =  Math.sqrt(ltI[1]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltI[1]);	      ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
93	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	12	4	add
94	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]);	  	compilable	  [FE]  AssertionError  	12	4	add
95	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i]).doubleValue();  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i]).doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	12	5	add
97	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.log(ltQ[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.log(ltQ[i]);	  	compilable	  [FE]  AssertionError  	12	5	add
98	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	12	4	add
99	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[0]  =  Math.sqrt(ltQ[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[0]  =  Math.sqrt(ltQ[0]);	  	compilable	  [FE]  AssertionError  	12	4	add
100	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedTData[q];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  cachedTData[q];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedTData[q];	      final    double[][]    ltQ    =    cachedLT[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
101	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].doubleValue());  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i].doubleValue());	  	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	add
102	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i]).doubleValue();	  	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	add
103	[BUG]  [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[0]  =  Math.sqrt(ltQ[1]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[0]  =  Math.sqrt(ltQ[1]);	      ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
105	[BUG]  [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  >=  ltQ.length;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	compilable	  [FE]  AssertionError  	6	4	replace
106	[BUG]  [BUGGY]  for(int  p  =  ltQ;  p  <  0;  ++p)  {  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ;  p  <  0;  ++p)  {	  for(int    p    =    order;    p    <    0;    ++p)    {    	non-compiled	[CE]  incompatible  types	6	None	replace
107	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  q;  ++p)  {  final  double[]  ltQ  =  lTData[q];  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    q;    ++p)    {    final  double[]  ltQ  =  lTData[q];	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
108	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltTData[i]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltTData[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltTData[i]);	      ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
109	[BUG]  [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.min(ltI[i],  ltQ);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.min(ltI[i],  ltQ);	      ltI[i]    =    Math.sqrt(ltI[i]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
110	[BUG]  [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  order;  p  <  0;  ++p)  {  final  double[]  p  =  order;  p  <  0;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    order;    p    <    0;    ++p)    {    final  double[]  p  =  order;  p  <  0;  ++p)  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
111	[BUG]  [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  LtI[i]  =  Math.sqrt(ltI[i].doubleValue());  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	LtI[i]  =  Math.sqrt(ltI[i].doubleValue());	      ltI[i]    =    Math.sqrt(ltI[i].doubleValue());    	non-compiled	[CE]  class,  interface,  or  enum  expected	21	None	replace
112	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltQ[i].doubleValue());	  	non-compiled	[CE]  double  cannot  be  dereferenced	12	None	add
113	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[q];  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltQ[q];  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltQ[q];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
114	[BUG]  [BUGGY]  ((  double[])ltQ).doubleValue();  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ((  double[])ltQ).doubleValue();  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	((  double[])ltQ).doubleValue();	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
115	[BUG]  [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltI[q];  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltQ[p]  -=  ltQ[q]  *  ltI[q];  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltQ[p]  -=  ltQ[q]  *  ltI[q];	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
116	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  double  p  =  Math.sqrt(ltQ);  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
118	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  i;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
120	[BUG]  [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  i;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  i;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
121	[BUG]  [BUGGY]  for(int  p  =  ltQ;  p  <  q;  ++p)  {  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	non-compiled	[CE]  incompatible  types	4	None	replace
122	[BUG]  [BUGGY]  final  double[][]  ltQ  =  ltData[i];  [CE]  class,  interface,  or  enum  expected  [FE]        AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  ltData[i];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  ltData[i];	      final    double[][]    ltQ    =    lTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
123	[BUG]  [BUGGY]  final  double[][]  ltQ  =  lTData[q]  *  inverse;  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  lTData[q]  *  inverse;  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  lTData[q]  *  inverse;	      final    double[][]    ltQ    =    lTData[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	18	None	replace
124	[BUG]  [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  [CE]  cannot  find  symbol  LtI  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[0]  =  Math.sqrt(ltI[0]);  LtI[0]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[0]    =    Math.sqrt(ltI[0]);    LtI[0]  =  Math.sqrt(ltI[0]);	  	non-compiled	[CE]  cannot  find  symbol  LtI	10	None	add
125	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  0;  p  <  order;  ++p)  {  [CE]  >  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  order;  ++p)  {  final  double  p  =  0;  p  <  order;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int    p    =    0;    p    <    order;    ++p)    {    final  double  p  =  0;  p  <  order;  ++p)  {	  	non-compiled	[CE]  >  expected	1	None	add
126	[BUG]  [BUGGY]  final  double[][]  ltQ  =  cachedT[q];  [CE]  class,  interface,  or  enum  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  final  double[][]  ltQ  =  cachedT[q];  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	final  double[][]  ltQ  =  cachedT[q];	      final    double[][]    ltQ    =    cachedLT[q];    	non-compiled	[CE]  class,  interface,  or  enum  expected	20	None	replace
127	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  1;  p  <  2;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	17	5	replace
128	[BUG]  [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  1;  p  <  2;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  1;  p  <  2;  ++p)  {	  for(int    p    =    1;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	17	5	replace
129	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i]);  [CE]  class,  interface,  or  enum  expected  [FE]              AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  double  p  =  Math.sqrt(ltQ[i]);  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i]);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
130	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  inverse);  [CE]  class,  interface,  or  enum  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  inverse);  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  inverse);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
131	[BUG]  [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue());  [CE]  class,  interface,  or  enum  expected  [FE]                  AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  double  p  =  Math.sqrt(ltQ[i].doubleValue());  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.sqrt(ltQ[i].doubleValue());	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
132	[BUG]  [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]                    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  double  p  =  Math.max(relativeSymmetryThreshold,  ltQ);  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	double  p  =  Math.max(relativeSymmetryThreshold,  ltQ);	      	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
133	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltY[i]);  [CE]  cannot  find  symbol  ltY  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltQ[i]);  ltI[i]  =  Math.sqrt(ltY[i]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltQ[i]);    ltI[i]  =  Math.sqrt(ltY[i]);	  	non-compiled	[CE]  cannot  find  symbol  ltY	12	None	add
134	[BUG]  [BUGGY]  ltI[1]  =  Math.sqrt(ltI[0]);  [CE]  class,  interface,  or  enum  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[1]  =  Math.sqrt(ltI[0]);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[1]  =  Math.sqrt(ltI[0]);	      ltI[0]    =    Math.sqrt(ltI[0]);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  0;  p  <  1;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	2	5	replace
136	[BUG]  [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  0;  p  <  1;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  0;  p  <  1;  ++p)  {	  for(int    p    =    0;    p    <    order;    ++p)    {    	compilable	  [FE]  AssertionError  	2	5	replace
137	[BUG]  [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [CE]  double  cannot  be  dereferenced  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]      ltI[i]  =  Math.sqrt(ltI[i]);  ltI[i]  =  Math.sqrt(ltI[i].inverse);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	        ltI[i]    =    Math.sqrt(ltI[i]);    ltI[i]  =  Math.sqrt(ltI[i].inverse);	  	non-compiled	[CE]  double  cannot  be  dereferenced	8	None	add
138	[BUG]  [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ);  [CE]  class,  interface,  or  enum  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  ltI[i]  =  Math.sqrt(ltI[i],  ltQ);  [BUGGY]    for  (int  p  =  q;  p  <  order;  ++p)  {  ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	ltI[i]  =  Math.sqrt(ltI[i],  ltQ);	      ltI[i]    =    Math.sqrt(ltI[i],    inverse);    	non-compiled	[CE]  class,  interface,  or  enum  expected	22	None	replace
139	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  ltQ.length;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	4	replace
140	[BUG]  [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  ltQ.length;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  ltQ.length;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	4	replace
141	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	add	for(int  p  =  2;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
142	[BUG]  [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  ltI  =  lTData[i];    ltI[i]  =  Math.sqrt(ltI[i]);  final  double  inverse  =  1.0  /  ltI[i];  for  (int  q  =  order  -  1;  q  >  i;  --q)  {  ltI[q]  *=  inverse;  final  double[]  ltQ  =  lTData[q];    [BUGGY]  for(int  p  =  2;  p  <  q;  ++p)  {  [BUGGY]    ltQ[p]  -=  ltI[q]  *  ltI[p];  }  }  }  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5345224838248488	144	144	2	replace	for(int  p  =  2;  p  <  q;  ++p)  {	  for(int    p    =    order;    p    <    q;    ++p)    {    	compilable	  [FE]  AssertionError  	4	5	replace
