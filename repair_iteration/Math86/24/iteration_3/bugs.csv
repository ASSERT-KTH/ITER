bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ)),  relativeSymmetryThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ)),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ)),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	60	None	replace
2	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ),  Math.abs(lJ)));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ),  Math.abs(lJ)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ),  Math.abs(lJ)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	60	None	replace
3	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  inconvertible  types  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	70	None	replace
4	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI));  [CE]  inconvertible  types  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	70	None	replace
5	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	134	5	add
6	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	134	5	add
7	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  LJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  cannot  find  symbol  LJ  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  LJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    LJ[j]  =  Math.max(relativeSymmetryThreshold,  0);	  	non-compiled	[CE]  cannot  find  symbol  LJ	134	None	add
8	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  }  [CE]  illegal  start  of  type  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  }	  	non-compiled	[CE]  illegal  start  of  type	134	None	add
9	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0,  0);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0,  0);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	134	None	add
10	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  ltQ);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  ltQ);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  ltQ);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	92	None	replace
11	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold,  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	92	None	replace
12	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold,  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	92	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  1;  lJ[j]  =  1;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    1;    lJ[j]  =  1;	  	compilable	  [FE]  AssertionError  	64	5	add
14	[BUG]  [BUGGY]  lJ[j]  =  1;  lJ[j]  =  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  1;  lJ[j]  =  1;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    1;    lJ[j]  =  1;	  	compilable	  [FE]  AssertionError  	64	5	add
15	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  1;  lJ[j]  =  2;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    1;    lJ[j]  =  2;	  	compilable	  [FE]  AssertionError  	64	5	add
16	[BUG]  [BUGGY]  lJ[j]  =  1;  lJ[j]  =  2;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  1;  lJ[j]  =  2;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    1;    lJ[j]  =  2;	  	compilable	  [FE]  AssertionError  	64	5	add
17	[BUG]  [BUGGY]  lJ[j]  =  1;  int  lJ[j]  =  1;  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  1;  int  lJ[j]  =  1;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    1;    int  lJ[j]  =  1;	  	non-compiled	[CE]  ']'  expected	64	None	add
18	[BUG]  [BUGGY]  lJ[j]  =  1;  LJ[j]  =  1;  [CE]  cannot  find  symbol  LJ  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  1;  LJ[j]  =  1;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    1;    LJ[j]  =  1;	  	non-compiled	[CE]  cannot  find  symbol  LJ	64	None	add
19	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    lJI,    l    	non-compiled	[CE]  ')'  expected	113	None	replace
20	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    lJI,    l    	non-compiled	[CE]  ')'  expected	113	None	replace
21	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    lJI,    l    	non-compiled	[CE]  ')'  expected	113	None	replace
22	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    lJI,    l    	non-compiled	[CE]  ')'  expected	113	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);	  	compilable	  [FE]  AssertionError  	74	2	add
24	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);	  	compilable	  [FE]  AssertionError  	74	2	add
25	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    LJ[i]  =  Math.max(relativeSymmetryThreshold,  0);	  	non-compiled	[CE]  cannot  find  symbol  LJ	74	None	add
26	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0,  0);  [CE]  no  suitable  method  found  for  max(double,int,int)  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  0,  0);	  	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,int)	74	None	add
27	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);	  	non-compiled	[CE]  ']'  expected	74	None	add
28	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    ljI));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
29	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI));  [CE]  cannot  find  symbol  ljI  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    ljI));    	non-compiled	[CE]  cannot  find  symbol  ljI	3	None	replace
30	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  maxDelta));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  maxDelta));	  Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	110	None	replace
31	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  0));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  0));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  0));	  Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	110	None	replace
32	[BUG]  [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [CE]  cannot  find  symbol  LJ  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    LJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  LJ	4	None	replace
33	[BUG]  [BUGGY]  LJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI));  [CE]  cannot  find  symbol  LJ  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    LJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  LJ	4	None	replace
34	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
35	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
36	[BUG]  [BUGGY]  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
37	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
38	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1),  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	140	None	replace
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
40	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
41	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	145	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
43	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
44	[BUG]  [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  assign  a  value  to  final  variable  maxDelta  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  maxDelta	145	None	replace
45	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)+  1);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)+  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)+  1);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  incompatible  types	93	None	replace
46	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]        NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  inconvertible  types	115	None	replace
47	[BUG]  [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LJ  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    LJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LJ	81	None	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);	  	compilable	  [FE]  AssertionError  	51	2	add
49	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);	  	compilable	  [FE]  AssertionError  	51	2	add
50	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI)  +  1);  [CE]  cannot  find  symbol  ljI  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI)  +  1);	  	non-compiled	[CE]  cannot  find  symbol  ljI	51	None	add
51	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [CE]  cannot  find  symbol  LJ  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);	  	non-compiled	[CE]  cannot  find  symbol  LJ	51	None	add
52	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(lJ[j],  lJI);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	63	5	replace
53	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(lJ[j],  lJI);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	63	5	replace
54	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.min(lJ[j],  lJI);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	63	5	replace
55	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  lJI);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.min(lJ[j],  lJI);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	63	5	replace
56	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(lJ[j],  maxDelta,  relativeSymmetryThreshold);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	63	None	replace
57	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  absolutePositivityThreshold));  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  absolutePositivityThreshold));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    relativeSymmetryThreshold));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	40	None	replace
58	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    relativeSymmetryThreshold));    	non-compiled	[CE]  ')'  expected	40	None	replace
59	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold,  maxDelta));  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold,  maxDelta));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    relativeSymmetryThreshold));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	40	None	replace
60	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  totalDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  totalDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  totalDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  ltQ    =    Math.max(relativeSymmetryThreshold,    maxDelta)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	32	None	replace
61	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]    =    Math.max(relativeSymmetryThreshold,    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	123	None	replace
62	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i];	          if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  incompatible  types	16	None	replace
63	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  variable  j  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  }	          if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  variable  j  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	16	None	replace
64	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];	          if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
65	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJI)));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  ';'  expected	95	None	replace
66	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJI));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	95	None	replace
67	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lIJ));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lIJ));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	95	None	replace
68	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lJ[j]  =  Math.min(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    Math.min(lJ[j],    maxDelta);    lJ[j]  =  Math.min(lJ[j],  maxDelta);	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	104	5	add
69	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lJ[j]  =  Math.min(lJ[j],  maxDelta);  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lJ[j]  =  Math.min(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.min(lJ[j],    maxDelta);    lJ[j]  =  Math.min(lJ[j],  maxDelta);	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	104	5	add
70	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  LJ[j]  =  Math.min(lJ[j],  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  LJ[j]  =  Math.min(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.min(lJ[j],    maxDelta);    LJ[j]  =  Math.min(lJ[j],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  LJ	104	None	add
71	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lj[j]  =  Math.min(lJ[j],  maxDelta);  [CE]  cannot  find  symbol  lj  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lj[j]  =  Math.min(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.min(lJ[j],    maxDelta);    lj[j]  =  Math.min(lJ[j],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lj	104	None	add
72	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lJ[j]  =  Math.min(lJ[j],  maxDelta);  }  [CE]  illegal  start  of  type  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lJ[j]  =  Math.min(lJ[j],  maxDelta);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.min(lJ[j],    maxDelta);    lJ[j]  =  Math.min(lJ[j],  maxDelta);  }	  	non-compiled	[CE]  illegal  start  of  type	104	None	add
73	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(Math.abs(lIJ),  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	compilable	  [FE]  AssertionError  	37	5	replace
74	[BUG]  [BUGGY]  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lIJ),  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	compilable	  [FE]  AssertionError  	37	5	replace
75	[BUG]  [BUGGY]  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lIJ),  Math.abs(lJ));	  Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	37	None	replace
76	[BUG]  [BUGGY]  matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Mat.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
77	[BUG]  [BUGGY]  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Mat  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Mat.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol  Mat	28	None	replace
78	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Mat  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Mat.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol  Mat	28	None	replace
79	[BUG]  [BUGGY]  (relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  (relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  ')'  expected	30	None	replace
80	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
81	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)-  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)-  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)-  1);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
82	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)/  2);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)/  2);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ)/  2);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
83	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  ltQ);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  ltQ);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  ltQ);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	50	5	replace
85	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	50	5	replace
86	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  relativeSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  relativeSymmetryThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(maxDelta,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	96	None	replace
87	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  LtQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(maxDelta,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  LtQ	96	None	replace
88	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	5	None	replace
89	[BUG]  [BUGGY]  final  double[][]  lTData  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	5	None	replace
90	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  relativeSymmetryThreshold);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  incompatible  types	53	None	replace
91	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold,  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	53	None	replace
92	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  lJ[i]  =  Math.max(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(lJ[i],    lJI);    lJ[i]  =  Math.max(lJ[i],  lJI);	  	compilable	  [FE]  AssertionError  	9	2	add
93	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  lJ[i]  =  Math.max(lJ[i],  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  lJ[i]  =  Math.max(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    lJI);    lJ[i]  =  Math.max(lJ[i],  lJI);	  	compilable	  [FE]  AssertionError  	9	2	add
94	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  LJ[i]  =  Math.max(lJ[i],  lJI);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  LJ[i]  =  Math.max(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    lJI);    LJ[i]  =  Math.max(lJ[i],  lJI);	  	non-compiled	[CE]  cannot  find  symbol  LJ	9	None	add
95	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  lJ[i]  =  Math.max(lJ[i],  lJI);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  lJ[i]  =  Math.max(lJ[i],  lJI);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    lJI);    lJ[i]  =  Math.max(lJ[i],  lJI);  }	  	non-compiled	[CE]  illegal  start  of  type	9	None	add
96	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  int  lJ[i]  =  Math.max(lJ[i],  lJI);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  int  lJ[i]  =  Math.max(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    lJI);    int  lJ[i]  =  Math.max(lJ[i],  lJI);	  	non-compiled	[CE]  ']'  expected	9	None	add
97	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]        NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  inconvertible  types	138	None	replace
98	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[j];	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  incompatible  types	8	None	replace
99	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
100	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  }  [CE]  variable  j  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  }	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  variable  j  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	8	None	replace
101	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJ)),  relativeSymmetryThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJ)),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJ)),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)),    relativeSymmetryThreshold);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	61	None	replace
102	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  ltQ,  maxDelta));  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  ltQ,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  ltQ,  maxDelta));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    maxDelta));    	non-compiled	[CE]  cannot  find  symbol  ltQ	90	None	replace
103	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta,  relativeSymmetryThreshold));  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta,  relativeSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta,  relativeSymmetryThreshold));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    maxDelta));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	90	None	replace
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)/  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)/  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    	compilable	  [FE]  AssertionError  	52	4	replace
105	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)/  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)/  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)/  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    	compilable	  [FE]  AssertionError  	52	4	replace
106	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI)+  1);  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI)+  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI)+  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	52	None	replace
107	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  totalDelta),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  totalDelta  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  totalDelta),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  totalDelta),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  totalDelta	88	None	replace
108	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
109	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold),  maxDelta);  [CE]  no  suitable  method  found  for  max(double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold),  maxDelta);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
110	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  lTData,  absolutePositivityThreshold);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  lTData,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  lTData,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  ')'  expected	88	None	replace
111	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	132	5	add
112	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	132	5	add
113	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  LJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  LJ  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  LJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    LJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  LJ	132	None	add
114	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	132	None	add
115	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lj[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  lj  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lj[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lj[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  lj	132	None	add
116	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	84	2	add
117	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	84	2	add
118	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  LJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  LJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    LJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  cannot  find  symbol  LJ	84	None	add
119	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  int  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  int  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    int  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  ']'  expected	84	None	add
120	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  }	  	non-compiled	[CE]  illegal  start  of  type	84	None	add
121	[BUG]  [BUGGY]  LJ[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[i]  =  Math.max(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    LJ[i]    =    Math.max(lJ[i],    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  LJ	44	None	replace
122	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  LJ[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  LJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lJI);  LJ[i]  =  Math.max(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    LJ[i]    =    Math.max(lJ[i],    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  LJ	44	None	replace
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	43	5	replace
124	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	43	5	replace
125	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  ltQ),  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  ltQ),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  ltQ),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	89	None	replace
126	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  ltQ);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  ltQ);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  ltQ);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  ')'  expected	89	None	replace
127	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  lTData,  relativeSymmetryThreshold);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  lTData,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  lTData,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  ')'  expected	89	None	replace
128	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  ltQ,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  ltQ,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  ltQ,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	89	None	replace
129	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	94	None	replace
130	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ)),  relativeSymmetryThreshold);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ)),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ)),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lJ)));    	non-compiled	[CE]  ';'  expected	94	None	replace
131	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  lTData.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];	          for(int    j    =    0;    j    <    order;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
132	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  j  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];	          for(int    j    =    0;    j    <    order;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  1);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	135	6	replace
134	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  1);  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  1);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	135	6	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  2);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  2);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	135	6	replace
136	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  2);  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  2);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  2);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	135	6	replace
137	[BUG]  [BUGGY]  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJ),  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	35	None	replace
138	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(Math.abs(lJI),  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	5	replace
139	[BUG]  [BUGGY]  Math.max(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI),  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	5	replace
140	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  ltQ    =    Math.max(relativeSymmetryThreshold,    maxDelta)*    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	15	None	replace
141	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  lJ[i]  =  0;  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	121	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
143	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  lJ[i]  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
145	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  lJ[i]  =  0;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
146	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJ,  maxDelta,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double[],double,double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJ,  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lJ,  maxDelta,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(lJ[i],    maxDelta,    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[],double,double)	13	None	replace
147	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI,  maxDelta,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI,  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lJI,  maxDelta,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(lJ[i],    maxDelta,    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	13	None	replace
148	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI[maxDelta],  relativeSymmetryThreshold);  [CE]  possible  loss  of  precision  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI[maxDelta],  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lJI[maxDelta],  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(lJ[i],    maxDelta,    relativeSymmetryThreshold);    	non-compiled	[CE]  possible  loss  of  precision	13	None	replace
149	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  lJ[i]  =  Math.min(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.min(lJ[i],    lJI);    lJ[i]  =  Math.min(lJ[i],  lJI);	  	compilable	  [FE]  AssertionError  	11	2	add
150	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  lJ[i]  =  Math.min(lJ[i],  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  lJ[i]  =  Math.min(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(lJ[i],    lJI);    lJ[i]  =  Math.min(lJ[i],  lJI);	  	compilable	  [FE]  AssertionError  	11	2	add
151	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  LJ[i]  =  Math.min(lJ[i],  lJI);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  LJ[i]  =  Math.min(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(lJ[i],    lJI);    LJ[i]  =  Math.min(lJ[i],  lJI);	  	non-compiled	[CE]  cannot  find  symbol  LJ	11	None	add
152	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  int  lJ[i]  =  Math.min(lJ[i],  lJI);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  int  lJ[i]  =  Math.min(lJ[i],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(lJ[i],    lJI);    int  lJ[i]  =  Math.min(lJ[i],  lJI);	  	non-compiled	[CE]  ']'  expected	11	None	add
153	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  lJ[i]  =  Math.min(lJ[i],  lJI);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  lJ[i]  =  Math.min(lJ[i],  lJI);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(lJ[i],    lJI);    lJ[i]  =  Math.min(lJ[i],  lJI);  }	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	compilable	  [FE]  AssertionError  	49	2	add
155	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	compilable	  [FE]  AssertionError  	49	2	add
156	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	non-compiled	[CE]  cannot  find  symbol  LJ	49	None	add
157	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));  [CE]  cannot  find  symbol  ljI  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));	  	non-compiled	[CE]  cannot  find  symbol  ljI	49	None	add
158	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  final  double[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  final  double[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    final  double[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	non-compiled	[CE]  ']'  expected	49	None	add
159	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJ)),  relativeSymmetryThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJ)),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJ)),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	142	None	replace
160	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelt    	non-compiled	[CE]  not  a  statement	128	None	replace
161	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDe  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDe  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDe	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelt    	non-compiled	[CE]  not  a  statement	128	None	replace
162	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelt    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
163	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelt    	non-compiled	[CE]  not  a  statement	128	None	replace
164	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]        =        0;        lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	66	5	add
165	[BUG]  [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;  lJ[j]  =  0;  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]        =        0;        lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	66	5	add
166	[BUG]  [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  LJ[j]  =  0;  lJ[j]  =  0;  [CE]  cannot  find  symbol  LJ  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  LJ[j]  =  0;  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]        =        0;        lJ[j]    =    0;    LJ[j]  =  0;  lJ[j]  =  0;	  	non-compiled	[CE]  cannot  find  symbol  LJ	66	None	add
167	[BUG]  [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  int  lJ[j]  =  0;  lJ[j]  =  0;  [CE]  ']'  expected  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  int  lJ[j]  =  0;  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]        =        0;        lJ[j]    =    0;    int  lJ[j]  =  0;  lJ[j]  =  0;	  	non-compiled	[CE]  ']'  expected	66	None	add
168	[BUG]  [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;  lJ[j]  =  0;  }  [CE]  illegal  start  of  type  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;  lJ[j]  =  0;  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]        =        0;        lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0;  }	  	non-compiled	[CE]  illegal  start  of  type	66	None	add
169	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold,  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	103	None	replace
170	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	103	None	replace
171	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold,  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	103	None	replace
172	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	103	None	replace
173	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold,  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	20	None	replace
174	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	20	None	replace
175	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI)+  1);  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI)+  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI)+  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ')'  expected	48	None	replace
176	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  1));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  1));	  Math.max(relativeSymmetryThreshold,    0));    	non-compiled	[CE]  ';'  expected	18	None	replace
177	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  2));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  2));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  2));	  Math.max(relativeSymmetryThreshold,    0));    	non-compiled	[CE]  ';'  expected	18	None	replace
178	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold));	  Math.max(relativeSymmetryThreshold,    0));    	non-compiled	[CE]  ';'  expected	18	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	34	2	add
180	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	34	2	add
181	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Mat.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  cannot  find  symbol  Mat  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Mat.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Mat.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	non-compiled	[CE]  cannot  find  symbol  Mat	34	None	add
182	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Matrix.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  cannot  find  symbol  Matrix  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Matrix.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Matrix.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	non-compiled	[CE]  cannot  find  symbol  Matrix	34	None	add
183	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  (relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  (relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    (relativeSymmetryThreshold,  Math.abs(lJI));	  	non-compiled	[CE]  ')'  expected	34	None	add
184	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(ljI));  [CE]  cannot  find  symbol  ljI  [FE]            AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(ljI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Math.max(relativeSymmetryThreshold,  Math.abs(ljI));	  	non-compiled	[CE]  cannot  find  symbol  ljI	34	None	add
185	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	compilable	  [FE]  AssertionError  	55	2	add
186	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	compilable	  [FE]  AssertionError  	55	2	add
187	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	55	None	add
188	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	55	None	add
189	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThr  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThr  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThr	  	non-compiled	[CE]  ')'  expected	55	None	add
190	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	25	2	add
191	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	25	2	add
192	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrix  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  Matrix	25	None	add
193	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	25	2	add
194	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	25	2	add
195	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  .max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  .max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    .max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
196	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  minDelta  [FE]            AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  minDelta	25	None	add
197	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  relativeSymmetryThreshold);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	101	None	replace
198	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lJI));  [CE]  no  suitable  method  found  for  max(double)  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lJI));	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	101	None	replace
199	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  maxDelta));  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  maxDelta));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    maxDelta));    	non-compiled	[CE]  cannot  find  symbol  ltQ	97	None	replace
200	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  maxDelta));  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  maxDelta));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    maxDelta));    	non-compiled	[CE]  cannot  find  symbol  ltQ	97	None	replace
201	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  maxDelta));  [CE]  cannot  find  symbol  ltQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  maxDelta));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    maxDelta));    	non-compiled	[CE]  cannot  find  symbol  ltQ	97	None	replace
202	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
203	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';')  {  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';')  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';')  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  ';'  expected	130	None	replace
204	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';'  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';'  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';'	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  ';'  expected	130	None	replace
205	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';'  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';'  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  ';'	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  ';'  expected	130	None	replace
206	[BUG]  [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  LJ  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    LJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  LJ	57	None	replace
207	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)/  1);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)/  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)/  1);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI)-    1);    	non-compiled	[CE]  incompatible  types	91	None	replace
208	[BUG]  [BUGGY]  lJ[i]  =  Math.max(Math.abs(lJI  -  lIJ));  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(Math.abs(lJI  -  lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(Math.abs(lJI  -  lIJ));	  lJ[i]    =    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	141	None	replace
209	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	141	4	replace
210	[BUG]  [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	141	4	replace
211	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[i]    =    Math.max(Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	141	5	replace
212	[BUG]  [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[i]    =    Math.max(Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	141	5	replace
213	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  absolutePositivityThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  absolutePositivityThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	98	None	replace
214	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	98	None	replace
215	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  absolutePositivityThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJI,  absolutePositivityThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	98	None	replace
216	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	133	5	replace
217	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	133	5	replace
218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	133	6	replace
219	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	133	6	replace
220	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  maxDelta);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  maxDelta);	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ    -    lJI));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
221	[BUG]  [BUGGY]  Math.max(lJ,  Math.abs(relativeSymmetryThreshold  -  lJI));  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(lJ,  Math.abs(relativeSymmetryThreshold  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(lJ,  Math.abs(relativeSymmetryThreshold  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	38	None	replace
222	[BUG]  [BUGGY]  Math.max(Math.abs(lJ  -  lJI));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJ  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ    -    lJI));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
223	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	compilable	  [FE]  AssertionError  	124	2	add
224	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	compilable	  [FE]  AssertionError  	124	2	add
225	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Mat.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  cannot  find  symbol  Mat  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Mat.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Mat.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	non-compiled	[CE]  cannot  find  symbol  Mat	124	None	add
226	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Matrix.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  cannot  find  symbol  Matrix  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Matrix.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Matrix.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	non-compiled	[CE]  cannot  find  symbol  Matrix	124	None	add
227	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));  [CE]  cannot  find  symbol  ljI  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));	  	non-compiled	[CE]  cannot  find  symbol  ljI	124	None	add
228	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  (relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  (relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    (relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	non-compiled	[CE]  ')'  expected	124	None	add
229	[BUG]  [BUGGY]  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJ),  Math.abs(lJ));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	33	None	replace
230	[BUG]  [BUGGY]  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJ),  Math.abs(relativeSymmetryThreshold));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	33	None	replace
231	[BUG]  [BUGGY]  Math.max(lJ,  Math.abs(relativeSymmetryThreshold));  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(lJ,  Math.abs(relativeSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(lJ,  Math.abs(relativeSymmetryThreshold));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	33	None	replace
232	[BUG]  [BUGGY]  Math.max(math,  relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  cannot  find  symbol  math  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(math,  relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(math,  relativeSymmetryThreshold,  Math.abs(lJ));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  cannot  find  symbol  math	33	None	replace
233	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  maxDelta);	  ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  ltQ	14	None	replace
234	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  lJI);	  ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  ltQ	14	None	replace
235	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
236	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	6	None	replace
237	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  lJ[j]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    Math.max(lJ[j],    maxDelta);    lJ[j]  =  Math.max(lJ[j],  maxDelta);	  	compilable	  [FE]  AssertionError  	62	2	add
238	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  lJ[j]  =  Math.max(lJ[j],  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  lJ[j]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(lJ[j],    maxDelta);    lJ[j]  =  Math.max(lJ[j],  maxDelta);	  	compilable	  [FE]  AssertionError  	62	2	add
239	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  lj[j]  =  Math.max(lJ[j],  maxDelta);  [CE]  cannot  find  symbol  lj  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  lj[j]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(lJ[j],    maxDelta);    lj[j]  =  Math.max(lJ[j],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lj	62	None	add
240	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  lJ[j]  =  Math.max(lJ[j],  maxDelta);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  lJ[j]  =  Math.max(lJ[j],  maxDelta);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(lJ[j],    maxDelta);    lJ[j]  =  Math.max(lJ[j],  maxDelta);  }	  	non-compiled	[CE]  illegal  start  of  type	62	None	add
241	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  LJ[j]  =  Math.max(lJ[j],  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  LJ[j]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(lJ[j],    maxDelta);    LJ[j]  =  Math.max(lJ[j],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  LJ	62	None	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJI);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    	compilable	  [FE]  AssertionError  	73	5	replace
243	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJI);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    	compilable	  [FE]  AssertionError  	73	5	replace
244	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJ);  [CE]  no  suitable  method  found  for  max(double,double[])  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJ);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  lJ);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double[])	73	None	replace
245	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	143	None	replace
246	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ))  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ))  +  1;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ))  +  1;	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	143	None	replace
247	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
248	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
249	[BUG]  [BUGGY]  lJI  =  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  cannot  assign  a  value  to  final  variable  lJI  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJI  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJI  =  Math.max(relativeSymmetryThreshold,  lJI);	  ltQ    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  lJI	24	None	replace
250	[BUG]  [BUGGY]  int  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    int    lJ[i]    =    Math.max(lJ[i],    maxDelta);    	non-compiled	[CE]  ']'  expected	46	None	replace
251	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  maxDelta;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  maxDelta;	  lJ[j]    =    1;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	65	5	replace
252	[BUG]  [BUGGY]  lJ[j]  =  maxDelta;  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  maxDelta;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  maxDelta;	  lJ[j]    =    1;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	65	5	replace
253	[BUG]  [BUGGY]  lJ[j]  =  MAXIMUM_SYMMETRY_THRESHOLD;  [CE]  cannot  find  symbol  MAXIMUM_SYMMETRY_THRESHOLD  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  MAXIMUM_SYMMETRY_THRESHOLD;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  MAXIMUM_SYMMETRY_THRESHOLD;	  lJ[j]    =    1;    	non-compiled	[CE]  cannot  find  symbol  MAXIMUM_SYMMETRY_THRESHOLD	65	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;	  	compilable	  [FE]  AssertionError  	120	2	add
255	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;	  	compilable	  [FE]  AssertionError  	120	2	add
256	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	120	2	add
257	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	120	2	add
258	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [CE]  cannot  find  symbol  Matrix  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;	  	non-compiled	[CE]  cannot  find  symbol  Matrix	120	None	add
259	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0	  	non-compiled	[CE]  ';'  expected	120	None	add
260	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;	  	non-compiled	[CE]  ')'  expected	120	None	add
261	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
262	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
263	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
264	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
265	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lJI));  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lJI));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lJ,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	76	None	replace
266	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lJ));  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lJ));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lJ,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	76	None	replace
267	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	119	5	replace
268	[BUG]  [BUGGY]  double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	119	5	replace
269	[BUG]  [BUGGY]  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(lDelta,  Math.abs(maxDelta));  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(lDelta,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  lDelta  =  relativeSymmetryThreshold  *  Math.max(lDelta,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
270	[BUG]  [BUGGY]  long  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  long  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	long  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
271	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	119	5	replace
272	[BUG]  [BUGGY]  Double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Double  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	119	5	replace
273	[BUG]  [BUGGY]  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  ']'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    int    lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  ']'  expected	82	None	replace
274	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	75	5	replace
275	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	75	5	replace
276	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,int,double)  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  0,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double)	75	None	replace
277	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));	  	compilable	  [FE]  AssertionError  	36	2	add
278	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));	  	compilable	  [FE]  AssertionError  	36	2	add
279	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Matrix.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [CE]  cannot  find  symbol  Matrix  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Matrix.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Matrix.max(relativeSymmetryThreshold,  Math.abs(lIJ));	  	non-compiled	[CE]  cannot  find  symbol  Matrix	36	None	add
280	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Mat.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [CE]  cannot  find  symbol  Mat  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Mat.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Mat.max(relativeSymmetryThreshold,  Math.abs(lIJ));	  	non-compiled	[CE]  cannot  find  symbol  Mat	36	None	add
281	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Matrimeter.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [CE]  cannot  find  symbol  Matrimeter  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Matrimeter.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Matrimeter.max(relativeSymmetryThreshold,  Math.abs(lIJ));	  	non-compiled	[CE]  cannot  find  symbol  Matrimeter	36	None	add
282	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  (relativeSymmetryThreshold,  Math.abs(lIJ));  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  (relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    (relativeSymmetryThreshold,  Math.abs(lIJ));	  	non-compiled	[CE]  ')'  expected	36	None	add
283	[BUG]  [BUGGY]  final  double[]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  <identifier>  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final    double[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  <identifier>  expected	59	None	replace
284	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final    double[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  ']'  expected	59	None	replace
285	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final    double[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  ']'  expected	59	None	replace
286	[BUG]  [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  lj  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lj[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  lj	126	None	replace
287	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	100	None	replace
288	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	100	None	replace
289	[BUG]  [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  lj  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lj[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lj[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  lj	58	None	replace
290	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
291	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1][j];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lTData  =  lTData[i  +  1][j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lTData  =  lTData[i  +  1][j];	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    	non-compiled	[CE]  incompatible  types	112	None	replace
292	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  }	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
293	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  j  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
294	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);	  	compilable	  [FE]  AssertionError  	136	4	add
295	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);	  	compilable	  [FE]  AssertionError  	136	4	add
296	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  }	  	non-compiled	[CE]  illegal  start  of  type	136	None	add
297	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  lj[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  cannot  find  symbol  lj  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  lj[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    lj[j]  =  Math.max(relativeSymmetryThreshold,  lJI);	  	non-compiled	[CE]  cannot  find  symbol  lj	136	None	add
298	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  LJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  cannot  find  symbol  LJ  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  LJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    LJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);	  	non-compiled	[CE]  cannot  find  symbol  LJ	136	None	add
299	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  inconvertible  types	68	None	replace
300	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  [CE]  illegal  start  of  expression  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
301	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(lJ[i],  lJI  +  1);	  lJ[i]    =    Math.min(lJ[i],    lJI);    	compilable	  [FE]  AssertionError  	12	5	replace
302	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJ[i],  lJI  +  1);	  lJ[i]    =    Math.min(lJ[i],    lJI);    	compilable	  [FE]  AssertionError  	12	5	replace
303	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI,  maxDelta);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJ[i],  lJI,  maxDelta);	  lJ[i]    =    Math.min(lJ[i],    lJI);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	12	None	replace
304	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(lJ[j],    maxDelta);    lJ[i]  =  Math.max(lJ[j],  maxDelta);	  	compilable	  [FE]  AssertionError  	108	2	add
305	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[j],    maxDelta);    lJ[i]  =  Math.max(lJ[j],  maxDelta);	  	compilable	  [FE]  AssertionError  	108	2	add
306	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  LJ[i]  =  Math.max(lJ[j],  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  LJ[i]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[j],    maxDelta);    LJ[i]  =  Math.max(lJ[j],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  LJ	108	None	add
307	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  lJ[i]  =  Math.max(lJ[j],  maxDelta);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  lJ[i]  =  Math.max(lJ[j],  maxDelta);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[j],    maxDelta);    lJ[i]  =  Math.max(lJ[j],  maxDelta);  }	  	non-compiled	[CE]  illegal  start  of  type	108	None	add
308	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  int  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  int  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[j],    maxDelta);    int  lJ[i]  =  Math.max(lJ[j],  maxDelta);	  	non-compiled	[CE]  ']'  expected	108	None	add
309	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);	  ltQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	87	None	replace
310	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  ltQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	87	None	replace
311	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ)/  1);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ)/  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ)/  1);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ)-    1);    	non-compiled	[CE]  incompatible  types	148	None	replace
312	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	122	4	replace
313	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  relativeSymmetryThreshold);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	122	4	replace
314	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI,  lJI  -  lJI));  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI,  lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI,  lJI  -  lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	122	None	replace
315	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	118	None	replace
316	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	118	None	replace
317	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        Math.abs(lIJ        -        lJI));        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  	compilable	  [FE]  AssertionError  	1	2	add
318	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        Math.abs(lIJ        -        lJI));        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  	compilable	  [FE]  AssertionError  	1	2	add
319	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJ  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJ  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        Math.abs(lIJ        -        lJI));        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJ	  	non-compiled	[CE]  ')'  expected	1	None	add
320	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  l  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  l  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        Math.abs(lIJ        -        lJI));        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  l	  	non-compiled	[CE]  ')'  expected	1	None	add
321	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        Math.abs(lIJ        -        lJI));        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -	  	non-compiled	[CE]  ')'  expected	1	None	add
322	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        Math.abs(lIJ        -        lJI));        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)	  	non-compiled	[CE]  ')'  expected	1	None	add
323	[BUG]  [BUGGY]  return  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  return  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	return  Math.max(relativeSymmetryThreshold,  maxDelta);	          return    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	127	None	replace
324	[BUG]  [BUGGY]  return  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  return  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	return  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	          return    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	127	None	replace
325	[BUG]  [BUGGY]  return  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  return  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	return  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold,  maxDelta);	          return    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	127	None	replace
326	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(lJI,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(lJI,  Math.abs(lJI  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
327	[BUG]  [BUGGY]  Math.max(lJI,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(lJI,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(lJI,  Math.abs(lJI  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
328	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
329	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)  +  1);	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
330	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lJI,  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    lJI);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	10	None	replace
331	[BUG]  [BUGGY]  ltQ  =  Math.max(lJI,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(lJI,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(lJI,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  ltQ    =    Math.max(relativeSymmetryThreshold,    lJI)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	146	None	replace
332	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  	compilable	  [FE]  AssertionError  	72	2	add
333	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  	compilable	  [FE]  AssertionError  	72	2	add
334	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    LJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  LJ	72	None	add
335	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  lj[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  lj  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  lj[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    lj[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lj	72	None	add
336	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    final  double[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  	non-compiled	[CE]  ']'  expected	72	None	add
337	[BUG]  [BUGGY]  lj[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  cannot  find  symbol  lj  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lj[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lj[i]  =  Math.max(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lj[i]    =    Math.max(lJ[i],    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  lj	99	None	replace
338	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	144	2	add
339	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	144	2	add
340	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	144	2	add
341	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	144	2	add
342	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Mat  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  Mat	144	None	add
343	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  minDelta  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  minDelta	144	None	add
344	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol	144	None	add
345	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	compilable	  [FE]  AssertionError  	42	2	add
346	[BUG]  [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	compilable	  [FE]  AssertionError  	42	2	add
347	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.min(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.min(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	compilable	  [FE]  AssertionError  	42	2	add
348	[BUG]  [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.min(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.min(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.min(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	compilable	  [FE]  AssertionError  	42	2	add
349	[BUG]  [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  LJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  LJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    LJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  LJ	42	None	add
350	[BUG]  [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  }	  	non-compiled	[CE]  illegal  start  of  type	42	None	add
351	[BUG]  [BUGGY]  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrix  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol  Matrix	27	None	replace
352	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	27	None	replace
353	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrix  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol  Matrix	27	None	replace
354	[BUG]  [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  cannot  assign  a  value  to  final  variable  maxDelta  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrimeter.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  maxDelta	29	None	replace
355	[BUG]  [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  cannot  assign  a  value  to  final  variable  maxDelta  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrimeter.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  maxDelta	29	None	replace
356	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI,  maxDelta);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	137	None	replace
357	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.min(relativeSymmetryThreshold,  lJI);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	137	5	replace
358	[BUG]  [BUGGY]  lJ[j]  =  Math.min(relativeSymmetryThreshold,  lJI);  [FE]  NotPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.min(relativeSymmetryThreshold,  lJI);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	137	5	replace
359	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ,  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  min(double[],double)  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJ,  absolutePositivityThreshold);	  lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  min(double[],double)	85	None	replace
360	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lIJ));  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lIJ));	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	147	None	replace
361	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	147	None	replace
362	[BUG]  [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));  [CE]  cannot  find  symbol  lj  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lj[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  lj	139	None	replace
363	[BUG]  [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [CE]  cannot  find  symbol  lj  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lj[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  lj	139	None	replace
364	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  lJ));  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  lJ));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	78	None	replace
365	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  maxDelta));  [CE]  cannot  find  symbol  ltQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  maxDelta));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	78	None	replace
366	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  lJI));  [CE]  cannot  find  symbol  ltQ  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  lJI));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	78	None	replace
367	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  [CE]  ';'  expected  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  ';'  expected	71	None	replace
368	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI)));  [CE]  ';'  expected  [FE]                  NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI)));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ  -  lJI)));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  ';'  expected	71	None	replace
369	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold,  maxDelta);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold,  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	86	None	replace
370	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  lJ);  [CE]  no  suitable  method  found  for  max(double,double,double[])  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  lJ);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  lJ);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double[])	86	None	replace
371	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [CE]  inconvertible  types  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	117	None	replace
372	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJ  [CE]  ')'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJ  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJ	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    	non-compiled	[CE]  ')'  expected	117	None	replace
373	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI));    	non-compiled	[CE]  ')'  expected	149	None	replace
374	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lJI  -  lJI));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lJI  -  lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI));    	non-compiled	[CE]  ')'  expected	149	None	replace
375	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  inconvertible  types	116	None	replace
376	[BUG]  [BUGGY]  LtQ  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  LtQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LtQ	106	None	replace
377	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  LtQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LtQ	106	None	replace
378	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  LtQ  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);	  LtQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LtQ	106	None	replace
379	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI));  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ,  Math.abs(lIJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    int    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	107	None	replace
380	[BUG]  [BUGGY]  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [CE]  ']'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    int    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ']'  expected	107	None	replace
381	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(lJ[j],  lJI);	  lJ[i]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	109	5	replace
382	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[j],  lJI);	  lJ[i]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	109	5	replace
383	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[j],  maxDelta,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(lJ[j],    maxDelta);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	109	None	replace
384	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(lJ[j],  lJI);	  lJ[i]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	109	5	replace
385	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[j],  lJI);  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJ[j],  lJI);	  lJ[i]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	109	5	replace
386	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)+  1));  [CE]  no  suitable  method  found  for  max(double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)+  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)+  1));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	41	None	replace
387	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI  +  1)));  [CE]  no  suitable  method  found  for  max(double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI  +  1)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI  +  1)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	41	None	replace
388	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  min(double,double,double)  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.min(lJ[j],  maxDelta,  relativeSymmetryThreshold);	  lJ[j]    =    Math.min(lJ[j],    maxDelta);    	non-compiled	[CE]  no  suitable  method  found  for  min(double,double,double)	105	None	replace
389	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  relativeSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	54	None	replace
390	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  absoluteSymmetryThreshold);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  absoluteSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	54	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]        =        Math.max(relativeSymmetryThreshold,        absolutePositivityThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	79	2	add
392	[BUG]  [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(relativeSymmetryThreshold,        absolutePositivityThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	79	2	add
393	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]        =        Math.max(relativeSymmetryThreshold,        absolutePositivityThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	79	2	add
394	[BUG]  [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(relativeSymmetryThreshold,        absolutePositivityThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	79	2	add
395	[BUG]  [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LJ  [FE]        AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(relativeSymmetryThreshold,        absolutePositivityThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  cannot  find  symbol  LJ	79	None	add
396	[BUG]  [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThre  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThre  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(relativeSymmetryThreshold,        absolutePositivityThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThre	  	non-compiled	[CE]  ')'  expected	79	None	add
397	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));	  Math.max(Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	150	5	replace
398	[BUG]  [BUGGY]  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));	  Math.max(Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	150	5	replace
399	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(Math.abs(lJI  -  lJI),  maxDelta);	  Math.max(Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	150	5	replace
400	[BUG]  [BUGGY]  Math.max(Math.abs(lJI  -  lJI),  maxDelta);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI  -  lJI),  maxDelta);	  Math.max(Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	150	5	replace
401	[BUG]  [BUGGY]  Math.max(Math.abs(lJI  -  lJI)+  1));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI)+  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI  -  lJI)+  1));	  Math.max(Math.abs(lJI    -    lJI));    	non-compiled	[CE]  ';'  expected	150	None	replace
402	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	39	None	replace
403	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  lTData,  relativeSymmetryThreshold);  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  lTData,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  lTData,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  ')'  expected	39	None	replace
404	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  ltQ),  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  ltQ),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  ltQ),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	39	None	replace
405	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  relativeSymmetryThreshold,  maxDelta);  [CE]  no  suitable  method  found  for  max(double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  relativeSymmetryThreshold,  maxDelta);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	39	None	replace
406	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1);  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)+  1);	  lJ[i]    =    Math.min(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ')'  expected	47	None	replace
407	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
408	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
409	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  	non-compiled	[CE]  ']'  expected	72	None	add
410	[BUG]  [BUGGY]  lTData[i]  =  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(Math.abs(lJ),  Math.abs(lJ));	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
411	[BUG]  [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(relativeSymmetryThreshold,        absolutePositivityThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  cannot  find  symbol  lj	79	None	add
412	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta,  absolutePositivityThreshold));  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta,  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta,  absolutePositivityThreshold));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    maxDelta));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	90	None	replace
413	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  maxDelta));  [CE]  no  suitable  method  found  for  max(double)  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  maxDelta));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    maxDelta));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	90	None	replace
414	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.max(relativeSymmetryThreshold,  Math.abs(lIj));  [CE]  cannot  find  symbol  lIj  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.max(relativeSymmetryThreshold,  Math.abs(lIj));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Math.max(relativeSymmetryThreshold,  Math.abs(lIj));	  	non-compiled	[CE]  cannot  find  symbol  lIj	36	None	add
415	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJJ  -  lJI));  [CE]  cannot  find  symbol  lJJ  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJJ  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    ljI));    	non-compiled	[CE]  cannot  find  symbol  lJJ	3	None	replace
416	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  int  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  int  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    int  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);	  	non-compiled	[CE]  ']'  expected	136	None	add
417	[BUG]  [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI),  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	141	None	replace
418	[BUG]  [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI)/  totalDelta);  [CE]  cannot  find  symbol  totalDelta  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI)/  totalDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI)/  totalDelta);	  lJ[i]    =    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  totalDelta	141	None	replace
419	[BUG]  [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [CE]  cannot  find  symbol  LJ  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  LJ	117	None	replace
420	[BUG]  [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  cannot  find  symbol  LJ  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    LJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  LJ	4	None	replace
421	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lj[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  lj[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    lj[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  cannot  find  symbol  lj	84	None	add
422	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelt    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
423	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDe  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDe  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDe	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelt    	non-compiled	[CE]  not  a  statement	128	None	replace
424	[BUG]  [BUGGY]  int  relativeSymmetryThreshold  =  relativeSymmetryThreshold;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  relativeSymmetryThreshold  =  relativeSymmetryThreshold;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  relativeSymmetryThreshold  =  relativeSymmetryThreshold;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	5	None	replace
425	[BUG]  [BUGGY]  Math.max(Math.abs(lJI  -  lJI)/  totalDelta);  [CE]  cannot  find  symbol  totalDelta  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI)/  totalDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI  -  lJI)/  totalDelta);	  Math.max(Math.abs(lJI    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  totalDelta	150	None	replace
426	[BUG]  [BUGGY]  Math.max(Math.abs(lJI  -  lJI)+  1);  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI)+  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI  -  lJI)+  1);	  Math.max(Math.abs(lJI    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	150	None	replace
427	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  lJI);	  ltQ    =    Math.max(relativeSymmetryThreshold,    maxDelta)*    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	15	None	replace
428	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  [CE]  ';'  expected  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  ';'  expected	71	None	replace
429	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final    double[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  ']'  expected	59	None	replace
430	[BUG]  [BUGGY]  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final    double[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  ']'  expected	59	None	replace
431	[BUG]  [BUGGY]  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final    double[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  ']'  expected	59	None	replace
432	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  int  lJI  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  int  lJI  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    int  lJI  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	49	None	add
433	[BUG]  [BUGGY]  Matrimeter.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrimeter  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Matrimeter.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Matrimeter.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrimeter.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol  Matrimeter	29	None	replace
434	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositionThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositionThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositionThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  LtQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LtQ	106	None	replace
435	[BUG]  [BUGGY]  LtQ  =  Math.max(ltQ,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(ltQ,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(ltQ,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  LtQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LtQ	106	None	replace
436	[BUG]  [BUGGY]  Math.max(lJ,  Math.abs(lJ  -  lJI));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(lJ,  Math.abs(lJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(lJ,  Math.abs(lJ  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ    -    lJI));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
437	[BUG]  [BUGGY]  RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
438	[BUG]  [BUGGY]  RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
439	[BUG]  [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  cannot  find  symbol  lj  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lj[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  lj	139	None	replace
440	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  absolutePositivityThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)),    relativeSymmetryThreshold);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	61	None	replace
441	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	60	None	replace
442	[BUG]  [BUGGY]  final  double[][]  lJData  =  lTData[j];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lJData  =  lTData[j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lJData  =  lTData[j];	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[j];    }    	non-compiled	[CE]  incompatible  types	7	None	replace
443	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(relativeSymmetryThreshold,  lJI);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    	compilable	  [FE]  AssertionError  	73	4	replace
444	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold,  lJI);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    	compilable	  [FE]  AssertionError  	73	4	replace
445	[BUG]  [BUGGY]  ltQ  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  ltQ    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	31	None	replace
446	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJI));  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lJI));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    maxDelta));    	non-compiled	[CE]  cannot  find  symbol  ltQ	97	None	replace
447	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(relativeSymmetryThreshold,  maxDelta);	  lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	85	4	replace
448	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold,  maxDelta);	  lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	85	4	replace
449	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
450	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
451	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(lJ[i],  lIJ);	  lJ[i]    =    Math.min(lJ[i],    lJI);    	compilable	  [FE]  AssertionError  	12	5	replace
452	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lIJ);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJ[i],  lIJ);	  lJ[i]    =    Math.min(lJ[i],    lJI);    	compilable	  [FE]  AssertionError  	12	5	replace
453	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  lJI);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  lJI);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	20	None	replace
454	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  -  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  -  1));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
455	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  -  1));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  -  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  -  1));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
456	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  +  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  +  1));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
457	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  +  1));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  +  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta  +  1));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	145	5	replace
458	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  maxDelta);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  maxDelta);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	89	None	replace
459	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  totalDelta),  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  totalDelta  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  totalDelta),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  totalDelta),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  totalDelta	89	None	replace
460	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  lTData),  relativeSymmetryThreshold);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  lTData),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)/  lTData),  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	89	None	replace
461	[BUG]  [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	118	None	replace
462	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  q;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  q;  ++j)  {  final  double[][]  lTData  =  lTData[j];	          for(int    j    =    0;    j    <    order;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
463	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  2;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  2;  ++j)  {  final  double[][]  lTData  =  lTData[j];	          for(int    j    =    0;    j    <    order;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
464	[BUG]  [BUGGY]  return  Math.max(relativeSymmetryThreshold,  totalDelta);  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  return  Math.max(relativeSymmetryThreshold,  totalDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	return  Math.max(relativeSymmetryThreshold,  totalDelta);	          return    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	127	None	replace
465	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
466	[BUG]  [BUGGY]  if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
467	[BUG]  [BUGGY]  if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	if(lJ!=  null)  {  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	non-compiled	[CE]  ';'  expected	121	None	replace
468	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[i]    =    Math.min(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ')'  expected	47	None	replace
469	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lJI,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(lJ[i],    maxDelta,    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	13	None	replace
470	[BUG]  [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [CE]  cannot  find  symbol  LJ  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  LJ	68	None	replace
471	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  absolutePositivityThreshold);  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	101	None	replace
472	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  absoluteSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	101	None	replace
473	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	33	None	replace
474	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  lTQ);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  lTQ);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ),  lTQ);	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	33	None	replace
475	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.min(lJ[j],  maxDelta  +  1);	  lJ[j]    =    Math.min(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	105	6	replace
476	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta  +  1);  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.min(lJ[j],  maxDelta  +  1);	  lJ[j]    =    Math.min(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	105	6	replace
477	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI  +  1);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    	compilable	  [FE]  AssertionError  	137	6	replace
478	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI  +  1);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI  +  1);	  lJ[j]    =    Math.max(relativeSymmetryThreshold,    lJI);    	compilable	  [FE]  AssertionError  	137	6	replace
479	[BUG]  [BUGGY]  final  double[][]  lJData  =  lTData[i];  [CE]  incompatible  types  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  final  double[][]  lJData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	final  double[][]  lJData  =  lTData[i];	          if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    j    =    0;    j    <    lJ.length;    ++j)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  incompatible  types	16	None	replace
480	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  j  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
481	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ))  +  1);  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ))  +  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ))  +  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJ)));    	non-compiled	[CE]  ';'  expected	143	None	replace
482	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  lj[i]  =  Math.max(lJ[j],  maxDelta);  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  lj[i]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[j],    maxDelta);    lj[i]  =  Math.max(lJ[j],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lj	108	None	add
483	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(l  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(l  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        Math.abs(lIJ        -        lJI));        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(l	  	non-compiled	[CE]  ')'  expected	1	None	add
484	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI)));    	compilable	  [FE]  AssertionError  	41	5	replace
485	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)),  absolutePositivityThreshold);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI)));    	compilable	  [FE]  AssertionError  	41	5	replace
486	[BUG]  [BUGGY]  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  ']'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    int    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ']'  expected	107	None	replace
487	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lTData));  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lTData));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  lTData));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	78	None	replace
488	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  absolutePositivityThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  absolutePositivityThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lTData,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	78	None	replace
489	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(maxDelta,  absolutePositivityThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(maxDelta,  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(maxDelta,  absolutePositivityThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	98	None	replace
490	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  cannot  find  symbol  LtQ  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold));    	non-compiled	[CE]  cannot  find  symbol  LtQ	98	None	replace
491	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  q;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
492	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
493	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  q;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  }	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
494	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  inconvertible  types  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	70	None	replace
495	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ  -  lJI)));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ  -  lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ  -  lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  ';'  expected	95	None	replace
496	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lj[j]  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  cannot  find  symbol  lj  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  lj[j]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.max(relativeSymmetryThreshold,    0);    lj[j]  =  Math.max(relativeSymmetryThreshold,  0);	  	non-compiled	[CE]  cannot  find  symbol  lj	134	None	add
497	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(lJ[i],  lIJ);	  lJ[i]    =    Math.max(lJ[i],    lJI);    	compilable	  [FE]  AssertionError  	10	5	replace
498	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lIJ);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lIJ);	  lJ[i]    =    Math.max(lJ[i],    lJI);    	compilable	  [FE]  AssertionError  	10	5	replace
499	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  maxDelta);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  maxDelta);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  incompatible  types	53	None	replace
500	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ))  +  1;  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ))  +  1;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ))  +  1;	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	94	None	replace
501	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJAI  -  lJI));  [CE]  cannot  find  symbol  lJAI  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.max(relativeSymmetryThreshold,  Math.abs(lJAI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Math.max(relativeSymmetryThreshold,  Math.abs(lJAI  -  lJI));	  	non-compiled	[CE]  cannot  find  symbol  lJAI	124	None	add
502	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  ltQ));  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  ltQ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  ltQ));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	40	None	replace
503	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrix  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  Matrix	144	None	add
504	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  lJI);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  lJI);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  lJI);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	86	None	replace
505	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  lj[i]  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  lj[i]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    lj[i]  =  Math.max(relativeSymmetryThreshold,  0);	  	non-compiled	[CE]  cannot  find  symbol  lj	74	None	add
506	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  0);  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  0);	  ltQ    =    Math.max(relativeSymmetryThreshold,    lJ);    	non-compiled	[CE]  cannot  find  symbol  ltQ	23	None	replace
507	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	122	5	replace
508	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absolutePositivityThreshold);  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	122	5	replace
509	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI),  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	122	None	replace
510	[BUG]  [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;  [CE]  cannot  find  symbol  LJ  [FE]        NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  LJ	138	None	replace
511	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  lJ[i]  =  Math.max(lJ[i],  ljI);  [CE]  cannot  find  symbol  ljI  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  lJ[i]  =  Math.max(lJ[i],  ljI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    lJI);    lJ[i]  =  Math.max(lJ[i],  ljI);	  	non-compiled	[CE]  cannot  find  symbol  ljI	9	None	add
512	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
513	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  [CE]  ';'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	69	None	replace
514	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ),  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	54	None	replace
515	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	56	4	replace
516	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold,  relativeSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	56	4	replace
517	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[0]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[0]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    }    	compilable	  [FE]  AssertionError  	83	5	replace
518	[BUG]  [BUGGY]  lJ[0]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[0]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[0]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    }    	compilable	  [FE]  AssertionError  	83	5	replace
519	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  2);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  2);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	75	5	replace
520	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  2);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  2);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  2);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    0);    	compilable	  [FE]  AssertionError  	75	5	replace
521	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
522	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
523	[BUG]  [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lj[i],  maxDelta);  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lj[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lj[i],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lj	42	None	add
524	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Integer  lJI  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Integer  lJI  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Integer  lJI  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	34	None	add
525	[BUG]  [BUGGY]  float  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  float  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	float  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
526	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold),  absoluteSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold),  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
527	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
528	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold));  [CE]  no  suitable  method  found  for  max(double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  absolutePositivityThreshold));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
529	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI  +  1));  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI  +  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI  +  1));	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	147	None	replace
530	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  [CE]  cannot  find  symbol  minDelta  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(minDelta));	  	non-compiled	[CE]  cannot  find  symbol  minDelta	25	None	add
531	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrix  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol  Matrix	27	None	replace
532	[BUG]  [BUGGY]  matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
533	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	50	5	replace
534	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	50	5	replace
535	[BUG]  [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [CE]  cannot  find  symbol  LJ  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  cannot  find  symbol  LJ	116	None	replace
536	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  lJI));  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  lJI));	  Math.max(relativeSymmetryThreshold,    maxDelta));    	non-compiled	[CE]  ';'  expected	17	None	replace
537	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  }  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  }	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    lJI,    l    	non-compiled	[CE]  ')'  expected	113	None	replace
538	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  q;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
539	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lQ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
540	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1),  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	140	None	replace
541	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI  +  1));  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI  +  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI  +  1));	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    +    1));    	non-compiled	[CE]  incompatible  types	140	None	replace
542	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  maxDelta);  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  maxDelta);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	39	None	replace
543	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	55	2	add
544	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	55	2	add
545	[BUG]  [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                lJ[i]        =        Math.max(relativeSymmetryThreshold,        relativeSymmetryThreshold);        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  LJ	55	None	add
546	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  lJ[i]  =  Math.min(lJ[i],  ljI);  [CE]  cannot  find  symbol  ljI  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  lJ[i]  =  Math.min(lJ[i],  ljI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.min(lJ[i],    lJI);    lJ[i]  =  Math.min(lJ[i],  ljI);	  	non-compiled	[CE]  cannot  find  symbol  ljI	11	None	add
547	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  *  lJI));	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  incompatible  types	93	None	replace
548	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  ')'  expected	25	None	add
549	[BUG]  [BUGGY]  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelta    	non-compiled	[CE]  not  a  statement	129	None	replace
550	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI  -  lJI));  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI  -  lJI));	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	147	None	replace
551	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	compilable	  [FE]  AssertionError  	124	2	add
552	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	compilable	  [FE]  AssertionError  	124	2	add
553	[BUG]  [BUGGY]  RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	RelativeSymmetryThreshold  relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
554	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  (relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  ')'  expected	30	None	replace
555	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  ltData.length;  ++i)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  ltData.length;  ++i)  {	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
556	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lDelta;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lDelta;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lDelta;  ++i)  {  final  double[][]  lTData  =  lTData[i];	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
557	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absoluteSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	39	None	replace
558	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absoluteSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	39	None	replace
559	[BUG]  [BUGGY]  Math.max(Math.abs(lJ)),  Math.abs(lJ));  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJ)),  Math.abs(lJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJ)),  Math.abs(lJ));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  ';'  expected	33	None	replace
560	[BUG]  [BUGGY]  Math.max(Math.abs(lJ)),  Math.abs(lJI));  [CE]  ';'  expected  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJ)),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJ)),  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  ';'  expected	33	None	replace
561	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  absoluteSymmetryThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)),    relativeSymmetryThreshold);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	61	None	replace
562	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)/  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)/  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    	compilable	  [FE]  AssertionError  	52	4	replace
563	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)/  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)/  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI)/  1);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI)    +    1);    	compilable	  [FE]  AssertionError  	52	4	replace
564	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));  [CE]  cannot  find  symbol  ljI  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  ljI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    ljI));    	non-compiled	[CE]  cannot  find  symbol  ljI	3	None	replace
565	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.min(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  ')'  expected	144	None	add
566	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  0);  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  0);	  ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  ltQ	14	None	replace
567	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  LtQ  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold,  maxDelta);	  ltQ    =    Math.max(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol  LtQ	22	None	replace
568	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lJA[j]  =  Math.min(lJ[j],  maxDelta);  [CE]  cannot  find  symbol  lJA  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  lJA[j]  =  Math.min(lJ[j],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    Math.min(lJ[j],    maxDelta);    lJA[j]  =  Math.min(lJ[j],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lJA	104	None	add
569	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold,  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	20	None	replace
570	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0  [CE]  ';'  expected  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	68	None	replace
571	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(lJ[j],  lIJ);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	63	5	replace
572	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  lIJ);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[j],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(lJ[j],  lIJ);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	63	5	replace
573	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lTData[j],  lJI);  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lTData[j],  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(lTData[j],  lJI);	  lJ[j]    =    Math.max(lJ[j],    maxDelta);    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	63	None	replace
574	[BUG]  [BUGGY]  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lDelta),  Math.abs(maxDelta));  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lDelta),  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  lDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lDelta),  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
575	[BUG]  [BUGGY]  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int    lDelta    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  possible  loss  of  precision	119	None	replace
576	[BUG]  [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lY[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  cannot  find  symbol  lY  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lY[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]        =        Math.max(lJ[i],        maxDelta);        lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lY[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lY	42	None	add
577	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absoluteSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	53	None	replace
578	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold,  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	53	None	replace
579	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
580	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
581	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  }  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lTQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lTQ;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  >>  }	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lJ    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
582	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI)));    lJ[j]    =    0;    	non-compiled	[CE]  ';'  expected	118	None	replace
583	[BUG]  [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  j  <  order;  ++i)  {  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  j  <  order;  ++i)  {	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
584	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	2	2	replace
585	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	2	2	replace
586	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold,  absoluteSymmetryThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	100	None	replace
587	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [CE]  inconvertible  types  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	70	None	replace
588	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [CE]  inconvertible  types  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	70	None	replace
589	[BUG]  [BUGGY]  return  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  return  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	return  Math.max(relativeSymmetryThreshold,  lJI);	          return    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	127	None	replace
590	[BUG]  [BUGGY]  lJ[j]  =  1;  lJ[j]  =  1;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  1;  lJ[j]  =  1;  }  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    1;    lJ[j]  =  1;  }	  	non-compiled	[CE]  illegal  start  of  type	64	None	add
591	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	5	replace
592	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	5	replace
593	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	5	replace
594	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	5	replace
595	[BUG]  [BUGGY]  Math.max(Math.abs(lJI  -  lJI)/  2);  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lJI  -  lJI)/  2);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI  -  lJI)/  2);	  Math.max(Math.abs(lJI    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	150	None	replace
596	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI)));  [CE]  no  suitable  method  found  for  max(double)  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    Math.abs(lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	41	None	replace
597	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  LtQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold));	  ltQ    =    Math.max(relativeSymmetryThreshold    /    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  LtQ	77	None	replace
598	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lIJ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  i  =  0;  i  <  lIJ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  lIJ;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l	          for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i    +    1][j];    System.arraycopy(lTData[i],    0,    lJI,    l    	non-compiled	[CE]  ')'  expected	113	None	replace
599	[BUG]  [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  LJ  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    LJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  LJ	57	None	replace
600	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJI));  [CE]  inconvertible  types  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	117	None	replace
601	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [CE]  inconvertible  types  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	117	None	replace
602	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  inconvertible  types  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    	non-compiled	[CE]  inconvertible  types	117	None	replace
603	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  absolutePositivityThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ    -    lJI));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
604	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  relativeSymmetryThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  relativeSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI),  relativeSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    Math.abs(lJ    -    lJI));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	38	None	replace
605	[BUG]  [BUGGY]  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt	          for(int    i    =    0;    i    <    order;    ++i)    {    double[][]    lTData    =    lTData[i    +    1];    for(int    j    =    0;    j    <    lTData.length;    ++j)    {    maxDelt    	non-compiled	[CE]  not  a  statement	128	None	replace
606	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  ltI));  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  ltI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  ltI));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(lJ,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	76	None	replace
607	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double,double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold,  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double,double)	86	None	replace
608	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)/  absolutePositivityThreshold);  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)/  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)/  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI),    absolutePositivityThreshold);    	non-compiled	[CE]  incompatible  types	92	None	replace
609	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    relativeSymmetryThreshold));    	non-compiled	[CE]  ')'  expected	40	None	replace
610	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  absoluteSymmetryThreshold));  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  absoluteSymmetryThreshold));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  absoluteSymmetryThreshold));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	40	None	replace
611	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI  +  1));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI  +  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI  +  1));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    relativeSymmetryThreshold));    	non-compiled	[CE]  ')'  expected	40	None	replace
612	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lIJ)));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lIJ)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lIJ)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  ';'  expected	95	None	replace
613	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  1)));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  1)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  1)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  ';'  expected	95	None	replace
614	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJI,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(lJI,  absolutePositivityThreshold);	  lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	85	5	replace
615	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJI,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.min(lJI,  absolutePositivityThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJI,  absolutePositivityThreshold);	  lJ[i]    =    Math.min(relativeSymmetryThreshold,    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	85	5	replace
616	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	                Math.max(relativeSymmetryThreshold,        Math.abs(maxDelta));        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  }	  	non-compiled	[CE]  illegal  start  of  type	120	None	add
617	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta));  [CE]  cannot  find  symbol  LtQ  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta));	  ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    maxDelta));    	non-compiled	[CE]  cannot  find  symbol  LtQ	97	None	replace
618	[BUG]  [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]        NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJI));  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI),  Math.abs(lJI));  lJ[j]  =  0;	  lJ[j]    =    0;    ((    RealMatrix)lJ).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lJI));    lJ[j]    =    0;    	non-compiled	[CE]  inconvertible  types	115	None	replace
619	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]    =    Math.max(lJ[i],    maxDelta);    }    	compilable	  [FE]  AssertionError  	45	5	replace
620	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[i],  maxDelta);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(lJ[i],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]    =    Math.max(lJ[i],    maxDelta);    }    	compilable	  [FE]  AssertionError  	45	5	replace
621	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	26	5	replace
622	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	26	5	replace
623	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  1));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	26	5	replace
624	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  1));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  1));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  1));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	26	5	replace
625	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1)-  1);  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1)-  1);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1)-  1);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI)-    1);    	non-compiled	[CE]  incompatible  types	91	None	replace
626	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(maxDelta));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    maxDelta));    	non-compiled	[CE]  ')'  expected	90	None	replace
627	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI),  Math.abs(maxDelta));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    maxDelta));    	non-compiled	[CE]  ')'  expected	90	None	replace
628	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  ltQ,  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  ltQ,  Math.abs(maxDelta));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)/  ltQ,  Math.abs(maxDelta));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI),    maxDelta));    	non-compiled	[CE]  ')'  expected	90	None	replace
629	[BUG]  [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  cannot  assign  a  value  to  final  variable  maxDelta  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrimeter.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  maxDelta	29	None	replace
630	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJI)),    relativeSymmetryThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	89	None	replace
631	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relative  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relative  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	if(relativeSymmetryThreshold  >  0)  {  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relative	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final    double[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  ']'  expected	59	None	replace
632	[BUG]  [BUGGY]  Math.max(Math.abs(lIJ  -  lJI));  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lIJ  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	37	None	replace
633	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  ltQ[i],  maxDelta,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(lJ[i],  ltQ[i],  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  ltQ[i],  maxDelta,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(lJ[i],    maxDelta,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	13	None	replace
634	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)));  [CE]  no  suitable  method  found  for  max(double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJI    -    lJ)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	142	None	replace
635	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));	  lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	101	None	replace
636	[BUG]  [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	int  order  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));	  if(relativeSymmetryThreshold    >    maxDelta)    {    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lTData    =    lTData[i];    }    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	5	None	replace
637	[BUG]  [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)));  [CE]  ';'  expected  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)));  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)));	  lJ[j]    =    0;    ((    RealMatrix)lJ[j]).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  ';'  expected	71	None	replace
638	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	34	2	add
639	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  	compilable	  [FE]  AssertionError  	34	2	add
640	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	  	non-compiled	[CE]  cannot  find  symbol  lj	49	None	add
641	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));	  	compilable	  [FE]  AssertionError  	36	2	add
642	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));	  	compilable	  [FE]  AssertionError  	36	2	add
643	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.min(lJ[j],  lIJ);	  lJ[j]    =    Math.min(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	105	5	replace
644	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  lIJ);  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]  =  Math.min(lJ[j],  lIJ);  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.min(lJ[j],  lIJ);	  lJ[j]    =    Math.min(lJ[j],    maxDelta);    	compilable	  [FE]  AssertionError  	105	5	replace
645	[BUG]  [BUGGY]  lTData[i]  =  Math.max(Math.abs(lIJ),  Math.abs(lJI),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lTData[i]  =  Math.max(Math.abs(lIJ),  Math.abs(lJI),  absolutePositivityThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(Math.abs(lIJ),  Math.abs(lJI),  absolutePositivityThreshold);	  lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	103	None	replace
646	[BUG]  [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  for(int  j  =  0;  j  <  1;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  j  =  0;  j  <  1;  ++j)  {  final  double[][]  lTData  =  lTData[j];	          for(int    j    =    0;    j    <    order;    ++j)    {    final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
647	[BUG]  [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  lj  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lj[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lj[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	          lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lj[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  lj	58	None	replace
648	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  absolutePositivityThreshold,  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
649	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]              AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absolutePositivityThreshold,  absoluteSymmetryThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	88	None	replace
650	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ),  Math.abs(lJI  -  lJI)));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ),  Math.abs(lJI  -  lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ),  Math.abs(lJI  -  lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	60	None	replace
651	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lIJ)));  [CE]  no  suitable  method  found  for  max(double)  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lIJ)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lIJ)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lJ    -    lIJ)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	60	None	replace
652	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
653	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  0;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
654	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
655	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  lJ[i]  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  lJ[i]  =  0;  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  maxDelta));  lJ[i]  =  0;	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    lJ[i]    =    0;    	compilable	  [FE]  AssertionError  	121	2	replace
656	[BUG]  [BUGGY]  Mat.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  cannot  find  symbol  Mat  [FE]            AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Mat.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Mat.max(relativeSymmetryThreshold,  Math.abs(lJI));	          Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Mat.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  cannot  find  symbol  Mat	28	None	replace
657	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
658	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  Math.max(relativeSymmetryThreshold,    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	125	5	replace
659	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI)));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lJI    -    lJ)));    	non-compiled	[CE]  ';'  expected	143	None	replace
660	[BUG]  [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0,  lJ[j]  =  0;  lJ[j]  =  0;  [CE]  ';'  expected  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lJ[j]  =  0,  lJ[j]  =  0;  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]        =        0;        lJ[j]    =    0;    lJ[j]  =  0,  lJ[j]  =  0;  lJ[j]  =  0;	  	non-compiled	[CE]  ';'  expected	66	None	add
661	[BUG]  [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lj[j]  =  0;  lJ[j]  =  0;  [CE]  cannot  find  symbol  lj  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[j]    =    0;    lJ[j]  =  0;  lj[j]  =  0;  lJ[j]  =  0;  [BUGGY]      }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]        =        0;        lJ[j]    =    0;    lj[j]  =  0;  lJ[j]  =  0;	  	non-compiled	[CE]  cannot  find  symbol  lj	66	None	add
662	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  minDelta);  [CE]  cannot  find  symbol  minDelta  [FE]    AssertionError    [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  minDelta);  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    maxDelta);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  minDelta);	  	non-compiled	[CE]  cannot  find  symbol  minDelta	72	None	add
663	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI),  Math.abs(lJI));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI),  Math.abs(lJI));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ')'  expected	48	None	replace
664	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI)));  [CE]  no  suitable  method  found  for  min(double)  [FE]                    AssertionError      [CONTEXT]        for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }      [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI)));  [BUGGY]      lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI)));	  lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.min(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  min(double)	48	None	replace
