bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  	compilable	  [FE]  AssertionError  	11	2	add
2	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  	compilable	  [FE]  AssertionError  	11	2	add
3	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI));  [CE]  cannot  find  symbol  ljI  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  ljI));	  	non-compiled	[CE]  cannot  find  symbol  ljI	11	None	add
4	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [CE]  cannot  find  symbol  LJ  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    LJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  	non-compiled	[CE]  cannot  find  symbol  LJ	11	None	add
5	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
6	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
7	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  }  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  }	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
8	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[j];	      	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
9	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(lJ[i],  lJI);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	2	5	replace
10	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  lJI);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  lJI);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	2	5	replace
11	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(lJ[i],  lJI);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	2	5	replace
12	[BUG]  [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.min(lJ[i],  lJI);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(lJ[i],  lJI);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	2	5	replace
13	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta,  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta,  relativeSymmetryThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[i],  maxDelta,  relativeSymmetryThreshold);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	2	None	replace
14	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold)*  Math.max(relativeSymmetryThreshold,  maxDelta);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	22	None	replace
15	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	22	None	replace
16	[BUG]  [BUGGY]      if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        if(relativeSymmetryThreshold  >  maxDelta)  {  for(int  j  =  0;  j  <  lJ.length;  ++j)  {  final  double[][]  lTData  =  lTData[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
17	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  maxDelta));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  maxDelta));	      Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  ';'  expected	14	None	replace
18	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  0));  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  0));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  0));	      Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  ';'  expected	14	None	replace
19	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));	      Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  ';'  expected	14	None	replace
20	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold);	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	17	None	replace
21	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)+  1);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)+  1);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)+  1);	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	17	None	replace
22	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  cannot  find  symbol  ltQ  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	20	None	replace
23	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJ);  [CE]  cannot  find  symbol  ltQ  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJ);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  lJ);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	20	None	replace
24	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI);  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  lJI);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	20	None	replace
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	15	2	add
26	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	15	2	add
27	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrix  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrix.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  Matrix	15	None	add
28	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Mat  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Mat.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  Mat	15	None	add
29	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrimeter.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  cannot  find  symbol  Matrimeter  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Matrimeter.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Matrimeter.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  cannot  find  symbol  Matrimeter	15	None	add
30	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  (relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    (relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  ')'  expected	15	None	add
31	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	23	None	replace
32	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  maxDelta)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	23	None	replace
33	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	16	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	16	5	replace
35	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	16	5	replace
36	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	16	5	replace
37	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	16	5	replace
38	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJ  -  lJI));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	16	None	replace
39	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  relativeSymmetryThreshold);	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	7	None	replace
40	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold));  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  relativeSymmetryThreshold));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	7	None	replace
41	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)));  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  Math.abs(lJI)));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	7	None	replace
42	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	compilable	  [FE]  AssertionError  	1	2	add
43	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	compilable	  [FE]  AssertionError  	1	2	add
44	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  LJ[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  LJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    maxDelta);    LJ[i]  =  Math.max(lJ[i],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  LJ	1	None	add
45	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lJ[i]  =  Math.max(lJ[i],  maxDelta);  }  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    maxDelta);    lJ[i]  =  Math.max(lJ[i],  maxDelta);  }	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
46	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  int  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  int  lJ[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    maxDelta);    int  lJ[i]  =  Math.max(lJ[i],  maxDelta);	  	non-compiled	[CE]  ']'  expected	1	None	add
47	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ')'  expected	10	None	replace
48	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI));  [CE]  ')'  expected  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ  -  lJI));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ')'  expected	10	None	replace
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	12	4	replace
50	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	12	4	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	12	5	replace
52	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI)  +  1);	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	compilable	  [FE]  AssertionError  	12	5	replace
53	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  relativeSymmetryThreshold);	      lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ));    	non-compiled	[CE]  incompatible  types	18	None	replace
54	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ));	      lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	18	None	replace
55	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	compilable	  [FE]  AssertionError  	8	2	add
56	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	compilable	  [FE]  AssertionError  	8	2	add
57	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    LJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  LJ	8	None	add
58	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lj[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  lj  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lj[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lj[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  lj	8	None	add
59	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    final  double[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  ']'  expected	8	None	add
60	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ)));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ)));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lIJ)));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
61	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  relativeSymmetryThreshold);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJ)),  relativeSymmetryThreshold);	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(lJ[j],  maxDelta);	  lJ[j]    =    0;    	compilable	  [FE]  AssertionError  	4	5	replace
63	[BUG]  [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(lJ[j],  maxDelta);	  lJ[j]    =    0;    	compilable	  [FE]  AssertionError  	4	5	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  1;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  1;	  lJ[j]    =    0;    	compilable	  [FE]  AssertionError  	4	6	replace
65	[BUG]  [BUGGY]  lJ[j]  =  1;  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  1;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  1;	  lJ[j]    =    0;    	compilable	  [FE]  AssertionError  	4	6	replace
66	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]    =    0;    lJ[j]  =  0;	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	3	5	add
67	[BUG]  [BUGGY]  lJ[j]  =  0;  lJ[j]  =  0;  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    lJ[j]  =  0;	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	3	5	add
68	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;	  	non-compiled	[CE]  inconvertible  types	3	None	add
69	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  lJ[j]  =  0;	  	non-compiled	[CE]  ';'  expected	3	None	add
70	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [CE]  inconvertible  types  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));	  	non-compiled	[CE]  inconvertible  types	3	None	add
71	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  [CE]  ';'  expected  [FE]            NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ[j]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)));	  	non-compiled	[CE]  ';'  expected	3	None	add
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	9	5	replace
73	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  maxDelta);	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	9	5	replace
74	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	9	4	replace
75	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold,  0);	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	compilable	  [FE]  AssertionError  	9	4	replace
76	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lJ,  relativeSymmetryThreshold));	      ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
77	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  /  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold));	      ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
78	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  relativeSymmetryThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(lTData,  relativeSymmetryThreshold));	      ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	25	2	add
80	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	compilable	  [FE]  AssertionError  	25	2	add
81	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LJ  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    LJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  cannot  find  symbol  LJ	25	None	add
82	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  ']'  expected	25	None	add
83	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  }  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  }	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	26	4	replace
85	[BUG]  [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	compilable	  [FE]  AssertionError  	26	4	replace
86	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  relativeSymmetryThreshold);	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	19	None	replace
87	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	22	None	replace
88	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI)),  absolutePositivityThreshold);	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	7	None	replace
89	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double)  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  relativeSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI)),  relativeSymmetryThreshold);	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	7	None	replace
90	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta));  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI),  maxDelta));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	7	None	replace
91	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)-  1);  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)-  1);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI)-  1);	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	17	None	replace
92	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  absolutePositivityThreshold);	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	17	None	replace
93	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	17	None	replace
94	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ)));  [CE]  ';'  expected  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ)));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lJ)));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)));    	non-compiled	[CE]  ';'  expected	13	None	replace
95	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lIJ)));  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lIJ)));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJ  -  lIJ)));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)));    	non-compiled	[CE]  ';'  expected	13	None	replace
96	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(maxDelta,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(maxDelta,  relativeSymmetryThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(maxDelta,  relativeSymmetryThreshold));	      ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
97	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta));  [CE]  cannot  find  symbol  ltQ  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta));	      ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
98	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold));	      ltQ    =    Math.max(relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
99	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lj[i]  =  Math.max(lJ[i],  maxDelta);  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[i],  maxDelta);  lj[i]  =  Math.max(lJ[i],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(lJ[i],    maxDelta);    lj[i]  =  Math.max(lJ[i],  maxDelta);	  	non-compiled	[CE]  cannot  find  symbol  lj	1	None	add
100	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold);  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  absolutePositivityThreshold);	      lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ));    	non-compiled	[CE]  incompatible  types	18	None	replace
101	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI));  [CE]  no  suitable  method  found  for  max(double)  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI));	      lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	18	None	replace
102	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	19	None	replace
103	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]                  AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ),  absolutePositivityThreshold);	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	19	None	replace
104	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.min(lJ[j],  maxDelta);	  lJ[j]    =    0;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	4	5	replace
105	[BUG]  [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.min(lJ[j],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.min(lJ[j],  maxDelta);	  lJ[j]    =    0;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	4	5	replace
106	[BUG]  [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  LtQ  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	LtQ  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  LtQ	23	None	replace
107	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [CE]  ']'  expected  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    int  lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  	non-compiled	[CE]  ']'  expected	11	None	add
108	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[i]  =  Math.max(lJ[j],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	2	5	replace
109	[BUG]  [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(lJ[j],  maxDelta);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(lJ[j],  maxDelta);	  lJ[i]    =    Math.max(lJ[i],    maxDelta);    	compilable	  [FE]  AssertionError  	2	5	replace
110	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold));	      Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold));    	non-compiled	[CE]  ';'  expected	14	None	replace
111	[BUG]  [BUGGY]      for(int  j  =  0;  j  <  order;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  j  =  0;  j  <  order;  ++j)  {  final  double[][]  lTData  =  lTData[j];  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  j  =  0;  j  <  order;  ++j)  {  final  double[][]  lTData  =  lTData[j];	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
112	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
113	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [CE]  ')'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  lJI,  l	  	non-compiled	[CE]  ')'  expected	5	None	add
114	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [CE]  ')'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  lTData[i  +  1][j];  System.arraycopy(lTData[i],  0,	  	non-compiled	[CE]  ')'  expected	5	None	add
115	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  lJ[j]  =  0;	  	non-compiled	[CE]  inconvertible  types	3	None	add
116	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ  -  lJI));  lJ[j]  =  0;	  	non-compiled	[CE]  inconvertible  types	3	None	add
117	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [CE]  inconvertible  types  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI));	  	non-compiled	[CE]  inconvertible  types	3	None	add
118	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [CE]  ';'  expected  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ  -  lJI)));  lJ[j]  =  0;	  	non-compiled	[CE]  ';'  expected	3	None	add
119	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  int  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    int  lDelta  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	non-compiled	[CE]  possible  loss  of  precision	15	None	add
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;	  	compilable	  [FE]  AssertionError  	15	2	add
121	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  lJ[i]  =  0;	  	compilable	  [FE]  AssertionError  	15	2	add
122	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI));  [CE]  no  suitable  method  found  for  max(double)  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJI));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	10	None	replace
123	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    lJ[i]  =  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	8	None	add
124	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	16	5	replace
125	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(relativeSymmetryThreshold,  Math.abs(lJI  -  lJI));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	compilable	  [FE]  AssertionError  	16	5	replace
126	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]    =    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    lj[i]  =  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  	non-compiled	[CE]  cannot  find  symbol  lj	25	None	add
127	[BUG]  [BUGGY]      return  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  return  a  value  from  method  whose  result  type  is  void  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      return  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        return  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  	non-compiled	[CE]  cannot  return  a  value  from  method  whose  result  type  is  void	5	None	add
128	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt  [CE]  ']'  expected  [FE]      AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelt	  	non-compiled	[CE]  ']'  expected	5	None	add
129	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta  [CE]  ']'  expected  [FE]        AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  maxDelta	  	non-compiled	[CE]  ']'  expected	5	None	add
130	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lJ	  	non-compiled	[CE]  ';'  expected	5	None	add
131	[BUG]  [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [CE]  illegal  start  of  expression  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        for(int  i  =  0;  i  <  order;  ++i)  {  double[][]  lTData  =  lTData[i  +  1];  for(int  j  =  0;  j  <  lTData.length;  ++j)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
132	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  lJ[j]    =    0;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	4	5	replace
133	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  lJ[j]    =    0;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	4	5	replace
134	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);	  lJ[j]    =    0;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	4	5	replace
135	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  0);	  lJ[j]    =    0;    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	4	5	replace
136	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);	  lJ[j]    =    0;    	compilable	  [FE]  AssertionError  	4	5	replace
137	[BUG]  [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [FE]  AssertionError  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]  =  Math.max(relativeSymmetryThreshold,  lJI);	  lJ[j]    =    0;    	compilable	  [FE]  AssertionError  	4	5	replace
138	[BUG]  [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;  [CE]  inconvertible  types  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[j]  =  0;  ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;  [BUGGY]    }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[j]    =    0;    ((  RealMatrix)lJ).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  lJ[j]  =  0;	  	non-compiled	[CE]  inconvertible  types	3	None	add
139	[BUG]  [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [CE]  cannot  find  symbol  lj  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      lJ[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    lj[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ  -  lJI));	  	non-compiled	[CE]  cannot  find  symbol  lj	11	None	add
140	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  incompatible  types	17	None	replace
141	[BUG]  [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI));  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(Math.abs(lIJ  -  lJI));	      lJ[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	12	None	replace
142	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJ)));  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJ)));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJ)));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	13	None	replace
143	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ)));  [CE]  ';'  expected  [FE]                  AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ)));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI  -  lJ)));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJ)));    	non-compiled	[CE]  ';'  expected	13	None	replace
144	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	add	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	15	2	add
145	[BUG]  [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]      Math.max(relativeSymmetryThreshold,  Math.abs(maxDelta));  Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	        Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    Math.min(relativeSymmetryThreshold,  Math.abs(maxDelta));	  	compilable	  [FE]  AssertionError  	15	2	add
146	[BUG]  [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	ltQ  =  Math.max(relativeSymmetryThreshold,  lJI)*  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      ltQ    =    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold)*    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  ltQ	23	None	replace
147	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI));  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lIJ),  Math.abs(lJI));	      lTData[i]    =    Math.max(relativeSymmetryThreshold    *    Math.abs(lIJ));    	non-compiled	[CE]  incompatible  types	18	None	replace
148	[BUG]  [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ)-  1);  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ)-  1);  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lTData[i]  =  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ)-  1);	      lTData[i]    =    Math.max(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  incompatible  types	19	None	replace
149	[BUG]  [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [CE]  ')'  expected  [FE]            AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	lJ[i]  =  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI  -  lJI));	      lJ[i]    =    Math.max(relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ    -    lJI));    	non-compiled	[CE]  ')'  expected	10	None	replace
150	[BUG]  [BUGGY]  Math.max(Math.abs(lJI  -  lJI));  [CE]  no  suitable  method  found  for  max(double)  [FE]    AssertionError    [CONTEXT]      for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }    [BUGGY]  Math.max(Math.abs(lJI  -  lJI));  [BUGGY]    lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  ltI  =  lTData[i];    [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	127	127	2	replace	Math.max(Math.abs(lJI  -  lJI));	      Math.max(relativeSymmetryThreshold,    Math.abs(maxDelta));    	non-compiled	[CE]  no  suitable  method  found  for  max(double)	16	None	replace
