bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	8	3	replace
2	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	8	3	replace
3	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	8	None	replace
4	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	8	None	replace
5	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	add
6	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lIJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lIJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  lIJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	add
7	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  not  a  statement  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	7	None	add
8	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJA),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	add
9	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
10	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
11	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
12	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
13	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absoluteSymmetryThreshold);	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
14	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absoluteSymmetryThreshold,  absolutePositivityThreshold);	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
15	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  relativeSymmetryThreshold);	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
16	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i];  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lQ  =  lQ[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i];	      final    double[][]    lQ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	5	None	replace
17	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ;  [CE]  incompatible  types  [FE]                  AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  lQ;	      final    double[][]    lQ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	5	None	replace
18	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[j];  [CE]  incompatible  types  [FE]                    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lQ  =  lTData[j];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[j];	      final    double[][]    lQ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	5	None	replace
19	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
20	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
21	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lIJ));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	22	None	replace
22	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJ));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
23	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJ));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
24	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
25	[BUG]  [BUGGY]  final  double[][]  lJ  =  lJ[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lJ  =  lJ[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lJ[i];	      final    double[][]    lIJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	3	None	replace
26	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	9	None	add
27	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	9	None	add
28	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIj),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIj),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIj),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	9	None	add
29	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	10	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	10	3	replace
31	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	10	3	replace
32	[BUG]  [BUGGY]  final  double[]  lJ  =  lJ[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[]  lJ  =  lJ[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lJ[i];	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
33	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[]  lJ  =  lTData[j];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[j];	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
34	[BUG]  [BUGGY]  final  double[]  lJ  =  ltData[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[]  lJ  =  ltData[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  ltData[i];	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
35	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	12	None	replace
36	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
37	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	add
38	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	11	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	3	replace
40	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	3	replace
41	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	2	replace
42	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	2	replace
43	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJI));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
44	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
45	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
46	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	6	None	replace
47	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	6	None	replace
48	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	6	None	replace
49	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	18	None	add
50	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    Final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	18	None	add
51	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	18	None	add
52	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lQ[i];  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTData  =  lTData[i],  lQ[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lQ[i];	      final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  ']'  expected	2	None	replace
53	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[i];  [CE]  ']'  expected  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJ[i];	      final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  ']'  expected	2	None	replace
54	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j];  [CE]  incompatible  types  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTData  =  lTData[j];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j];	      final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  incompatible  types	2	None	replace
55	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lJ  =  lTData[j];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[j];	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
56	[BUG]  [BUGGY]  final  double[][]  lJ  =  ltData[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lJ  =  ltData[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  ltData[i];	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
57	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	16	None	replace
58	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	16	None	replace
59	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold;	      final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  incompatible  types	2	None	replace
60	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold;  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold;	      final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  incompatible  types	2	None	replace
61	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold;	      final    double[][]    lQ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	5	None	replace
62	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	9	None	add
63	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	16	None	replace
64	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJ));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	16	None	replace
65	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
66	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
67	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
68	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
69	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	18	None	add
70	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	2	replace
71	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	2	replace
72	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	2	replace
73	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	19	2	replace
74	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  [absolutePositivityThreshold];	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
75	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  +  absolutePositivityThreshold;	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
76	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	6	None	replace
77	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
78	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	10	2	replace
80	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	10	2	replace
81	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1);  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1);	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	22	None	replace
82	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	8	3	replace
83	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	8	3	replace
84	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));  [CE]  cannot  find  symbol  lTQ  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lTQ	8	None	replace
85	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	12	None	replace
86	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(ljI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	add
87	[BUG]  [BUGGY]  final  double  lIJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
88	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	23	None	replace
89	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  [absolutePositivityThreshold];	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
90	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  absolutePositivityThreshold;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  +  absolutePositivityThreshold;	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
91	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[i];  [CE]  incompatible  types  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTJ  =  lTData[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[i];	      final    double[][]    lIJ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	3	None	replace
92	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  absolutePositivityThreshold);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  absolutePositivityThreshold);	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
93	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absolutePositivityThreshold);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(absolutePositivityThreshold,  absolutePositivityThreshold);	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
94	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	replace
95	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i].value;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[]  lJ  =  lTData[i].value;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i].value;	      final    double[]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	4	None	replace
96	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
97	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(0,  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(0,  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(0,  Math.abs(lJ));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	15	None	replace
98	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
99	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
100	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI));	      final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	23	None	replace
101	[BUG]  [BUGGY]  final  double  lIJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
102	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	6	None	replace
103	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ[i];  [CE]  ']'  expected  [FE]                AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  lQ[i];	      final    double[][]    lQ    =    lTData[i];    	non-compiled	[CE]  ']'  expected	5	None	replace
104	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i].symbol();  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lQ  =  lTData[i].symbol();  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i].symbol();	      final    double[][]    lQ    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
105	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJ));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
106	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	18	None	add
107	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	18	None	add
108	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lTQ[i];  [CE]  ']'  expected  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTData  =  lTData[i],  lTQ[i];  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lTQ[i];	      final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  ']'  expected	2	None	replace
109	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].symbol();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lTData  =  lTData[i].symbol();  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i].symbol();	      final    double[][]    lTData    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
110	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	add
111	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	8	None	replace
112	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	      final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	14	None	replace
113	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i].value;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double[][]  lJ  =  lTData[i].value;  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i].value;	      final    double[][]    lJ    =    lTData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	replace
114	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ));  [BUGGY]    final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ));	      final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	22	None	replace
115	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	add
116	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIj),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]    final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];    [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIj),  Math.abs(lJI));  [BUGGY]    relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIj),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	11	None	add
