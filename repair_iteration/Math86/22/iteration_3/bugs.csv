bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    absolutePositivityThreshold    *    Math.Max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol	115	None	replace
2	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    absolutePositivityThreshold    *    Math.Max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	115	None	replace
3	[BUG]  [BUGGY]  final  double[]  lJ  =  lJ[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lJ[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lJ[j];	  final    double[]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	33	None	replace
4	[BUG]  [BUGGY]  final  double[]  lJ  =  ltData[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  ltData[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  ltData[j];	  final    double[]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	33	None	replace
5	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  +  lJ;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i]  +  lJ;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  +  lJ;	  final    double[]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
6	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  +  lJI;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i]  +  lJI;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  +  lJI;	  final    double[]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
7	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  *  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i]  *  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  *  absolutePositivityThreshold;	  final    double[]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
8	[BUG]  [BUGGY]  final  double[]  lJ  =  lJ[i]  +  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lJ[i]  +  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lJ[i]  +  absolutePositivityThreshold;	  final    double[]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
9	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[j];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTJ  =  lTData[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[j];	  final    double[][]    lTJ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	91	None	replace
10	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[i],  lQ[i];  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTJ  =  lTData[i],  lQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[i],  lQ[i];	  final    double[][]    lTJ    =    lTData[i];    	non-compiled	[CE]  ']'  expected	91	None	replace
11	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[i]  +  1;  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTJ  =  lTData[i]  +  1;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[i]  +  1;	  final    double[][]    lTJ    =    lTData[i];    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	91	None	replace
12	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [CE]  cannot  find  symbol  ljI  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(ljI),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  ljI	69	None	replace
13	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(ljI),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	69	None	replace
14	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lJ);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lJ);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lJ);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
15	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJ,  relativeSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJ,  relativeSymmetryThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJ,  relativeSymmetryThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
16	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  absolutePositivityThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  absolutePositivityThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
17	[BUG]  [BUGGY]  final  double[][]  lJ  =  lJ[j];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lJ[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lJ[j];	  final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	55	None	replace
18	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[j];  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[j];	  final    double[][]    lQ    =    lTData[j];    	non-compiled	[CE]  incompatible  types	18	None	replace
19	[BUG]  [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
20	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
21	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j],  lJ[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[j],  lJ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j],  lJ[i];	  final    double[][]    lTData    =    lTData[i],    lJ[i];    	non-compiled	[CE]  ']'  expected	53	None	replace
22	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[0],  lJ[0];  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[0],  lJ[0];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[0],  lJ[0];	  final    double[][]    lTData    =    lTData[i],    lJ[i];    	non-compiled	[CE]  ']'  expected	53	None	replace
23	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[i]  +  1;  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[i]  +  1;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJ[i]  +  1;	  final    double[][]    lTData    =    lTData[i],    lJ[i];    	non-compiled	[CE]  ']'  expected	53	None	replace
24	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lTQ.symbol();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lTQ.symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lTQ.symbol();	  final    double[][]    lTData    =    lTData[i].symbol();    	non-compiled	[CE]  ';'  expected	109	None	replace
25	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j].symbol();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[j].symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j].symbol();	  final    double[][]    lTData    =    lTData[i].symbol();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
26	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData[i].symbol();  [CE]  cannot  find  symbol  ltData  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  ltData[i].symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  ltData[i].symbol();	  final    double[][]    lTData    =    lTData[i].symbol();    	non-compiled	[CE]  cannot  find  symbol  ltData	109	None	replace
27	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	40	3	replace
28	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	40	3	replace
29	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i].getValue();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i].getValue();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i].getValue();	  final    double[][]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
30	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].value;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[j].value;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[j].value;	  final    double[][]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
31	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i].symmetryThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i].symmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i].symmetryThreshold;	  final    double[][]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
32	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
33	[BUG]  [BUGGY]  final  double  lJI  =  lJ[absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJ[absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJ[absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ']'  expected	112	None	replace
34	[BUG]  [BUGGY]  final  double  lIJ  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    lIJ    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	101	None	replace
35	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.min(lJI,  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.min(lJI,  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.min(lJI,  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	5	None	replace
36	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	44	None	replace
37	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	23	None	replace
38	[BUG]  [BUGGY]  final  double  maxDelta  =  lQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  lQ  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  cannot  find  symbol  lQ	47	None	replace
39	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lQ,  lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lQ,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lQ,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	47	None	replace
40	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ,  lQ),  Math.abs(lJI,  lJI));  [CE]  cannot  find  symbol  lQ  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ,  lQ),  Math.abs(lJI,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ,  lQ),  Math.abs(lJI,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  cannot  find  symbol  lQ	47	None	replace
41	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
42	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI)  +  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI)  +  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI)  +  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
43	[BUG]  [BUGGY]  final  double[][]  lJ  =  lJ[0];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lJ[0];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lJ[0];	  final    double[][]    lJ    =    lJ[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	replace
44	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  absoluteSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  absoluteSymmetryThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  absoluteSymmetryThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(absolutePositivityThreshold,    absoluteSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
45	[BUG]  [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(absolutePositivityThreshold,    absoluteSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
46	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(absolutePositivityThreshold,    absoluteSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
47	[BUG]  [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(absolutePositivityThreshold,    absoluteSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
48	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	111	None	replace
49	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI));  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	111	None	replace
50	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	111	None	replace
51	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lIJ  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lIJ  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	80	3	replace
52	[BUG]  [BUGGY]  final  double  maxDelta  =  lIJ  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lIJ  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lIJ  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	80	3	replace
53	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJ.length  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJ.length  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	80	3	replace
54	[BUG]  [BUGGY]  final  double  maxDelta  =  lJ.length  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJ.length  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJ.length  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	80	3	replace
55	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	70	None	add
56	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    Final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	70	None	add
57	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	70	None	add
58	[BUG]  [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	68	None	replace
59	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ.symbol();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ.symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  lQ.symbol();	  final    double[][]    lQ    =    lTData[i].symbol();    	non-compiled	[CE]  ';'  expected	104	None	replace
60	[BUG]  [BUGGY]  final  double[][]  lQ  =  ltData[i].symbol();  [CE]  cannot  find  symbol  ltData  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  ltData[i].symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  ltData[i].symbol();	  final    double[][]    lQ    =    lTData[i].symbol();    	non-compiled	[CE]  cannot  find  symbol  ltData	104	None	replace
61	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[j].symbol();  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[j].symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[j].symbol();	  final    double[][]    lQ    =    lTData[i].symbol();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	49	3	replace
63	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  *  Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	49	3	replace
64	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	add
65	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    Final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	41	None	add
66	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.min(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	add
67	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	add
68	[BUG]  [BUGGY]  final  double[]  lJ  =  lQ[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lQ[i];	  final    double[]    lJ    =    ltData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	34	None	replace
69	[BUG]  [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	19	None	replace
70	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI)+  1);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI)+  1);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI)+  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	19	None	replace
71	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ],  Math.abs(lJI));  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ],  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ],  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	45	None	replace
72	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));	  final    double    maxDelta    =    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	4	None	replace
73	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI),  relativeSymmetryThreshold);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI),  relativeSymmetryThreshold);	  final    double    maxDelta    =    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	4	None	replace
74	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));	  final    double    maxDelta    =    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	4	None	replace
75	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI)/  2);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI)/  2);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI)/  2);	  final    double    maxDelta    =    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	4	None	replace
76	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	88	None	replace
77	[BUG]  [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	88	None	replace
78	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	2	replace
79	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	2	replace
80	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJI));  [CE]  no  suitable  method  found  for  max(double[],double)  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(lJ,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double[],double)	83	None	replace
81	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(lJI,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	2	replace
82	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(lJI,  Math.abs(lJI));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(lJI,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	2	replace
83	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j],  lIJ;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[j],  lIJ;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j],  lIJ;	  final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  incompatible  types	54	None	replace
84	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j].symmetry;  [CE]  cannot  find  symbol  symmetry  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[j].symmetry;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j].symmetry;	  final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  cannot  find  symbol  symmetry	54	None	replace
85	[BUG]  [BUGGY]  final  double  maxDelta  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    Final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	50	None	replace
86	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI)));  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI)));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI)));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	84	None	replace
87	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI)));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	84	None	replace
88	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ[j],  Math.abs(lJI)));  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ[j],  Math.abs(lJI)));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ[j],  Math.abs(lJI)));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI)));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	84	None	replace
89	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	105	None	replace
90	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	105	None	replace
91	[BUG]  [BUGGY]  final  double  maxDelta  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	85	None	replace
92	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	85	None	replace
93	[BUG]  [BUGGY]  final  double  maxDelta  =  lJ  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lIJ));  [CE]  bad  operand  types  for  binary  operator  '*'  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJ  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lIJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJ  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lIJ));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lIJ));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '*'	85	None	replace
94	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lIJ));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lIJ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	85	None	replace
95	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	30	None	add
96	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	30	None	add
97	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  minDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  minDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  minDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	30	None	add
98	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ,  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ,  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJ,  absolutePositivityThreshold;	  final    double[][]    lTData    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	59	None	replace
99	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJI;	  final    double[][]    lTData    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	59	None	replace
100	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJI,  absolutePositivityThreshold;	  final    double[][]    lTData    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	59	None	replace
101	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	add
102	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	1	None	add
103	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lIj),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lIj),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  Math.max(Math.abs(lIj),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	add
104	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI)  +  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI)  +  1);	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
105	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI)  +  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI)  +  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI)  +  1);	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
106	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.min(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
107	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.min(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
108	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [CE]  cannot  find  symbol  ljI  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(ljI));    	non-compiled	[CE]  cannot  find  symbol  ljI	62	None	replace
109	[BUG]  [BUGGY]  final  double  maxDelta  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));  [CE]  cannot  find  symbol  lTQ  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  relativeSymmetryThreshold));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  cannot  find  symbol  lTQ	48	None	replace
110	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	48	None	replace
111	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTQ,  lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTQ,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTQ,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	48	None	replace
112	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i],  lTData[i];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[i],  lTData[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i],  lTData[i];	  final    double[][]    lQ    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	103	None	replace
113	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i],  lTData[i].relativeSymmetryThreshold;  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[i],  lTData[i].relativeSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i],  lTData[i].relativeSymmetryThreshold;	  final    double[][]    lQ    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	103	None	replace
114	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[0],  lQ[i];  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[0],  lQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[0],  lQ[i];	  final    double[][]    lQ    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	103	None	replace
115	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(absolutePositivityThreshold,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(absolutePositivityThreshold,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(absolutePositivityThreshold,  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(lJI,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	replace
116	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJ,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJ,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(lJ,  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(lJI,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	replace
117	[BUG]  [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ1));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	58	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	27	3	replace
119	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(relativeSymmetryThreshold  /  Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	27	3	replace
120	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	96	None	replace
121	[BUG]  [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	96	None	replace
122	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.Max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
123	[BUG]  [BUGGY]  final  double[]  lJ  =  lJ[0];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lJ[0];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lJ[0];	  final    double[]    lJ    =    lJ[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	32	None	replace
124	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	65	None	replace
125	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData[lJI]));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData[lJI]));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lTData[lJI]));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	65	None	replace
126	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	79	None	add
127	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  Final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	79	None	add
128	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  /  Math.min(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	79	None	add
129	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i],  lJ[i];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[i],  lJ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i],  lJ[i];	  final    double[][]    lQ    =    lQ[i];    	non-compiled	[CE]  ']'  expected	16	None	replace
130	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[0];  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[0];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[0];	  final    double[][]    lQ    =    lQ[i];    	non-compiled	[CE]  incompatible  types	16	None	replace
131	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i].getValue();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i].getValue();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i].getValue();	  final    double[]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	95	None	replace
132	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j].value;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[j].value;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[j].value;	  final    double[]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	95	None	replace
133	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i].symmetryThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i].symmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i].symmetryThreshold;	  final    double[]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	95	None	replace
134	[BUG]  [BUGGY]  final  double[][]  lJ  =  lQ[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lQ[i];	  final    double[][]    lJ    =    ltData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	56	None	replace
135	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	72	None	add
136	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  Final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  Final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    Final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  	non-compiled	[CE]  not  a  statement	72	None	add
137	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1));  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1));	  	non-compiled	[CE]  ';'  expected	72	None	add
138	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [CE]  cannot  find  symbol  ljI  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(ljI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(ljI));    	non-compiled	[CE]  cannot  find  symbol  ljI	86	None	replace
139	[BUG]  [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	63	None	replace
140	[BUG]  [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	63	None	replace
141	[BUG]  [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	9	None	replace
142	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	51	2	replace
143	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	51	2	replace
144	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	51	None	replace
145	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)-  1);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)-  1);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ)-  1);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	24	None	replace
146	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j],  lQ[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[j],  lQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j],  lQ[i];	  final    double[][]    lTData    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	52	None	replace
147	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lQ[i]  +  1;  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lQ[i]  +  1;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lQ[i]  +  1;	  final    double[][]    lTData    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	52	None	replace
148	[BUG]  [BUGGY]  final  double  lJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	36	None	replace
149	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	36	None	replace
150	[BUG]  [BUGGY]  final  double  lIJ  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  lJ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lIJ    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	87	None	replace
151	[BUG]  [BUGGY]  final  double  lIJ  =  lJ.length  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  lJ.length  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  lJ.length  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lIJ    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	87	None	replace
152	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)/  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)/  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)/  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	73	None	replace
153	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	compilable	  [FE]  AssertionError  	73	2	replace
154	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)/  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	compilable	  [FE]  AssertionError  	73	2	replace
155	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	42	3	replace
156	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	42	3	replace
157	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	31	None	replace
158	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ),  Math.abs(lJI));  [CE]  cannot  find  symbol  lTQ  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lTQ	31	None	replace
159	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lIJ,  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lIJ,  Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lIJ,  Math.abs(lIJ));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
160	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(lIJ,  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(lIJ,  Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(lIJ,  Math.abs(lIJ));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
161	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lIJ));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
162	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)/  1);  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)/  1);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)/  1);	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ)-    1);    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	81	None	replace
163	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ)-    1);    	non-compiled	[CE]  ';'  expected	81	None	replace
164	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1,  lJI);  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1,  lJI);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1,  lJI);	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ)-    1);    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	81	None	replace
165	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIj),  Math.abs(lJI));  [CE]  cannot  find  symbol  lIj  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIj),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lIj),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIj),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lIj	28	None	replace
166	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i],  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[i],  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i],  absolutePositivityThreshold;	  final    double[][]    lQ    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	61	None	replace
167	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i],  absoluteSymmetryThreshold;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[i],  absoluteSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i],  absoluteSymmetryThreshold;	  final    double[][]    lQ    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	61	None	replace
168	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  absoluteSymmetryThreshold;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  absoluteSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  absoluteSymmetryThreshold;	  final    double[][]    lQ    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	61	None	replace
169	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	67	None	replace
170	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(1,  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(1,  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(1,  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(0,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	97	None	replace
171	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	add
172	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  Final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    Final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	82	None	add
173	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  final  double  maxDelta  =  ljI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  final  double  maxDelta  =  ljI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    final  double  maxDelta  =  ljI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	add
174	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(ljI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(ljI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(ljI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	82	None	add
175	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i],  lTData;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[i],  lTData;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i],  lTData;	  final    double[][]    lQ    =    lTData[i],    lQ;    	non-compiled	[CE]  incompatible  types	17	None	replace
176	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ[lJ];  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ[lJ];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  lQ[lJ];	  final    double[][]    lQ    =    lTData[i],    lQ;    	non-compiled	[CE]  ']'  expected	17	None	replace
177	[BUG]  [BUGGY]  final  double  lJ  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	10	None	replace
178	[BUG]  [BUGGY]  final  double  lJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	10	None	replace
179	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  [relativeSymmetryThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i]  [relativeSymmetryThreshold];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  [relativeSymmetryThreshold];	  final    double[][]    lJ    =    lTData[i]    [absolutePositivityThreshold];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	89	None	replace
180	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absoluteSymmetryThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absoluteSymmetryThreshold];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  [absoluteSymmetryThreshold];	  final    double[][]    lJ    =    lTData[i]    [absolutePositivityThreshold];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	89	None	replace
181	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	39	None	add
182	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  not  a  statement	39	None	add
183	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJAI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJAI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJAI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	39	None	add
184	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	99	None	replace
185	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  lJ;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  lJ;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  +  lJ;	  final    double[][]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	90	None	replace
186	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  *  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i]  *  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  *  absolutePositivityThreshold;	  final    double[][]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	90	None	replace
187	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  lJI;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i]  +  lJI;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  +  lJI;	  final    double[][]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	90	None	replace
188	[BUG]  [BUGGY]  final  double[][]  lJ  =  lJ[i]  +  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lJ[i]  +  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lJ[i]  +  absolutePositivityThreshold;	  final    double[][]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	90	None	replace
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	3	replace
190	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lJI));  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(absolutePositivityThreshold),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	35	3	replace
191	[BUG]  [BUGGY]  final  double  maxDelta  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJ  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	35	None	replace
192	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lQ));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	3	None	replace
193	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	3	None	replace
194	[BUG]  [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  super.relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	57	None	replace
195	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ1));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	57	None	replace
196	[BUG]  [BUGGY]  final  double  maxDelta  =  lJ  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJ  /  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJ  /  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	29	None	replace
197	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(LJ,  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(LJ,  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(LJ,  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	22	None	replace
198	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lJI));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	replace
199	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lIJ,  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lIJ,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lIJ,  Math.abs(lJI));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	replace
200	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lJI));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	replace
201	[BUG]  [BUGGY]  final  double  lIJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  parent.relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	114	None	replace
202	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  [relativeSymmetryThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i]  [relativeSymmetryThreshold];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  [relativeSymmetryThreshold];	  final    double[]    lJ    =    lTData[i]    [absolutePositivityThreshold];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	74	None	replace
203	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [CE]  cannot  find  symbol  lIJA  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lIJA),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJA),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lIJA	8	None	replace
204	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [CE]  cannot  find  symbol  lIJA  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJA),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJA),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lIJA	8	None	replace
205	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  2);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  2);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  2);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)+    1);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	46	None	replace
206	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)+    1);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	46	None	replace
207	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  incompatible  types	60	None	replace
208	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ,  absoluteSymmetryThreshold;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ,  absoluteSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJ,  absoluteSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  incompatible  types	60	None	replace
209	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  relativeSymmetryThreshold;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  relativeSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  incompatible  types	60	None	replace
210	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j],  lTQ[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[j],  lTQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j],  lTQ[i];	  final    double[][]    lTData    =    lTData[i],    lTQ[i];    	non-compiled	[CE]  ']'  expected	108	None	replace
211	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lTJ[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lTJ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lTJ[i];	  final    double[][]    lTData    =    lTData[i],    lTQ[i];    	non-compiled	[CE]  ']'  expected	108	None	replace
212	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIj),  Math.abs(lJI));  [CE]  cannot  find  symbol  lIj  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIj),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIj),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIj),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lIj	116	None	replace
213	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(absolutePositivityThreshold));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(absolutePositivityThreshold));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(absolutePositivityThreshold));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	35	None	replace
214	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;	  final    double[][]    lQ    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	61	None	replace
215	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j],  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[j],  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[j],  absolutePositivityThreshold;	  final    double[]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	33	None	replace
216	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(ljI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	1	None	add
217	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lIJ));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
218	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lIJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lIJ));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
219	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lIJ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lIJ));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	2	None	replace
220	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  +  1));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  +  1));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
221	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  +  1));  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  +  1));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  +  1));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
222	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[i],  lQ[i];  [CE]  ']'  expected  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[i],  lQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[i],  lQ[i];	  final    double[][]    lQ    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	103	None	replace
223	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ[j];  [CE]  ']'  expected  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  lQ[j];	  final    double[][]    lQ    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	103	None	replace
224	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix.symbol();  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  matrix.symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  matrix.symbol();	  final    double[][]    lTData    =    lTData[i].symbol();    	non-compiled	[CE]  ';'  expected	109	None	replace
225	[BUG]  [BUGGY]  final  double  maxDelta  =  lIJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  lIJI  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lIJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lIJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    lIJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lIJI	6	None	replace
226	[BUG]  [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
227	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	19	None	replace
228	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI  +  1));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI  +  1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	19	None	replace
229	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j],  absolutePositivityThreshold;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[j],  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[j],  absolutePositivityThreshold;	  final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	55	None	replace
230	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].doubleValue();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[j].doubleValue();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[j].doubleValue();	  final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	55	None	replace
231	[BUG]  [BUGGY]  final  double  lIJ  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    lIJ    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	101	None	replace
232	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	29	None	replace
233	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	compilable	  [FE]  AssertionError  	73	2	replace
234	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	compilable	  [FE]  AssertionError  	73	2	replace
235	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  ')'  expected  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	non-compiled	[CE]  ')'  expected	73	None	replace
236	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	99	None	replace
237	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[i],  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTJ  =  lTData[i],  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[i],  absolutePositivityThreshold;	  final    double[][]    lTJ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	91	None	replace
238	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[i],  absoluteSymmetryThreshold;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTJ  =  lTData[i],  absoluteSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[i],  absoluteSymmetryThreshold;	  final    double[][]    lTJ    =    lTData[i];    	non-compiled	[CE]  incompatible  types	91	None	replace
239	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	100	None	replace
240	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lIJ));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	114	None	replace
241	[BUG]  [BUGGY]  final  double[][]  lTData  =  lQ[i],  lTData[i];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lQ[i],  lTData[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lQ[i],  lTData[i];	  final    double[][]    lTData    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	52	None	replace
242	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lQ[j];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lQ[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lQ[j];	  final    double[][]    lTData    =    lTData[i],    lQ[i];    	non-compiled	[CE]  ']'  expected	52	None	replace
243	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  absoluteSymmetryThreshold,  absolutePositivityThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  incompatible  types	60	None	replace
244	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[j],  lIJ);  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[j],  lIJ);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[j],  lIJ);	  final    double[][]    lTData    =    lTData[j];    	non-compiled	[CE]  ';'  expected	54	None	replace
245	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
246	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i].summarySymbol();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i].summarySymbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i].summarySymbol();	  final    double[][]    lQ    =    lTData[i].symbol();    	non-compiled	[CE]  cannot  find  symbol	104	None	replace
247	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ1));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	58	None	replace
248	[BUG]  [BUGGY]  final  double  lIJ  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lIJ    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	87	None	replace
249	[BUG]  [BUGGY]  final  double  lIJ  =  lTData.length  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  lTData.length  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  lTData.length  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lIJ    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	87	None	replace
250	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  lJI  *  Math.max(Math.abs(ljI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	39	None	add
251	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	2	replace
252	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(lJI,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	2	replace
253	[BUG]  [BUGGY]  final  double  maxDelta  =  absoluteSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absoluteSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absoluteSymmetryThreshold  *  Math.max(lJI,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	83	None	replace
254	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	42	2	replace
255	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	42	2	replace
256	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ,  lJ;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  lQ,  lJ;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  lQ,  lJ;	  final    double[][]    lQ    =    lTData[i],    lQ;    	non-compiled	[CE]  incompatible  types	17	None	replace
257	[BUG]  [BUGGY]  final  double  maxDelta  =  parent.relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  parent  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  parent.relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  parent.relativeSymmetryThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  parent	27	None	replace
258	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	4	None	replace
259	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	4	None	replace
260	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.min(relativeSymmetryThreshold,  absolutePositivityThreshold);	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	94	None	replace
261	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  /  Math.max(Math.abs(lIJ),  Math.abs(ljI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	79	None	add
262	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lTData,  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lTData,  Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lTData,  Math.abs(lIJ));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
263	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI)+  1);  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)+  1);  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI)+  1);	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	72	None	add
264	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJI  +  1));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	3	None	replace
265	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  0);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  0);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  0);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
266	[BUG]  [BUGGY]  final  double  maxDelta  =  totalPositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  totalPositivityThreshold  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  totalPositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  totalPositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  totalPositivityThreshold	38	None	replace
267	[BUG]  [BUGGY]  final  int  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  int  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  int  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  possible  loss  of  precision	49	None	replace
268	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  absolutePositivityThreshold,  relativeSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	59	None	replace
269	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(RelativeSymmetryThreshold.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  RelativeSymmetryThreshold  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(RelativeSymmetryThreshold.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(RelativeSymmetryThreshold.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  RelativeSymmetryThreshold	31	None	replace
270	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  /  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	31	3	replace
271	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	31	3	replace
272	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));  [CE]  cannot  find  symbol  lTQ  [FE]        AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)));	  final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lTQ	31	None	replace
273	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lIJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lIJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  lIJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	30	None	add
274	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(l));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(l));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(l));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	64	None	replace
275	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lL));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lL));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  Math.abs(lL));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	64	None	replace
276	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  -  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	102	2	replace
277	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  -  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    -    lJI));    	compilable	  [FE]  AssertionError  	102	2	replace
278	[BUG]  [BUGGY]  final  int  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  int  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  int  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  possible  loss  of  precision	5	None	replace
279	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(ljI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(ljI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(ljI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	add
280	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(ljI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(ljI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(ljI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	add
281	[BUG]  [BUGGY]  final  double  lJ  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  super.relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	36	None	replace
282	[BUG]  [BUGGY]  final  double  lJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	36	None	replace
283	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[j],  lQ;  [CE]  incompatible  types  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[j],  lQ;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[j],  lQ;	  final    double[][]    lQ    =    lTData[j];    	non-compiled	[CE]  incompatible  types	18	None	replace
284	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[q];  [CE]  cannot  find  symbol  q  [FE]                          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[q];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[q];	  final    double[][]    lQ    =    lTData[j];    	non-compiled	[CE]  cannot  find  symbol  q	18	None	replace
285	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    Final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	50	None	replace
286	[BUG]  [BUGGY]  final  double  maxDelta  =  lRelativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  cannot  find  symbol  lRelativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lRelativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lRelativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    Final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lRelativeSymmetryThreshold	50	None	replace
287	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lIJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.min(lJI,  Math.abs(lIJ));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	replace
288	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	76	None	replace
289	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  relativeSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  relativeSymmetryThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(lJ,  relativeSymmetryThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	23	None	replace
290	[BUG]  [BUGGY]  final  double[][]  lQ  =  lQ[q];  [CE]  cannot  find  symbol  q  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lQ[q];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lQ[q];	  final    double[][]    lQ    =    lQ[i];    	non-compiled	[CE]  cannot  find  symbol  q	16	None	replace
291	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)-  1);  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)-  1);	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	111	None	replace
292	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI  +  1));  [CE]  ')'  expected  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI  +  1));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI  +  1));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	111	None	replace
293	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)+  1);  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI)+  1);	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	111	None	replace
294	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(0,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(0,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(0,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	43	None	replace
295	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i].value.doubleValue();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i].value.doubleValue();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i].value.doubleValue();	  final    double[]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	95	None	replace
296	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i].length;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i].length;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i].length;	  final    double[]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	95	None	replace
297	[BUG]  [BUGGY]  final  double  maxDelta  =  lQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lJI));  [CE]  cannot  find  symbol  lQ  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  cannot  find  symbol  lQ	47	None	replace
298	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lQ,  lJI));  [CE]  cannot  find  symbol  lQ  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lQ,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lQ,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  cannot  find  symbol  lQ	47	None	replace
299	[BUG]  [BUGGY]  final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  ljI  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    ljI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  ljI	110	None	replace
300	[BUG]  [BUGGY]  final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  cannot  find  symbol  ljI  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  ljI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    ljI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  ljI	110	None	replace
301	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.min(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	10	None	replace
302	[BUG]  [BUGGY]  final  double  lJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	10	None	replace
303	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	98	None	replace
304	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.log(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.log(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	57	None	replace
305	[BUG]  [BUGGY]  final  int  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  possible  loss  of  precision  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  int  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  int  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  possible  loss  of  precision	37	None	replace
306	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1,  lJ);  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1,  lJ);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ)-  1,  lJ);	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ)-    1);    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	81	None	replace
307	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  +  1;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i]  +  1;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  +  1;	  final    double[]    lJ    =    lTData[i]    +    absolutePositivityThreshold;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	75	None	replace
308	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)+    1);    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	46	None	replace
309	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(ljI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	70	None	add
310	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(ljI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(ljI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(ljI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	70	None	add
311	[BUG]  [BUGGY]  final  double[][]  lJ  =  lJ[i]  +  1;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lJ[i]  +  1;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lJ[i]  +  1;	  final    double[][]    lJ    =    lJ[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	replace
312	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i].value.doubleValue();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i].value.doubleValue();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i].value.doubleValue();	  final    double[][]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
313	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	65	None	replace
314	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI)));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI)));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lTData[j],  Math.abs(lJI)));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI)));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	84	None	replace
315	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[j];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[j];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJ[j];	  final    double[][]    lTData    =    lTData[i],    lJ[i];    	non-compiled	[CE]  ']'  expected	53	None	replace
316	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  lTQ));  [CE]  cannot  find  symbol  lTQ  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  lTQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  lTQ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  cannot  find  symbol  lTQ	48	None	replace
317	[BUG]  [BUGGY]  final  double  maxDelta  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lJI));  [CE]  cannot  find  symbol  lTQ  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lTQ  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  cannot  find  symbol  lTQ	48	None	replace
318	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lJI),  Math.abs(lTQ));  [CE]  no  suitable  method  found  for  abs(double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lJI),  Math.abs(lTQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lJI),  Math.abs(lTQ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double,double)	48	None	replace
319	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ,  lJI),  Math.abs(lTQ));  [CE]  no  suitable  method  found  for  abs(double[],double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ,  lJI),  Math.abs(lTQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ,  lJI),  Math.abs(lTQ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[],double)	48	None	replace
320	[BUG]  [BUGGY]  Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	Final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  not  a  statement	7	None	replace
321	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[j].length;  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[j].length;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[j].length;	  final    double[]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	33	None	replace
322	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(primarySymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(primarySymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(primarySymmetryThreshold,  absoluteSymmetryThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(absolutePositivityThreshold,    absoluteSymmetryThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	13	None	replace
323	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  absoluteSymmetryThreshold;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJI,  absoluteSymmetryThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJI,  absoluteSymmetryThreshold;	  final    double[][]    lTData    =    lTData[i],    absoluteSymmetryThreshold;    	non-compiled	[CE]  incompatible  types	60	None	replace
324	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData[i]));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData[i]));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData[i]));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	98	None	replace
325	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	98	None	replace
326	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[j].trim();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[j].trim();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[j].trim();	  final    double[][]    lJ    =    lTData[j];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	55	None	replace
327	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	compilable	  [FE]  AssertionError  	73	2	replace
328	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI)+  1);  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI)+  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI)+  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI)+    1);    	compilable	  [FE]  AssertionError  	73	2	replace
329	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	88	None	replace
330	[BUG]  [BUGGY]  final  double  lJI  =  lTQ  *  Math.max(Math.abs(lIJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lTQ  *  Math.max(Math.abs(lIJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lTQ  *  Math.max(Math.abs(lIJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	88	None	replace
331	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTQ);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTQ);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTQ);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
332	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTData.length);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTData.length);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(lJ,  lTData.length);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(lJ,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	92	None	replace
333	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositionThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i]  [absolutePositionThreshold];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i]  [absolutePositionThreshold];	  final    double[][]    lJ    =    lTData[i]    [absolutePositivityThreshold];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	89	None	replace
334	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	3	3	replace
335	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	3	3	replace
336	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ1)-  1);  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ1)-  1);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ1)-  1);	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ)-    1);    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	81	None	replace
337	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.Max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.Max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
338	[BUG]  [BUGGY]  final  double[][]  lJ  =  lTData[i].trim();  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lJ  =  lTData[i].trim();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lJ  =  lTData[i].trim();	  final    double[][]    lJ    =    lTData[i].value;    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	113	None	replace
339	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI,  lTQ));	  final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	35	None	replace
340	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[j],  lQ[i];  [CE]  ']'  expected  [FE]                        AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[j],  lQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[j],  lQ[i];	  final    double[][]    lQ    =    lTData[j];    	non-compiled	[CE]  ']'  expected	18	None	replace
341	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
342	[BUG]  [BUGGY]  final  double  lJI  =  lTData.length  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lTData.length  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lTData.length  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	112	None	replace
343	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  -  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
344	[BUG]  [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  -  lJI));  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  -  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  Math.max(Math.abs(lIJ),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	2	3	replace
345	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(rativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(rativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(rativeSymmetryThreshold,  absolutePositivityThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(absolutePositivityThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	93	None	replace
346	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(primarySymmetryThreshold,  absolutePositivityThreshold);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(primarySymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(primarySymmetryThreshold,  absolutePositivityThreshold);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(absolutePositivityThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	93	None	replace
347	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  absolutePositivityThreshold  *  Math.Max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	70	None	add
348	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[i],  lTQ[i];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTJ  =  lTData[i],  lTQ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[i],  lTQ[i];	  final    double[][]    lTJ    =    lTData[i];    	non-compiled	[CE]  ']'  expected	91	None	replace
349	[BUG]  [BUGGY]  final  double[][]  lTJ  =  lTData[i].symbol();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTJ  =  lTData[i].symbol();  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTJ  =  lTData[i].symbol();	  final    double[][]    lTJ    =    lTData[i];    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
350	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold,  matrix;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold,  matrix;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  absolutePositivityThreshold,  matrix;	  final    double[][]    lQ    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	61	None	replace
351	[BUG]  [BUGGY]  final  double[][]  lQ  =  lTData[i],  lJI;  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lQ  =  lTData[i],  lJI;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lQ  =  lTData[i],  lJI;	  final    double[][]    lQ    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	61	None	replace
352	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJI));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	114	None	replace
353	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ1));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lIJ1));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lIJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	114	None	replace
354	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJ),  Math.abs(lJI));  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJA),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lIJA),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	30	None	add
355	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJAI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJAI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    relativeSymmetryThreshold    /    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lJAI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	41	None	add
356	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  [CE]  cannot  find  symbol  lTQ  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ),  Math.abs(lJI));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    Final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  cannot  find  symbol  lTQ	7	None	replace
357	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lQ),  Math.abs(lJI,  lJI));  [CE]  cannot  find  symbol  lQ  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lQ),  Math.abs(lJI,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lQ),  Math.abs(lJI,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  cannot  find  symbol  lQ	47	None	replace
358	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lQ),  Math.abs(lJI,  lJI));  [CE]  cannot  find  symbol  lQ  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lQ),  Math.abs(lJI,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lQ),  Math.abs(lJI,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  cannot  find  symbol  lQ	47	None	replace
359	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  lQ));  [CE]  cannot  find  symbol  lQ  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  lQ));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI,  lQ));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lQ));    	non-compiled	[CE]  cannot  find  symbol  lQ	47	None	replace
360	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  ltQ;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  ltQ;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  ltQ;	  final    double[][]    lTData    =    lTData[i],    absolutePositivityThreshold;    	non-compiled	[CE]  incompatible  types	59	None	replace
361	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(matrix,  Math.abs(lJI));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	44	None	replace
362	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(lJI,    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	replace
363	[BUG]  [BUGGY]  final  double[]  lJ  =  lLtData[i];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lLtData[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lLtData[i];	  final    double[]    lJ    =    ltData[i];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	34	None	replace
364	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	compilable	  [FE]  AssertionError  	76	2	replace
365	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI)-  1);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI)-    1);    	compilable	  [FE]  AssertionError  	76	2	replace
366	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	68	None	replace
367	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	replace
368	[BUG]  [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(lIJ,  Math.abs(lJI));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(lIJ,  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  relativeSymmetryThreshold  *  Math.max(lIJ,  Math.abs(lJI));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.min(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	66	None	replace
369	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	63	None	replace
370	[BUG]  [BUGGY]  final  double  lJI  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lTQ  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	63	None	replace
371	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[i]  *  absolutePositivityThreshold;  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i],  lJ[i]  *  absolutePositivityThreshold;  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[][]  lTData  =  lTData[i],  lJ[i]  *  absolutePositivityThreshold;	  final    double[][]    lTData    =    lTData[i],    lJ[i];    	non-compiled	[CE]  ']'  expected	53	None	replace
372	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold);  [CE]  no  suitable  method  found  for  max(double,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI),  relativeSymmetryThreshold);	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	non-compiled	[CE]  no  suitable  method  found  for  max(double,double,double)	83	None	replace
373	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	3	replace
374	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(relativeSymmetryThreshold,  Math.abs(lJI  +  1));	  final    double    maxDelta    =    lJI    *    Math.max(relativeSymmetryThreshold,    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	83	3	replace
375	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ[i],  Math.abs(lJI));  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ[i],  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  /  Math.max(Math.abs(lTQ[i],  Math.abs(lJI));	  final    double    maxDelta    =    lJI    /    Math.max(Math.abs(lIJ),    Math.abs(lJI));    	non-compiled	[CE]  ')'  expected	31	None	replace
376	[BUG]  [BUGGY]  final  double[]  lJI  =  lJ[i];  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJI  =  lJ[i];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJI  =  lJ[i];	  final    double[]    lJ    =    lJ[i];    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	32	None	replace
377	[BUG]  [BUGGY]  final  double  lIJ  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lIJ  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lIJ  =  lJI  *  Math.max(Math.abs(lIJ),  Math.abs(lJ));	  final    double    lIJ    =    absolutePositivityThreshold    *    Math.max(Math.abs(lIJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lIJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	87	None	replace
378	[BUG]  [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [CE]  no  suitable  method  found  for  abs(double[])  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  absolutePositivityThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
379	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI)/  2.0);  [CE]  no  suitable  method  found  for  abs(double[])  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI)/  2.0);  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJ),  Math.abs(lJI  -  lJI)/  2.0);	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI    -    lJI));    	non-compiled	[CE]  no  suitable  method  found  for  abs(double[])	102	None	replace
380	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveDefiniteMatrix);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                    AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveDefiniteMatrix);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveDefiniteMatrix);	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	12	None	replace
381	[BUG]  [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  lJI  *  Math.max(Math.abs(lJ),  Math.abs(lJ));	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJ));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	96	None	replace
382	[BUG]  [BUGGY]  final  double[]  lJ  =  lTData[i]  [absolutePositionThreshold];  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double[]  lJ  =  lTData[i]  [absolutePositionThreshold];  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double[]  lJ  =  lTData[i]  [absolutePositionThreshold];	  final    double[]    lJ    =    lTData[i]    [absolutePositivityThreshold];    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	74	None	replace
383	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lTQ),  Math.abs(lJI,  lJI));  [CE]  cannot  find  symbol  lTQ  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lTQ),  Math.abs(lJI,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI,  lTQ),  Math.abs(lJI,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  cannot  find  symbol  lTQ	48	None	replace
384	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI,  lJI));  [CE]  cannot  find  symbol  lTQ  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI,  lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTQ),  Math.abs(lJI,  lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI,    lTQ));    	non-compiled	[CE]  cannot  find  symbol  lTQ	48	None	replace
385	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJI),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	99	None	replace
386	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lTData));	  final    double    lIJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lTData),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	65	None	replace
387	[BUG]  [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveDefiniteMatrix);  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveDefiniteMatrix);  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositiveDefiniteMatrix);	  final    double    lJI    =    absolutePositivityThreshold    *    Math.max(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	94	None	replace
388	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	10	None	replace
389	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lJ),  Math.abs(lJI));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	10	None	replace
390	[BUG]  [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJ  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));	  final    double    lJ    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJ),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJ  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	10	None	replace
391	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI  +  1)));  [CE]  cannot  find  symbol  lTQ  [FE]          AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI  +  1)));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lTQ[j],  Math.abs(lJI  +  1)));	  final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lTQ[j],    Math.abs(lJI)));    	non-compiled	[CE]  cannot  find  symbol  lTQ	84	None	replace
392	[BUG]  [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));  [BUGGY]      final  double  maxDelta  =      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  lJI  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lJI),  Math.abs(lJI  +  1));	  final    double    lJI    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    	non-compiled	[CE]  variable  lJI  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	45	None	replace
393	[BUG]  [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));  [CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  lJI  *  Math.max(Math.abs(lJI),  Math.abs(lJI));  final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final    double    maxDelta    =    lJI    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final  double  maxDelta  =  Math.max(Math.abs(lJI),  Math.abs(lJI));	  	non-compiled	[CE]  variable  maxDelta  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	39	None	add
394	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	add	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	51	2	replace
395	[BUG]  [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];      [BUGGY]  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));  [BUGGY]      relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  throw  new  NotSymmetricMatrixException();  }  lJ[i]  =  0;  }  }  for  (int  i  =  0;  i  <  order;  ++i)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	122	123	2	replace	final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.min(Math.abs(lIJ),  Math.abs(lJI));	  final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lJI),    Math.abs(lJI));    final    double    maxDelta    =    relativeSymmetryThreshold    *    Math.min(Math.abs(lJI),    Math.abs(lJI));    	compilable	  [FE]  AssertionError  	51	2	replace
