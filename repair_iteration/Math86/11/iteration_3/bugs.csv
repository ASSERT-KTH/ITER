bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  final  int  row  =  matrix.getRowDimension();  [CE]  cannot  find  symbol  order  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  row  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    row    =    matrix.getRowDimension()    -    1;    	non-compiled	[CE]  cannot  find  symbol  order	79	None	replace
2	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    row    =    matrix.getRowDimension()    -    1;    	compilable	  [FE]  AssertionError  	79	2	replace
3	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    row    =    matrix.getRowDimension()    -    1;    	compilable	  [FE]  AssertionError  	79	2	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    row    =    matrix.getRowDimension()    -    1;    	compilable	  [FE]  AssertionError  	79	2	replace
5	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    row    =    matrix.getRowDimension()    -    1;    	compilable	  [FE]  AssertionError  	79	2	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
7	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
9	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
11	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
13	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
14	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  cannot  find  symbol  Matrix  [FE]            AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	non-compiled	[CE]  cannot  find  symbol  Matrix	38	None	add
15	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  relativeSymmetryThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
16	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  absoluteSymmetryThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
17	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    int    order    =    matrix.getRowDimension()    +    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
18	[BUG]  [BUGGY]  Integer  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Integer  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Integer  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    int    order    =    matrix.getRowDimension()    +    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
19	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension();  int  order  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    int    order    =    matrix.getRowDimension()    +    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	20	None	replace
20	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  int  order  =  matrix.getColumnDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  int  order  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  int  order  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	replace
21	[BUG]  [BUGGY]  Integer  order  =  matrix.getRowDimension();  int  order  =  matrix.getColumnDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Integer  order  =  matrix.getRowDimension();  int  order  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Integer  order  =  matrix.getRowDimension();  int  order  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	7	None	replace
22	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    row    =    matrix.getRowDimension()    +    1;    	compilable	  [FE]  AssertionError  	65	2	replace
23	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  final  int  row  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    row    =    matrix.getRowDimension()    +    1;    	compilable	  [FE]  AssertionError  	65	2	replace
24	[BUG]  [BUGGY]  Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  cannot  find  symbol  Matrix  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix.max(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  cannot  find  symbol  Matrix	41	None	replace
25	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  cannot  find  symbol  Matrix  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix.max(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  cannot  find  symbol  Matrix	41	None	replace
26	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
27	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
28	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
29	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
31	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
33	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
34	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
35	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
36	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  order  =  matrix.getColumnDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  order  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension();  final  int  order  =  matrix.getColumnDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    order    =    matrix.getColumnDimension()    +    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
37	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  order  =  matrix.getColumnDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  order  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  final  int  order  =  matrix.getColumnDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    order    =    matrix.getColumnDimension()    +    1;    	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	21	None	replace
38	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  relativeSymmetryThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
39	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  absolutePositivityThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
40	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,int,double)  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double)	43	None	replace
41	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absoluteSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	43	None	replace
42	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  2;  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  2;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  2;	  final    int    maxDelta    =    matrix.getMaxDeltaDimension()    -    2;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
43	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  2;  [CE]  cannot  find  symbol  [FE]                          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  2;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  2;	  final    int    maxDelta    =    matrix.getMaxDeltaDimension()    -    2;    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
44	[BUG]  [BUGGY]  Final  int  order  =  matrix.getRowDimension();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Final  int  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Final  int  order  =  matrix.getRowDimension();	  final    int    order    =    matrix.getColumnDimension();    Final    int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  not  a  statement	31	None	replace
45	[BUG]  [BUGGY]  final  int  rowDimension  =  matrix.getRowDimension();  [CE]  cannot  find  symbol  order  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  rowDimension  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  rowDimension  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    rowDimension    =    matrix.getRowDimension()    +    1;    	non-compiled	[CE]  cannot  find  symbol  order	64	None	replace
46	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    rowDimension    =    matrix.getRowDimension()    +    1;    	compilable	  [FE]  AssertionError  	64	2	replace
47	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();  [FE]  AssertionError  [FE]          ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    rowDimension    =    matrix.getRowDimension()    +    1;    	compilable	  [FE]  AssertionError  	64	2	replace
48	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    rowDimension    =    matrix.getRowDimension()    +    1;    	compilable	  [FE]  AssertionError  	64	2	replace
49	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();  [FE]  AssertionError  [FE]            ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  final  int  rowDimension  =  matrix.getRowDimension();	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    rowDimension    =    matrix.getRowDimension()    +    1;    	compilable	  [FE]  AssertionError  	64	2	replace
50	[BUG]  [BUGGY]  final  int  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();  [CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    final    int    relativeSymmetryThreshold    =    matrix.getRelativeSymmetryThreshold();    	non-compiled	[CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	42	None	replace
51	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  final  int  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();  [CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  final  int  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  final  int  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    final    int    relativeSymmetryThreshold    =    matrix.getRelativeSymmetryThreshold();    	non-compiled	[CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	42	None	replace
52	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    +    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
53	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;  [CE]  cannot  find  symbol  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    +    1;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
54	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold);	  Math.min(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
55	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta);	  Math.min(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
56	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  relativeSymmetryThreshold);	  Math.min(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
57	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	int  order  =  matrix.getRowDimension()  +  1;	  int    order    =    matrix.getColumnDimension()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	7	replace
58	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension()  +  1;  [FE]  ArrayIndexOutOfBoundsException  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension()  +  1;	  int    order    =    matrix.getColumnDimension()    +    1;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	78	7	replace
59	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	int  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    ordered    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	68	2	replace
60	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    ordered    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	68	2	replace
61	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Integer  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	Integer  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    ordered    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	68	2	replace
62	[BUG]  [BUGGY]  Integer  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [FE]  AssertionError  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Integer  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Integer  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    ordered    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	68	2	replace
63	[BUG]  [BUGGY]  nt  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  nt  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	nt  order  =  matrix.getRowDimension();  int  ordered  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    ordered    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
64	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  1));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  1));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  1));	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDimension()));    	non-compiled	[CE]  ';'  expected	88	None	replace
65	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;	  final    int    maxDelta    =    matrix.getMaxDeltaDimension()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
66	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;	  final    int    maxDelta    =    matrix.getMaxDeltaDimension()    +    1;    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
67	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  matrix.getMaxDelta()  /  1;	  int    maxDelta    =    matrix.getMaxDelta()    +    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
68	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  matrix.getMaxDelta()  *  1;	  int    maxDelta    =    matrix.getMaxDelta()    +    1;    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
69	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getColumnDimension()  /  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getColumnDimension()  /  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    /    1;    final  int  order  =  matrix.getColumnDimension()  /  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	80	None	add
70	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getColumnDimension()  /  2;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getColumnDimension()  /  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    /    1;    final  int  order  =  matrix.getColumnDimension()  /  2;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	80	None	add
71	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getRowDimension()  /  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getRowDimension()  /  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    /    1;    final  int  order  =  matrix.getRowDimension()  /  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	80	None	add
72	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  int  order  =  matrix.getColumnDimension()  /  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  int  order  =  matrix.getColumnDimension()  /  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    /    1;    int  order  =  matrix.getColumnDimension()  /  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	80	None	add
73	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  cannot  find  symbol  order  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  cannot  find  symbol  order	46	None	replace
74	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  min(double,int,double)  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold);	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  no  suitable  method  found  for  min(double,int,double)	46	None	replace
75	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension());  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension());	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
76	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  2;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  2;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  /  2;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    -    2;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
77	[BUG]  [BUGGY]  final  double  order  =  matrix.getSecondDimension();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  double  order  =  matrix.getSecondDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  double  order  =  matrix.getSecondDimension();	  final    double    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
78	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  /  1));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  /  1));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  /  1));	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold()    +    1));    	non-compiled	[CE]  ';'  expected	57	None	replace
79	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getColumnDimension()  -  2;	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    order    =    matrix.getRowDimension()    -    2;    	compilable	  [FE]  AssertionError  	52	6	replace
80	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  2;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getColumnDimension()  -  2;	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    order    =    matrix.getRowDimension()    -    2;    	compilable	  [FE]  AssertionError  	52	6	replace
81	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  /  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  /  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDelta()  /  1;	  final    int    maxDelta    =    matrix.getMaxDelta()    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
82	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  *  1;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  *  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDelta()  *  1;	  final    int    maxDelta    =    matrix.getMaxDelta()    +    1;    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
83	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
84	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta);	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
85	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  relativeSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
86	[BUG]  [BUGGY]  Matrix  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  ';'  expected  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Matrix  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Matrix  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix    Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    	non-compiled	[CE]  ';'  expected	74	None	replace
87	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getRowDimension();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getRowDimension();  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getRowDimension();	  final    int    maxDelta    =    matrix.getMaxDeltaDimension(),    matrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	54	None	replace
88	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getColumnDimension()  +  1;  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getColumnDimension()  +  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getColumnDimension()  +  1;	  final    int    maxDelta    =    matrix.getMaxDeltaDimension(),    matrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	54	None	replace
89	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getRangeDimension();  [CE]  ';'  expected  [FE]                          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getRangeDimension();  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getRangeDimension();	  final    int    maxDelta    =    matrix.getMaxDeltaDimension(),    matrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	54	None	replace
90	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold),  maxDelta);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold),  maxDelta);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold),  maxDelta);	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold(),    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	56	None	replace
91	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold(),    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	56	None	replace
92	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  relativeSymmetryThreshold,  absolutePositivityThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
93	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  int  order  =  matrix.getColumnDimension()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  int  order  =  matrix.getColumnDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    +    1;    int  order  =  matrix.getColumnDimension()  +  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	add
94	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  int  order  =  matrix.getRowDimension()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  int  order  =  matrix.getRowDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    +    1;    int  order  =  matrix.getRowDimension()  +  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	add
95	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  Int  order  =  matrix.getColumnDimension()  +  1;  [CE]  cannot  find  symbol  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  Int  order  =  matrix.getColumnDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    +    1;    Int  order  =  matrix.getColumnDimension()  +  1;	  	non-compiled	[CE]  cannot  find  symbol	77	None	add
96	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  int  orderedL  =  matrix.getRowDimension()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  int  orderedL  =  matrix.getRowDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    +    1;    int  orderedL  =  matrix.getRowDimension()  +  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	add
97	[BUG]  [BUGGY]  static  final  int  order  =  matrix.getColumnDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  static  final  int  order  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	static  final  int  order  =  matrix.getColumnDimension();	  static    final    int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
98	[BUG]  [BUGGY]  static  final  double  order  =  matrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  static  final  double  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	static  final  double  order  =  matrix.getRowDimension();	  static    final    int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
99	[BUG]  [BUGGY]  static  final  int  order  =  matrix.getRowDimension()  -  1;  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  static  final  int  order  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	static  final  int  order  =  matrix.getRowDimension()  -  1;	  static    final    int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
100	[BUG]  [BUGGY]  static  final  int  order  =  matrix.getRowDimension()  +  1;  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  static  final  int  order  =  matrix.getRowDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	static  final  int  order  =  matrix.getRowDimension()  +  1;	  static    final    int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
101	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	59	None	replace
102	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  2;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  2;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  matrix.getMaxDelta()  /  2;	  int    maxDelta    =    matrix.getMaxDelta()    -    2;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
103	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  2;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  2;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  matrix.getMaxDelta()  *  2;	  int    maxDelta    =    matrix.getMaxDelta()    -    2;    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
104	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absolutePositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDeltaDimension()));    	non-compiled	[CE]  ';'  expected	89	None	replace
105	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
106	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
107	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
108	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
109	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
110	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
111	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
112	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	85	2	add
113	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  cannot  find  symbol  Matrix  [FE]            AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());	  	non-compiled	[CE]  cannot  find  symbol  Matrix	85	None	add
114	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getDoubleDimension(),  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getDoubleDimension(),  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getDoubleDimension(),  absolutePositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getDoubleDimension()));    	non-compiled	[CE]  ';'  expected	61	None	replace
115	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  cachedLT));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  cachedLT));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  cachedLT));	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold(),    maxDelta));    	non-compiled	[CE]  ';'  expected	58	None	replace
116	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  totalPositivityThreshold));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  totalPositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  totalPositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold(),    maxDelta));    	non-compiled	[CE]  ';'  expected	58	None	replace
117	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta,  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta,  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  maxDelta,  absolutePositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold(),    maxDelta));    	non-compiled	[CE]  ';'  expected	58	None	replace
118	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  /  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getRowDimension()  /  1;	  final    int    order    =    matrix.getColumnDimension()    /    1;    	compilable	  [FE]  AssertionError  	81	2	replace
119	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension()  /  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  /  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension()  /  1;	  final    int    order    =    matrix.getColumnDimension()    /    1;    	compilable	  [FE]  AssertionError  	81	2	replace
120	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  relativeSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
121	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matricule,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matricule,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matricule,  relativeSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
122	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrice,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrice,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrice,  relativeSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
123	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(relativeSymmetryThreshold,  matrix);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(relativeSymmetryThreshold,  matrix);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(relativeSymmetryThreshold,  matrix);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
124	[BUG]  [BUGGY]  null  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();  [CE]  not  a  statement  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  null  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	null  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();	  final    int    order    =    matrix.getColumnDimension();    final    int    ordered    =    matrix.getColumnDimension();    	non-compiled	[CE]  not  a  statement	73	None	replace
125	[BUG]  [BUGGY]  final  int  ordered  =  matrix.getRowDimension();  [CE]  cannot  find  symbol  order  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  ordered  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  ordered  =  matrix.getRowDimension();	  final    int    order    =    matrix.getColumnDimension();    final    int    ordered    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  order	73	None	replace
126	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	int  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();	  final    int    order    =    matrix.getColumnDimension();    final    int    ordered    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	73	2	replace
127	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  final  int  ordered  =  matrix.getColumnDimension();	  final    int    order    =    matrix.getColumnDimension();    final    int    ordered    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	73	2	replace
128	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension()  +  1));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension()  +  1));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension()  +  1));	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension()    +    1));    	non-compiled	[CE]  ';'  expected	72	None	replace
129	[BUG]  [BUGGY]  null  order  =  matrix.getRowDimension();  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  null  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	null  order  =  matrix.getRowDimension();	  final    int    order    =    matrix.getColumnDimension();    final    int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  not  a  statement	29	None	replace
130	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  /  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  /  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  /  absolutePositivityThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta()    -    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
131	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  *  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  *  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  *  absolutePositivityThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta()    -    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
132	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  absolutePositivityThreshold,  relativeSymmetryThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta()    -    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
133	[BUG]  [BUGGY]  double  order  =  matrix.getRowDimension();  [CE]  possible  loss  of  precision  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  double  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	double  order  =  matrix.getRowDimension();	  double    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  possible  loss  of  precision	27	None	replace
134	[BUG]  [BUGGY]  double  order  =  matrix.getSecondDimension();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  double  order  =  matrix.getSecondDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	double  order  =  matrix.getSecondDimension();	  double    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  /  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getRowDimension()  /  2;	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    order    =    matrix.getRowDimension()    +    2;    	compilable	  [FE]  AssertionError  	84	6	replace
136	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension()  /  2;  [FE]  AssertionError  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  /  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension()  /  2;	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    order    =    matrix.getRowDimension()    +    2;    	compilable	  [FE]  AssertionError  	84	6	replace
137	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  absolutePositivityThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
138	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  relativeSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
139	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absolutePositivityThreshold,  absoluteSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
140	[BUG]  [BUGGY]  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  cannot  find  symbol  Matrix  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    	non-compiled	[CE]  cannot  find  symbol  Matrix	40	None	replace
141	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  cannot  find  symbol  Matrix  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    	non-compiled	[CE]  cannot  find  symbol  Matrix	40	None	replace
142	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension()));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension()));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension()));	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	71	None	replace
143	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()));	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	71	None	replace
144	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRowDimension(),  absolutePositivityThreshold));	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	71	None	replace
145	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()));  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()));	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	71	None	replace
146	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  maxDelta);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  maxDelta);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  maxDelta);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
147	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  maxDelta,  relativeSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
148	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  maxDelta,  absolutePositivityThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
149	[BUG]  [BUGGY]  final  double  order  =  matrix.getRowDimension()  -  1;  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  double  order  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  double  order  =  matrix.getRowDimension()  -  1;	  final    double    order    =    matrix.getRowDimension();    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
150	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  absolutePositivityThreshold,  maxDelta);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  absolutePositivityThreshold,  maxDelta);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  absolutePositivityThreshold,  maxDelta);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
151	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absoluteSymmetryThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absoluteSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(absoluteSymmetryThreshold,  absolutePositivityThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
152	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  cannot  find  symbol  order  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    	non-compiled	[CE]  cannot  find  symbol  order	86	None	replace
153	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  cannot  find  symbol  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());  Math.min(relativeSymmetryThreshold,  matrix.getRowDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	int  order  =  matrix.getRowDimension()  -  1;	  int    order    =    matrix.getRowDimension();    	compilable	  [FE]  AssertionError  	24	6	replace
155	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension()  -  1;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension()  -  1;	  int    order    =    matrix.getRowDimension();    	compilable	  [FE]  AssertionError  	24	6	replace
156	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  final  int  order  =  matrix.getColumnDimension()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  final  int  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    -    1;    final  int  order  =  matrix.getColumnDimension()  -  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	62	None	add
157	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getColumnDimension()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    -    1;    int  order  =  matrix.getColumnDimension()  -  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	62	None	add
158	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  final  int  order  =  matrix.getRowDimension()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  final  int  order  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    -    1;    final  int  order  =  matrix.getRowDimension()  -  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	62	None	add
159	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  Final  int  order  =  matrix.getColumnDimension()  -  1;  [CE]  not  a  statement  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  Final  int  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    -    1;    Final  int  order  =  matrix.getColumnDimension()  -  1;	  	non-compiled	[CE]  not  a  statement	62	None	add
160	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getColumnDimension()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    -    1;    int  order  =  matrix.getColumnDimension()  -  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	add
161	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getRowDimension()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    -    1;    int  order  =  matrix.getRowDimension()  -  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	add
162	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  Int  order  =  matrix.getColumnDimension()  -  1;  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  Int  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    -    1;    Int  order  =  matrix.getColumnDimension()  -  1;	  	non-compiled	[CE]  cannot  find  symbol	25	None	add
163	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getColumnDimension()  -  2;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  int  order  =  matrix.getColumnDimension()  -  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    -    1;    int  order  =  matrix.getColumnDimension()  -  2;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	add
164	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Integer  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	Integer  order  =  matrix.getRowDimension();	  final    int    order    =    matrix.getColumnDimension();    int    order    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	30	2	replace
165	[BUG]  [BUGGY]  Integer  order  =  matrix.getRowDimension();  [FE]  AssertionError  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Integer  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Integer  order  =  matrix.getRowDimension();	  final    int    order    =    matrix.getColumnDimension();    int    order    =    matrix.getColumnDimension();    	compilable	  [FE]  AssertionError  	30	2	replace
166	[BUG]  [BUGGY]  Int  order  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Int  order  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Int  order  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    Int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
167	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  Int  order  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  Int  order  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  order  =  matrix.getRowDimension();  Int  order  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    Int    order    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
168	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension()  -  1));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension()  -  1));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRowDimension()  -  1));	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension()    -    1));    	non-compiled	[CE]  ';'  expected	70	None	replace
169	[BUG]  [BUGGY]  Math.max(maxDelta,  matrix.getColumnDimension(),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  maxDelta  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(maxDelta,  matrix.getColumnDimension(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(maxDelta,  matrix.getColumnDimension(),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	75	None	replace
170	[BUG]  [BUGGY]  Math.max(absoluteSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(absoluteSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(absoluteSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	75	None	replace
171	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  maxDelta);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  maxDelta);	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	75	None	replace
172	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold,  matrix.getMatrixMatrix(relativeSymmetryThreshold);  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold,  matrix.getMatrixMatrix(relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold,  matrix.getMatrixMatrix(relativeSymmetryThreshold);	  MatrixMatrix    matrix    =    relativeSymmetryThreshold.getMatrixMatrix(matrix);    	non-compiled	[CE]  ';'  expected	33	None	replace
173	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  matrix.getColumnDimension());  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  matrix.getColumnDimension());	  MatrixMatrix    matrix    =    relativeSymmetryThreshold.getMatrixMatrix(matrix);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
174	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  Int  order  =  matrix.getRowDimension();  [CE]  cannot  find  symbol  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  Int  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getRowDimension();    Int  order  =  matrix.getRowDimension();	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
175	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  int  size  =  matrix.getRowDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  int  size  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getRowDimension();    int  size  =  matrix.getRowDimension();	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	23	None	add
176	[BUG]  [BUGGY]  int  orderedL  =  matrix.getRowDimension();  [CE]  cannot  find  symbol  order  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  orderedL  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  orderedL  =  matrix.getRowDimension();	  int    order    =    matrix.getColumnDimension();    int    orderedL    =    matrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  order	10	None	replace
177	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  /  1);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  /  1);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  /  1);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta()    -    1);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
178	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  1,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  1,  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  1,  absoluteSymmetryThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta()    -    1);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
179	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  /  2;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  /  2;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDelta()  /  2;	  final    int    maxDelta    =    matrix.getMaxDelta()    -    2;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
180	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  *  2;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDelta()  *  2;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDelta()  *  2;	  final    int    maxDelta    =    matrix.getMaxDelta()    -    2;    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
181	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDeltaDimension());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
182	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  absoluteSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDeltaDimension());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
183	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension(),  relativeSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDeltaDimension());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
184	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absolutePositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	60	None	replace
185	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  final  int  order  =  matrix.getColumnDimension()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  final  int  order  =  matrix.getColumnDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    final  int  order  =  matrix.getColumnDimension()  +  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	add
186	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  final  int  order  =  matrix.getRowDimension()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  final  int  order  =  matrix.getRowDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    final  int  order  =  matrix.getRowDimension()  +  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	add
187	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  int  order  =  matrix.getColumnDimension()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  int  order  =  matrix.getColumnDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    int  order  =  matrix.getColumnDimension()  +  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	add
188	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  Final  int  order  =  matrix.getColumnDimension()  +  1;  [CE]  not  a  statement  [FE]          ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  Final  int  order  =  matrix.getColumnDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    Final  int  order  =  matrix.getColumnDimension()  +  1;	  	non-compiled	[CE]  not  a  statement	17	None	add
189	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDimension());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
190	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  absoluteSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDimension());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
191	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension(),  relativeSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDimension());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
192	[BUG]  [BUGGY]  Math.max(absolutePositivityThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(absolutePositivityThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(absolutePositivityThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	60	None	replace
193	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()  -  1));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()  -  1));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()  -  1));	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDeltaDimension()));    	non-compiled	[CE]  ';'  expected	89	None	replace
194	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getColumnDimension()  /  3;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  1;  final  int  order  =  matrix.getColumnDimension()  /  3;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    /    1;    final  int  order  =  matrix.getColumnDimension()  /  3;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	80	None	add
195	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  +  1);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  +  1);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  +  1);	  Math.min(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
196	[BUG]  [BUGGY]  Matrix.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Matrix.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Matrix.min(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());	  Math.min(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
197	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  matrix);  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  matrix);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  matrix);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
198	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  comparator.getMatrixMatrix(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  comparator.getMatrixMatrix(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  comparator.getMatrixMatrix(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
199	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  +  1);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  +  1);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold()  +  1);	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
200	[BUG]  [BUGGY]  Matrix.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Matrix.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Matrix.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold());	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
201	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getMinDeltaDimension();  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getMinDeltaDimension();  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension(),  matrix.getMinDeltaDimension();	  final    int    maxDelta    =    matrix.getMaxDeltaDimension(),    matrix.getColumnDimension();    	non-compiled	[CE]  ';'  expected	54	None	replace
202	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
203	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getRowDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	38	2	add
204	[BUG]  [BUGGY]  final  double  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();  [CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  double  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  double  relativeSymmetryThreshold  =  matrix.getRelativeSymmetryThreshold();	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    final    int    relativeSymmetryThreshold    =    matrix.getRelativeSymmetryThreshold();    	non-compiled	[CE]  variable  relativeSymmetryThreshold  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	42	None	replace
205	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  1,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  1,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta()  -  1,  absolutePositivityThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta()    -    1);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
206	[BUG]  [BUGGY]  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  +  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getRowDimension()  +  2;	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    order    =    matrix.getRowDimension()    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	7	replace
207	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension()  +  2;  [FE]  ArrayIndexOutOfBoundsException  [FE]        ArrayIndexOutOfBoundsException      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  +  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension()  +  2;	  final    int    order    =    matrix.getRowDimension()    +    1;    final    int    order    =    matrix.getRowDimension()    +    2;    	compilable	  [FE]  ArrayIndexOutOfBoundsException  	84	7	replace
208	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension()  +  1);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension()  +  1);  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(matrix.getRowDimension(),  matrix.getColumnDimension()  +  1);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(int,int)	17	None	add
209	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double,int)  [FE]      ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold,  matrix.getRowDimension());	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double,int)	17	None	add
210	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);  [CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)  [FE]        ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    ArrayIndexOutOfBoundsException  e  =  new  ArrayIndexOutOfBoundsException(relativeSymmetryThreshold);	  	non-compiled	[CE]  no  suitable  constructor  found  for  ArrayIndexOutOfBoundsException(double)	17	None	add
211	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  totalPositivityThreshold);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  totalPositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  totalPositivityThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    relativeSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
212	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()  -  1);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()  -  1);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDeltaDimension()  -  1);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDeltaDimension());    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
213	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaximumDimension()));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaximumDimension()));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaximumDimension()));	  Math.max(relativeSymmetryThreshold,    matrix.getDoubleDimension()));    	non-compiled	[CE]  ';'  expected	61	None	replace
214	[BUG]  [BUGGY]  Math.max(absolutePositivityThreshold,  matrix.getColumnDimension(),  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(absolutePositivityThreshold,  matrix.getColumnDimension(),  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(absolutePositivityThreshold,  matrix.getColumnDimension(),  absoluteSymmetryThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	75	None	replace
215	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  absolutePositivityThreshold);  [CE]  no  suitable  method  found  for  max(double,int,double,double)  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold);    	non-compiled	[CE]  no  suitable  method  found  for  max(double,int,double,double)	75	None	replace
216	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  MAX_RELATIVE_SYMMETRY_THRESHOLD);  [CE]  cannot  find  symbol  MAX_RELATIVE_SYMMETRY_THRESHOLD  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  MAX_RELATIVE_SYMMETRY_THRESHOLD);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension(),  absolutePositivityThreshold,  MAX_RELATIVE_SYMMETRY_THRESHOLD);	  Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol  MAX_RELATIVE_SYMMETRY_THRESHOLD	75	None	replace
217	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  final  int  order  =  matrix.getColumnDimension()  -  2;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  -  1;  final  int  order  =  matrix.getColumnDimension()  -  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    -    1;    final  int  order  =  matrix.getColumnDimension()  -  2;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	62	None	add
218	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  1);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  1);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  1);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDimension());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
219	[BUG]  [BUGGY]  Math.min(maxDelta,  matrix.getRowDimension()));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(maxDelta,  matrix.getRowDimension()));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(maxDelta,  matrix.getRowDimension()));	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	71	None	replace
220	[BUG]  [BUGGY]  matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	matrix.max(relativeSymmetryThreshold,  matrix.getRowDimension());	          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix.max(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
221	[BUG]  [BUGGY]  int  order  =  matrix.getRowDimension();  int  row  =  matrix.getRowDimension();  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getRowDimension();  int  row  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getRowDimension();    int  row  =  matrix.getRowDimension();	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	23	None	add
222	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold),  absolutePositivityThreshold);  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold),  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositivityThreshold),  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold(),    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	56	None	replace
223	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  +  1));  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  +  1));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  +  1));	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDimension()));    	non-compiled	[CE]  ';'  expected	88	None	replace
224	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold  +  1);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold  +  1);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold  +  1);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
225	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absolutePositivityThreshold,  absolutePositivityThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
226	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  Integer  order  =  matrix.getColumnDimension()  -  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  -  1;  Integer  order  =  matrix.getColumnDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    -    1;    Integer  order  =  matrix.getColumnDimension()  -  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	add
227	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  relativeSymmetryThreshold.getMatrixMatrix(matrix,  absolutePositivityThreshold);	  MatrixMatrix    matrix    =    relativeSymmetryThreshold.getMatrixMatrix(matrix);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
228	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  inverse);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  inverse);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  inverse);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
229	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  totalPositivityThreshold);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  totalPositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  totalPositivityThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
230	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
231	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
232	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
233	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.max(relativeSymmetryThreshold,  matrix.getRowDimension());  Math.max(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	compilable	  [FE]  AssertionError  	36	2	add
234	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getColumnDimension()  /  2;	  final    int    order    =    matrix.getColumnDimension()    /    1;    	compilable	  [FE]  AssertionError  	81	6	replace
235	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  2;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  /  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getColumnDimension()  /  2;	  final    int    order    =    matrix.getColumnDimension()    /    1;    	compilable	  [FE]  AssertionError  	81	6	replace
236	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  -  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getRowDimension()  -  2;	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    order    =    matrix.getRowDimension()    -    2;    	compilable	  [FE]  AssertionError  	52	6	replace
237	[BUG]  [BUGGY]  final  int  order  =  matrix.getRowDimension()  -  2;  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getRowDimension()  -  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getRowDimension()  -  2;	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    order    =    matrix.getRowDimension()    -    2;    	compilable	  [FE]  AssertionError  	52	6	replace
238	[BUG]  [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  maxDelta  =  Math.max(relativeSymmetryThreshold,  matrix.getMaxDelta(),  absoluteSymmetryThreshold,  absoluteSymmetryThreshold);	  int    maxDelta    =    Math.max(relativeSymmetryThreshold,    matrix.getMaxDelta(),    absoluteSymmetryThreshold);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
239	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  absolutePositivityThreshold)+  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  absolutePositivityThreshold)+  1;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  absolutePositivityThreshold)+  1;	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    absolutePositivityThreshold);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
240	[BUG]  [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [CE]  cannot  find  symbol  Matrix  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]          Math.max(relativeSymmetryThreshold,    matrix.getColumnDimension());    Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	                Math.max(relativeSymmetryThreshold,        matrix.getColumnDimension());        Math.min(relativeSymmetryThreshold,    matrix.getColumnDimension());    Matrix.max(relativeSymmetryThreshold,  matrix.getColumnDimension());  Math.min(relativeSymmetryThreshold,  matrix.getColumnDimension());	  	non-compiled	[CE]  cannot  find  symbol  Matrix	85	None	add
241	[BUG]  [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  double  order  =  matrix.getColumnDimension()  +  1;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  order  =  matrix.getColumnDimension()  +  1;  double  order  =  matrix.getColumnDimension()  +  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int    order    =    matrix.getColumnDimension()    +    1;    double  order  =  matrix.getColumnDimension()  +  1;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	77	None	add
242	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositiveThreshold));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositiveThreshold));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  absolutePositiveThreshold));	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold(),    absolutePositivityThreshold));    	non-compiled	[CE]  ';'  expected	56	None	replace
243	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  MAX_RELATIVE_SYMMETRY_THRESHOLD);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  MAX_RELATIVE_SYMMETRY_THRESHOLD);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getRelativeSymmetryThreshold(),  MAX_RELATIVE_SYMMETRY_THRESHOLD);	  Math.max(relativeSymmetryThreshold,    matrix.getRelativeSymmetryThreshold());    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
244	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  final  int  order  =  matrix.getColumnDimension()  +  2;  [CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    ArrayIndexOutOfBoundsException    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension()  +  1;  final  int  order  =  matrix.getColumnDimension()  +  2;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final    int    order    =    matrix.getColumnDimension()    +    1;    final  int  order  =  matrix.getColumnDimension()  +  2;	  	non-compiled	[CE]  variable  order  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	17	None	add
245	[BUG]  [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  inverseSymmetryThreshold);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  inverseSymmetryThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	MatrixMatrix  matrix  =  matrix.getMatrixMatrix(relativeSymmetryThreshold,  inverseSymmetryThreshold);	  MatrixMatrix    matrix    =    matrix.getMatrixMatrix(relativeSymmetryThreshold,    maxDelta);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
246	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDimension());  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDimension());  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getMaxDimension());	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension());    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
247	[BUG]  [BUGGY]  final  int  ordered  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  order  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  ordered  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  ordered  =  matrix.getColumnDimension();	  final    int    order    =    matrix.getColumnDimension();    final    int    ordered    =    matrix.getColumnDimension();    	non-compiled	[CE]  cannot  find  symbol  order	73	None	replace
248	[BUG]  [BUGGY]  final  double  order  =  matrix.getColumnDimension()  /  1;  [CE]  possible  loss  of  precision  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  double  order  =  matrix.getColumnDimension()  /  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  double  order  =  matrix.getColumnDimension()  /  1;	  final    int    order    =    matrix.getColumnDimension()    /    1;    	non-compiled	[CE]  possible  loss  of  precision	81	None	replace
249	[BUG]  [BUGGY]  final  long  order  =  matrix.getRowDimension();  [CE]  possible  loss  of  precision  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  long  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  long  order  =  matrix.getRowDimension();	  final    double    order    =    matrix.getRowDimension();    	non-compiled	[CE]  possible  loss  of  precision	48	None	replace
250	[BUG]  [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  1L;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  1L;  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  1L;	  final    int    maxDelta    =    matrix.getMaxDeltaDimension()    -    1;    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
251	[BUG]  [BUGGY]  int  orderedL  =  matrix.getColumnDimension();  [CE]  cannot  find  symbol  order  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  int  orderedL  =  matrix.getColumnDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	int  orderedL  =  matrix.getColumnDimension();	  int    order    =    matrix.getColumnDimension();    int    orderedL    =    matrix.getRowDimension();    	non-compiled	[CE]  cannot  find  symbol  order	10	None	replace
252	[BUG]  [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  absolutePositivityThreshold);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  absolutePositivityThreshold);  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.max(relativeSymmetryThreshold,  matrix.getMaxDimension()  -  absolutePositivityThreshold);	  Math.max(relativeSymmetryThreshold,    matrix.getMaxDimension());    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
253	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	add	final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension()  -  1;	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    row    =    matrix.getRowDimension()    -    1;    	compilable	  [FE]  AssertionError  	79	2	replace
254	[BUG]  [BUGGY]  final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension()  -  1;  [FE]  AssertionError  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension()  -  1;  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	final  int  order  =  matrix.getColumnDimension();  final  int  row  =  matrix.getRowDimension()  -  1;	  final    int    order    =    matrix.getRowDimension()    -    1;    final    int    row    =    matrix.getRowDimension()    -    1;    	compilable	  [FE]  AssertionError  	79	2	replace
255	[BUG]  [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDimension()));  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(relativeSymmetryThreshold,  matrix.getMaxDimension()));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(relativeSymmetryThreshold,  matrix.getMaxDimension()));	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	71	None	replace
256	[BUG]  [BUGGY]  Math.min(maxDelta,  matrix.getMaxDeltaDimension()));  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  Math.min(maxDelta,  matrix.getMaxDeltaDimension()));  [BUGGY]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	Math.min(maxDelta,  matrix.getMaxDeltaDimension()));	  Math.min(relativeSymmetryThreshold,    matrix.getRowDimension()));    	non-compiled	[CE]  ';'  expected	71	None	replace
257	[BUG]  [BUGGY]  static  final  long  order  =  matrix.getRowDimension();  [CE]  illegal  start  of  expression  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }      [BUGGY]  static  final  long  order  =  matrix.getRowDimension();  [BUGGY]      lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	104	104	2	replace	static  final  long  order  =  matrix.getRowDimension();	  static    final    int    order    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
