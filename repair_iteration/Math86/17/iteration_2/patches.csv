bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
2	[BUG]  [BUGGY]  if  (lI  <  absolutePositiveSymmetryThreshold)  {  [CE]  cannot  find  symbol  absolutePositiveSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (lI  <  absolutePositiveSymmetryThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (lI  <  absolutePositiveSymmetryThreshold)  {	  if    (lI    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  cannot  find  symbol  absolutePositiveSymmetryThreshold	102	None	replace
3	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if  (relativeSymmetryThreshold  <  absolutePositivityThreshold)  {	  if    (lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	102	6	replace
4	[BUG]  [BUGGY]  if  (relativeSymmetryThreshold  <  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (relativeSymmetryThreshold  <  absolutePositivityThreshold)  {	  if    (lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	102	6	replace
5	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	85	5	add
6	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	85	5	add
7	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	85	5	add
8	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	85	5	add
9	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  LTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  cannot  find  symbol  LTData  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  LTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    LTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  cannot  find  symbol  LTData	85	None	add
10	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
11	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cadLT  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cadLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  cadLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cadLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
12	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cadLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
13	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.synthetic();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.synthetic();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.synthetic();	  final    double[][]    lTData    =    lTData.symmetry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
14	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.doubleValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.doubleValue();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.doubleValue();	  final    double[][]    lTData    =    lTData.symmetry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
15	[BUG]  [BUGGY]  ((  RealMatrix)lI).getData();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
16	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
17	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
18	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
19	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
20	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
21	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].getDataRef();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i].getDataRef();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData[i].getDataRef();	  final    double[][]    lTData    =    lTData[i].getData();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
22	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].clone();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i].clone();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData[i].clone();	  final    double[][]    lTData    =    lTData[i].getData();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
23	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI.length  <  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	78	2	replace
24	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length  <  absolutePositivityThreshold)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI.length  <  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	78	2	replace
25	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI  <  absolutePositiveThreshold)  {  [CE]  cannot  find  symbol  absolutePositiveThreshold  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI  <  absolutePositiveThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI  <  absolutePositiveThreshold)  {	  if(lI    ==    null    ||    lI    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  cannot  find  symbol  absolutePositiveThreshold	78	None	replace
26	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
27	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  *  Math.max(Math.abs(lI),  Math.abs(lJI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
28	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
29	[BUG]  [BUGGY]  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    &&    lI[i]    <    absolutePositivityThreshold)    {    if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
30	[BUG]  [BUGGY]  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    &&    lI[i]    <    absolutePositivityThreshold)    {    if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
31	[BUG]  [BUGGY]  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  If(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  If(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    &&    lI[i]    <    absolutePositivityThreshold)    {    If(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  ';'  expected	108	None	add
32	[BUG]  [BUGGY]  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	cachedLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    LTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
33	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
34	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
35	[BUG]  [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
36	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
37	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedLT  =  null;	  ((    RealMatrix)lTData).cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
38	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI.length  ==  0)  {	  if(lI!=    null    ||    lI.length    ==    0)    {    	compilable	  [FE]  AssertionError  	73	2	replace
39	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length  ==  0)  {  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI.length  ==  0)  {	  if(lI!=    null    ||    lI.length    ==    0)    {    	compilable	  [FE]  AssertionError  	73	2	replace
40	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i!=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(i!=  0)  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	5	replace
41	[BUG]  [BUGGY]  if(i!=  0)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i!=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i!=  0)  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	5	replace
42	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0  ||  lI!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(i  ==  0  ||  lI!=  null)  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	6	replace
43	[BUG]  [BUGGY]  if(i  ==  0  ||  lI!=  null)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0  ||  lI!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i  ==  0  ||  lI!=  null)  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	6	replace
44	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(i  ==  0  ||  lI.length  ==  0)  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	6	replace
45	[BUG]  [BUGGY]  if(i  ==  0  ||  lI.length  ==  0)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i  ==  0  ||  lI.length  ==  0)  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	6	replace
46	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL.getData();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedL.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedL.getData();	  final    double[][]    lTData    =    cachedLT.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
47	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.getData(i);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT.getData(i);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT.getData(i);	  final    double[][]    lTData    =    cachedLT.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
48	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.getDataRef();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT.getDataRef();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT.getDataRef();	  final    double[][]    lTData    =    cachedLT.getData();    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
49	[BUG]  [BUGGY]  lTData  =  cachedLT.getData();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  cachedLT.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  cachedLT.getData();	  lTData    =    lI.getData();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
50	[BUG]  [BUGGY]  ((  RealMatrix)lI).setData(matrix);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).setData(matrix);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).setData(matrix);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lI);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
51	[BUG]  [BUGGY]  ((  RealMatrix)matrix).setData(lI);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).setData(lI);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).setData(lI);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lI);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
52	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(lTData);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(lTData);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lI);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
53	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(lT);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(lT);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(lT);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lI);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
54	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedLT  =  matrix;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedLT  =  matrix;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedLT  =  matrix;	  ((    RealMatrix)matrix).cachedLT    =    lI;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
55	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  lI;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  lI;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedLT  =  lI;	  ((    RealMatrix)matrix).cachedLT    =    lI;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
56	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedLT  =  lI;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedLT  =  lI;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedLT  =  lI;	  ((    RealMatrix)matrix).cachedLT    =    lI;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
57	[BUG]  [BUGGY]  ((  RealMatrix)li).cachedLT  =  lI;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)li).cachedLT  =  lI;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)li).cachedLT  =  lI;	  ((    RealMatrix)matrix).cachedLT    =    lI;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
58	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lI),  Math.abs(lJI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
59	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
60	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
61	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI  <  =  absoluteSymmetryThreshold)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI  <  =  absoluteSymmetryThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI  <  =  absoluteSymmetryThreshold)  {	  if(lI    ==    null    ||    lI    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
62	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  ||  lI.length  >  0)  {	  if(lI!=    null    &&    lI.length    >    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	112	6	replace
63	[BUG]  [BUGGY]  if(lI!=  null  ||  lI.length  >  0)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||  lI.length  >  0)  {	  if(lI!=    null    &&    lI.length    >    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	112	6	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  &&  lI.length  >  0)  {	  if(lI!=    null    &&    lI.length    >    0)    {    	compilable	  [FE]  AssertionError  	112	2	replace
65	[BUG]  [BUGGY]  if(lI  ==  null  &&  lI.length  >  0)  {  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  &&  lI.length  >  0)  {	  if(lI!=    null    &&    lI.length    >    0)    {    	compilable	  [FE]  AssertionError  	112	2	replace
66	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI.length  >  0)  {	  if(lI!=    null    &&    lI.length    >    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	112	6	replace
67	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length  >  0)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI.length  >  0)  {	  if(lI!=    null    &&    lI.length    >    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	112	6	replace
68	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  ||  lI.length  <  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI.length    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	133	6	replace
69	[BUG]  [BUGGY]  if(lI!=  null  ||  lI.length  <  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||  lI.length  <  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI.length    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	133	6	replace
70	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  ||  lI.length  ==  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI.length    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	133	6	replace
71	[BUG]  [BUGGY]  if(lI!=  null  ||  lI.length  ==  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||  lI.length  ==  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI.length    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	133	6	replace
72	[BUG]  [BUGGY]  if(lI!=  null  &&  lI.length  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI.length  <  =  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI.length    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
73	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.getDataRef();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.getDataRef();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.getDataRef();	  final    double[][]    lTData    =    lTData.getData();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
74	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.getData(i);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.getData(i);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.getData(i);	  final    double[][]    lTData    =    lTData.getData();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
75	[BUG]  [BUGGY]  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {	  if(lI    ==    null    &&    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
76	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {	  if(lI    ==    null    &&    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
77	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL[i].getData();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedL[i].getData();  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedL[i].getData();	  final    double[][]    lTData    =    cachedLT[i].getData();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
78	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT[i].getDataRef();  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT[i].getDataRef();  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT[i].getDataRef();	  final    double[][]    lTData    =    cachedLT[i].getData();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
79	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT[i].clone();  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT[i].clone();  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT[i].clone();	  final    double[][]    lTData    =    cachedLT[i].getData();    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
80	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	5	add
81	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	5	add
82	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  LTData  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    LTData  =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  LTData	16	None	add
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	5	add
84	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	16	5	add
85	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
86	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
87	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    if(lI  ==  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
88	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  ';'  expected	40	None	add
89	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  >=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  >=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    if(lI  >=  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
90	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL[i];  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedL[i];  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedL[i];	  final    double[][]    lTData    =    cachedLT[i];    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
91	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i];  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i];  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData[i];	  final    double[][]    lTData    =    cachedLT[i];    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
92	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT[i].data;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT[i].data;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT[i].data;	  final    double[][]    lTData    =    cachedLT[i];    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
93	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
94	[BUG]  [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
95	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
96	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
97	[BUG]  [BUGGY]  static  final  double[][]  lTData  =  matrix.getData();  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  static  final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	static  final  double[][]  lTData  =  matrix.getData();	          final    double[][]    lTData    =    matrix.getData();    static    final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
98	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }	          final    double[][]    lTData    =    matrix.getData();    static    final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
99	[BUG]  [BUGGY]  if(lTData  ==  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData  ==  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData  ==  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }	          final    double[][]    lTData    =    matrix.getData();    static    final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
100	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
101	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
102	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
103	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
104	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
105	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
106	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
107	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
108	[BUG]  [BUGGY]  if(lI  ==  null)  {  If(lI!=  null)  {  [CE]  ';'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  If(lI!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null)  {  If(lI!=  null)  {	  if(lI!=    null)    {    If(lI!=    null)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
109	[BUG]  [BUGGY]  if(lI!=  null)  {  If(lI  ==  null)  {  [CE]  ';'  expected  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  If(lI  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  If(lI  ==  null)  {	  if(lI!=    null)    {    If(lI!=    null)    {    	non-compiled	[CE]  ';'  expected	47	None	replace
110	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
111	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  if(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  if(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    if(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
112	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {	  	non-compiled	[CE]  ';'  expected	106	None	add
113	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  >=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI.length  >=  0)  {	  if(lI    ==    null    ||    lI.length!=    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	71	6	replace
114	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length  >=  0)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  >=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI.length  >=  0)  {	  if(lI    ==    null    ||    lI.length!=    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	71	6	replace
115	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
116	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
117	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	115	5	add
118	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	115	5	add
119	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	115	5	add
120	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	115	5	add
121	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
122	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
123	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
124	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
125	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
126	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
127	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
128	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
129	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  not  a  statement  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	non-compiled	[CE]  not  a  statement	121	None	add
130	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  not  a  statement  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData[i][i]  >  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	non-compiled	[CE]  not  a  statement	121	None	add
131	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  not  a  statement  [FE]            NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  	non-compiled	[CE]  not  a  statement	121	None	add
132	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  lTData;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  lTData;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  lTData;	  ((    RealMatrix)lI).cachedL    =    matrix;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
133	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  cachedLT.cachedL;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  cachedLT.cachedL;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  cachedLT.cachedL;	  ((    RealMatrix)lI).cachedL    =    matrix;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
134	[BUG]  [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  }	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
135	[BUG]  [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
136	[BUG]  [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI    	non-compiled	[CE]  ';'  expected	128	None	replace
137	[BUG]  [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [CE]  ';'  expected  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI    	non-compiled	[CE]  ';'  expected	128	None	replace
138	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
139	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [CE]  ';'  expected  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  ';'  expected	4	None	replace
140	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.symbol();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT.symbol();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT.symbol();	  final    double[][]    lTData    =    lTData.symbol();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
141	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData.symbol();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  ltData.symbol();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  ltData.symbol();	  final    double[][]    lTData    =    lTData.symbol();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
142	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL.symbol();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedL.symbol();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedL.symbol();	  final    double[][]    lTData    =    lTData.symbol();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
143	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
144	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  l  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  l  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  l	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  ';'  expected	82	None	replace
145	[BUG]  [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  throw  new  NotPositiveDef  [CE]  '('  or  '['  expected  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  throw  new  NotPositiveDef  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  throw  new  NotPositiveDef	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  '('  or  '['  expected	82	None	replace
146	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold;	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
147	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  inverse;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  inverse;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  inverse;	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
148	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  if(lI  ==  null  ||  lI.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  if(lI  ==  null  ||  lI.length!=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI.length!=    0)    {    if(lI  ==  null  ||  lI.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
149	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  if(lI  ==  null  ||  lI.length  >=  0)  {  [CE]  illegal  start  of  expression  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  if(lI  ==  null  ||  lI.length  >=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI.length!=    0)    {    if(lI  ==  null  ||  lI.length  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
150	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  if(lI!=  null  ||  lI.length!=  0)  {  [CE]  illegal  start  of  expression  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  if(lI!=  null  ||  lI.length!=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI.length!=    0)    {    if(lI!=  null  ||  lI.length!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	70	None	add
151	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  If(lI  ==  null  ||  lI.length!=  0)  {  [CE]  ';'  expected  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length!=  0)  {  If(lI  ==  null  ||  lI.length!=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI.length!=    0)    {    If(lI  ==  null  ||  lI.length!=  0)  {	  	non-compiled	[CE]  ';'  expected	70	None	add
152	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
153	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
154	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	117	5	add
155	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	117	5	add
156	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	117	5	add
157	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	117	5	add
158	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
159	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
160	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
161	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
162	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold!=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if  (relativeSymmetryThreshold!=  absolutePositivityThreshold)  {	  if    (lI!=    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	62	6	replace
163	[BUG]  [BUGGY]  if  (relativeSymmetryThreshold!=  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold!=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (relativeSymmetryThreshold!=  absolutePositivityThreshold)  {	  if    (lI!=    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	62	6	replace
164	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i!=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(i!=  absolutePositivityThreshold)  {	  if    (lI!=    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	62	6	replace
165	[BUG]  [BUGGY]  if(i!=  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i!=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i!=  absolutePositivityThreshold)  {	  if    (lI!=    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	62	6	replace
166	[BUG]  [BUGGY]  if(lI!=  null  &&  lI  <  absolutePositivityThreshold)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI  <  absolutePositivityThreshold)  {	  if(lI!=    null    &&    lI    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	54	None	replace
167	[BUG]  [BUGGY]  if(lI  ==  null  &&  lI  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  &&  lI  <  =  absolutePositivityThreshold)  {	  if(lI!=    null    &&    lI    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
168	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI!=  null)  {	  if(lTData    ==    null)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	95	6	replace
169	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI!=  null)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI!=  null)  {	  if(lTData    ==    null)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	95	6	replace
170	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  ||  lI  ==  null)  {	  if(lTData    ==    null)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	95	6	replace
171	[BUG]  [BUGGY]  if(lI!=  null  ||  lI  ==  null)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||  lI  ==  null)  {	  if(lTData    ==    null)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	95	6	replace
172	[BUG]  [BUGGY]  if(lI!=  null  ||!lI.isEmpty())  {  [CE]  cannot  find  symbol  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||!lI.isEmpty())  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||!lI.isEmpty())  {	  if(lI!=    null    &&!lI.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
173	[BUG]  [BUGGY]  if(lI  ==  null  &&!lI.isEmpty())  {  [CE]  cannot  find  symbol  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&!lI.isEmpty())  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  &&!lI.isEmpty())  {	  if(lI!=    null    &&!lI.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	113	None	replace
174	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
175	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
176	[BUG]  [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
177	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI[i]);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI[i]);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI[i]);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
178	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(relativeSymmetryThreshold  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l	  if(relativeSymmetryThreshold    >    0)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  ';'  expected	84	None	replace
179	[BUG]  [BUGGY]  double[][]  lTData  =  matrix.getData();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	double[][]  lTData  =  matrix.getData();	          final    double[][]    lTData    =    matrix.getData();    final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
180	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedL;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedL;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).cachedLT  =  cachedL;	  ((    RealMatrix)matrix).cachedLT    =    matrix;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
181	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  matrix;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedLT  =  matrix;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedLT  =  matrix;	  ((    RealMatrix)matrix).cachedLT    =    matrix;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
182	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedLT;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  cachedLT;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).cachedLT  =  cachedLT;	  ((    RealMatrix)matrix).cachedLT    =    matrix;    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
183	[BUG]  [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  if(lI!=  null  &&  lI.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  if(lI!=  null  &&  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI.length    >    0)    {    if(lI!=  null  &&  lI.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
184	[BUG]  [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  if(lI  ==  null  &&  lI.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  if(lI  ==  null  &&  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI.length    >    0)    {    if(lI  ==  null  &&  lI.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
185	[BUG]  [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  If(lI!=  null  &&  lI.length  >  0)  {  [CE]  ';'  expected  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  If(lI!=  null  &&  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI.length    >    0)    {    If(lI!=  null  &&  lI.length  >  0)  {	  	non-compiled	[CE]  ';'  expected	111	None	add
186	[BUG]  [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  if(lI  >=  null  &&  lI.length  >  0)  {  [CE]  illegal  start  of  expression  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  >  0)  {  if(lI  >=  null  &&  lI.length  >  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    &&    lI.length    >    0)    {    if(lI  >=  null  &&  lI.length  >  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	111	None	add
187	[BUG]  [BUGGY]  if(lTData  ==  null)  {  if(lTData  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData  ==  null)  {  if(lTData  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData    ==    null)    {    if(lTData  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
188	[BUG]  [BUGGY]  if(lTData  ==  null)  {  if(lTData!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData  ==  null)  {  if(lTData!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData    ==    null)    {    if(lTData!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
189	[BUG]  [BUGGY]  if(lTData  ==  null)  {  if(lTData  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData  ==  null)  {  if(lTData  >=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData    ==    null)    {    if(lTData  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	94	None	add
190	[BUG]  [BUGGY]  if(lTData  ==  null)  {  If(lTData  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData  ==  null)  {  If(lTData  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData    ==    null)    {    If(lTData  ==  null)  {	  	non-compiled	[CE]  ';'  expected	94	None	add
191	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    l    	non-compiled	[CE]  ';'  expected	2	None	replace
192	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  <  =  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI.length  <  =  0)  {	  if(lI!=    null    ||    lI.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
193	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  cachedLT.doubleValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  cachedLT.doubleValue();  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedL  =  cachedLT.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
194	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  cachedLT.doubleValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  cachedLT.doubleValue();  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  cachedLT.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
195	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.doubleValue();  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.doubleValue();  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedL  =  matrix.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
196	[BUG]  [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  if(lI!=  null  ||  lI.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  if(lI!=  null  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    ||    lI.length    ==    0)    {    if(lI!=  null  ||  lI.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
197	[BUG]  [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  if(lI  ==  null  ||  lI.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  if(lI  ==  null  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    ||    lI.length    ==    0)    {    if(lI  ==  null  ||  lI.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
198	[BUG]  [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  If(lI!=  null  ||  lI.length  ==  0)  {  [CE]  ';'  expected  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  If(lI!=  null  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    ||    lI.length    ==    0)    {    If(lI!=  null  ||  lI.length  ==  0)  {	  	non-compiled	[CE]  ';'  expected	72	None	add
199	[BUG]  [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  if(lI  >=  null  ||  lI.length  ==  0)  {  [CE]  illegal  start  of  expression  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI.length  ==  0)  {  if(lI  >=  null  ||  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=    null    ||    lI.length    ==    0)    {    if(lI  >=  null  ||  lI.length  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	72	None	add
200	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedLT  =  null;	  ((    RealMatrix)lI).cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
201	[BUG]  [BUGGY]  ((  RealMatrix)matrix).getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
202	[BUG]  [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [CE]  variable  lTData  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                final        double[][]        lTData        =        matrix.getData();        final    double[][]    lTDATA    =    matrix.getData();    final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();	  	non-compiled	[CE]  variable  lTData  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	add
203	[BUG]  [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  Final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [CE]  not  a  statement  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  Final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                final        double[][]        lTData        =        matrix.getData();        final    double[][]    lTDATA    =    matrix.getData();    Final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();	  	non-compiled	[CE]  not  a  statement	25	None	add
204	[BUG]  [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                final        double[][]        lTData        =        matrix.getData();        final    double[][]    lTDATA    =    matrix.getData();    static  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
205	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI[i]    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	43	6	replace
206	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI[i]    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	43	6	replace
207	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  <  =  absoluteSymmetryThreshold)  {  [CE]  illegal  start  of  expression  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  <  =  absoluteSymmetryThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI[i]  <  =  absoluteSymmetryThreshold)  {	  if(lI    ==    null    ||    lI[i]    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
208	[BUG]  [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  L  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	L  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  if(lI    ==    0)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
209	[BUG]  [BUGGY]  L  =  null;  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  L  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	L  =  null;  cachedLT  =  null;	  if(lI    ==    0)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
210	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	119	5	add
211	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	119	5	add
212	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	119	5	add
213	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	119	5	add
214	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	119	5	add
215	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	119	5	add
216	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	  	compilable	  [FE]  AssertionError  	119	5	add
217	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }	  	compilable	  [FE]  AssertionError  	119	5	add
218	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  AssertionError  	119	5	add
219	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  AssertionError  	119	5	add
220	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
221	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
222	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
223	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
224	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
225	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
226	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
227	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
228	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
229	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  /  Math.max(Math.abs(lI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
230	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
231	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[	  if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
232	[BUG]  [BUGGY]  ((  RealMatrix)li).cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)li).cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)li).cachedLT  =  null;	  ((    RealMatrix)matrix).cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
233	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <	  final    double[][]    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
234	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(relativeSymmetryThreshold  >  0)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI	  final    double[][]    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
235	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(relativeSymmetryThreshold  >  0)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(relativeSymmetryThreshold  >  0)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l	  final    double[][]    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
236	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.getDataReference();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT.getDataReference();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT.getDataReference();	  final    double[][]    lTData    =    matrix.getDataReference();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
237	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.getDataReference();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.getDataReference();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.getDataReference();	  final    double[][]    lTData    =    matrix.getDataReference();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
238	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
239	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
241	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
242	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
243	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedL  =  null;  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
244	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
245	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
246	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
247	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;  [FE]  AssertionError  [FE]            AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    lTData  =  matrix.getData();  cachedLT  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	58	5	add
248	[BUG]  [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold)    	non-compiled	[CE]  ')'  expected	132	None	replace
249	[BUG]  [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold)  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold)    	non-compiled	[CE]  ')'  expected	132	None	replace
250	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold)    	non-compiled	[CE]  ')'  expected	132	None	replace
251	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.clone();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.clone();	  final    double[][]    lTData    =    ltData.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
252	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cadL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
253	[BUG]  [BUGGY]  final  double[][]  lTDATA  =  matrix.getData();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTDATA  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTDATA  =  matrix.getData();	          final    double[][]    lTData    =    matrix.getData();    final    double[][]    lTDATA    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
254	[BUG]  [BUGGY]  if  (lI[i][i]  ==  cachedLT)  {  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (lI[i][i]  ==  cachedLT)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (lI[i][i]  ==  cachedLT)  {	  if    (lI[i][i]    ==    absolutePositivityThreshold)    {    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
255	[BUG]  [BUGGY]  if  (lI[i][i]  ==  lTData[i])  {  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (lI[i][i]  ==  lTData[i])  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (lI[i][i]  ==  lTData[i])  {	  if    (lI[i][i]    ==    absolutePositivityThreshold)    {    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
256	[BUG]  [BUGGY]  if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  }	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
257	[BUG]  [BUGGY]  if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
258	[BUG]  [BUGGY]  if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(cachedL!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI	  if(cachedL!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  ';'  expected	141	None	replace
259	[BUG]  [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
260	[BUG]  [BUGGY]  ((  RealMatrix)lI).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
261	[BUG]  [BUGGY]  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
262	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSy  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSy  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSy	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  ')'  expected	129	None	replace
263	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
264	[BUG]  [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
265	[BUG]  [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)li).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
266	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  lI);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  lI);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  lI);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
267	[BUG]  [BUGGY]  if  (lI[i][i]!=  lTData[i])  {  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (lI[i][i]!=  lTData[i])  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (lI[i][i]!=  lTData[i])  {	  if    (lI[i][i]!=    absolutePositivityThreshold)    {    	non-compiled	[CE]  array  required,  but  double  found	67	None	replace
268	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException(   "   ");    }    	non-compiled	[CE]  	29	None	replace
269	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedL.cloneTree();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedL.cloneTree();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedL.cloneTree();	  final    double[][]    lTData    =    cachedLT.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
270	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.cloneTree(lI);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT.cloneTree(lI);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT.cloneTree(lI);	  final    double[][]    lTData    =    cachedLT.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
271	[BUG]  [BUGGY]  final  double[][]  lTData  =  cachedLT.cloneTree(i);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  cachedLT.cloneTree(i);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  cachedLT.cloneTree(i);	  final    double[][]    lTData    =    cachedLT.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
272	[BUG]  [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold    	non-compiled	[CE]  ')'  expected	131	None	replace
273	[BUG]  [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold    	non-compiled	[CE]  ')'  expected	131	None	replace
274	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold    	non-compiled	[CE]  ')'  expected	131	None	replace
275	[BUG]  [BUGGY]  if(lI!=  null  &&  lTData[i]  <  absolutePositivityThreshold)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]        NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lTData[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lTData[i]  <  absolutePositivityThreshold)  {	  if(lI    >=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	126	None	replace
276	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  cachedLT.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  cachedLT.clone();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedL  =  cachedLT.clone();	  ((    RealMatrix)lTData).cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
277	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  lI.cachedLT;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  lI.cachedLT;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedL  =  lI.cachedLT;	  ((    RealMatrix)lTData).cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
278	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedL  =  matrix;	  ((    RealMatrix)matrix).cachedL    =    lTData;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
279	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.cachedL;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  matrix.cachedL;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedL  =  matrix.cachedL;	  ((    RealMatrix)matrix).cachedL    =    lTData;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
280	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  cachedLT;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  cachedLT;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  cachedLT;	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
281	[BUG]  [BUGGY]  ((  RealMatrix)lI[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI[i]).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
282	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
283	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
284	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
285	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getData(i,  cachedL);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getData(i,  cachedL);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getData(i,  cachedL);	  final    double[][]    lTData    =    matrix.getData(i);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
286	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getData(i,  cachedLT);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getData(i,  cachedLT);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getData(i,  cachedLT);	  final    double[][]    lTData    =    matrix.getData(i);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
287	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.cloneArray();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.cloneArray();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.cloneArray();	  final    double[][]    lTData    =    lTData.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
288	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedLT  =  cachedLT;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedLT  =  cachedLT;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedLT  =  cachedLT;	  ((    RealMatrix)lI).cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
289	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  cachedLT.clone();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  cachedLT.clone();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  cachedLT.clone();	  ((    RealMatrix)lI).cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
290	[BUG]  [BUGGY]  final  double[][]  lI  =  lI[i];  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lI  =  lI[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lI  =  lI[i];	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
291	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
292	[BUG]  [BUGGY]  final  double[][]  lI  =  lTData[i];  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lI  =  lTData[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lI  =  lTData[i];	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
293	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lI  =  lI[i];  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lI  =  lI[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	for(int  i  =  0;  i  <  lTData.length;  ++i)  {  final  double[][]  lI  =  lI[i];	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	3	None	replace
294	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  cachedL);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData(i,  cachedL);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData(i,  cachedL);	  lTData    =    matrix.getData(i);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
295	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  lI);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData(i,  lI);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData(i,  lI);	  lTData    =    matrix.getData(i);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
296	[BUG]  [BUGGY]  lTData  =  matrix.getData(lI);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData(lI);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData(lI);	  lTData    =    matrix.getData(i);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
297	[BUG]  [BUGGY]  ((  RealMatrix)lTData).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
298	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
299	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getDataDimension();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getDataDimension();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getDataDimension();	  final    double[][]    lTData    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
300	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getColumnDimension();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getColumnDimension();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getColumnDimension();	  final    double[][]    lTData    =    matrix.getRowDimension();    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
301	[BUG]  [BUGGY]  if(lI  ==  null)  {  if(lI  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  if(lI  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null)    {    if(lI  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
302	[BUG]  [BUGGY]  if(lI  ==  null)  {  if(lI!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  if(lI!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null)    {    if(lI!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
303	[BUG]  [BUGGY]  if(lI  ==  null)  {  If(lI  ==  null)  {  [CE]  ';'  expected  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  If(lI  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null)    {    If(lI  ==  null)  {	  	non-compiled	[CE]  ';'  expected	68	None	add
304	[BUG]  [BUGGY]  if(lI  ==  null)  {  if(lI  >=  null)  {  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  if(lI  >=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null)    {    if(lI  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	68	None	add
305	[BUG]  [BUGGY]  if(i  ==  0)  {  if(i  ==  0)  {  [CE]  illegal  start  of  expression  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0)  {  if(i  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i    ==    0)    {    if(i  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
306	[BUG]  [BUGGY]  if(i  ==  0)  {  if(i!=  0)  {  [CE]  illegal  start  of  expression  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0)  {  if(i!=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i    ==    0)    {    if(i!=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
307	[BUG]  [BUGGY]  if(i  ==  0)  {  if(i  >=  0)  {  [CE]  illegal  start  of  expression  [FE]        NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0)  {  if(i  >=  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i    ==    0)    {    if(i  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  expression	96	None	add
308	[BUG]  [BUGGY]  if(i  ==  0)  {  If(i  ==  0)  {  [CE]  ';'  expected  [FE]          NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0)  {  If(i  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i    ==    0)    {    If(i  ==  0)  {	  	non-compiled	[CE]  ';'  expected	96	None	add
309	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  matrix.getData();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).cachedL    =    lI;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
310	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).cachedL  =  lI;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).cachedL  =  lI;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).cachedL  =  lI;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).cachedL    =    lI;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
311	[BUG]  [BUGGY]  Final  double[][]  lTData  =  matrix.getData();  [CE]  not  a  statement  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  Final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	Final  double[][]  lTData  =  matrix.getData();	          final    double[][]    lTData    =    matrix.getData();    Final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  not  a  statement	23	None	replace
312	[BUG]  [BUGGY]  if(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
313	[BUG]  [BUGGY]  If(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [CE]  ';'  expected  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  If(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	If(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
314	[BUG]  [BUGGY]  if(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  0)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
315	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                  NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  0)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
316	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getRowDimension();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getRowDimension();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getRowDimension();  cachedL  =  null;  cachedLT  =  null;  }	  lTData    =    matrix.getRowDimension();    cachedL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
317	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if  (relativeSymmetryThreshold  ==  absolutePositivityThreshold)  {	  if    (lI    ==    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	63	2	replace
318	[BUG]  [BUGGY]  if  (relativeSymmetryThreshold  ==  absolutePositivityThreshold)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (relativeSymmetryThreshold  ==  absolutePositivityThreshold)  {	  if    (lI    ==    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	63	2	replace
319	[BUG]  [BUGGY]  lTData  =  lI  ==  null?  matrix.getData()  :  lI;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  lI  ==  null?  matrix.getData()  :  lI;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  lI  ==  null?  matrix.getData()  :  lI;	  lTData    =    lI!=    null?    matrix.getData()    :    lI;    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
320	[BUG]  [BUGGY]  if(i  ==  0)  {  if(i  {  0)  {  [CE]  ')'  expected  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0)  {  if(i  {  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i    ==    0)    {    if(i  {  0)  {	  	non-compiled	[CE]  ')'  expected	96	None	add
321	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData.clone();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  ltData.clone();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  ltData.clone();	  final    double[][]    lTData    =    ltData.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
322	[BUG]  [BUGGY]  lTData  =  lI  ==  null?  new  double[0]  :  lI.getData();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  lI  ==  null?  new  double[0]  :  lI.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  lI  ==  null?  new  double[0]  :  lI.getData();	  lTData    =    lI.getData();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
323	[BUG]  [BUGGY]  lTData  =  lI!=  null?  new  double[0]  :  lI.getData();  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  lI!=  null?  new  double[0]  :  lI.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  lI!=  null?  new  double[0]  :  lI.getData();	  lTData    =    lI.getData();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
324	[BUG]  [BUGGY]  cachedL  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  cachedL  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	cachedL  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    LTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
325	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  LTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  LTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    LTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
326	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lJ  =  lJ[i]  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lJ  =  lJ[i]  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lJ  =  lJ[i]	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    l    	non-compiled	[CE]  ';'  expected	2	None	replace
327	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI.length  <  =  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
328	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI!=  absolutePositivityThreshold)  {  [CE]  incomparable  types:  double[]  and  double  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI!=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI!=  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  incomparable  types:  double[]  and  double	55	None	replace
329	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  &&  lI.length  ==  0)  {	  if(lI!=    null    ||    lI.length    ==    0)    {    	compilable	  [FE]  AssertionError  	73	2	replace
330	[BUG]  [BUGGY]  if(lI!=  null  &&  lI.length  ==  0)  {  [FE]  AssertionError  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI.length  ==  0)  {	  if(lI!=    null    ||    lI.length    ==    0)    {    	compilable	  [FE]  AssertionError  	73	2	replace
331	[BUG]  [BUGGY]  if(lI!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  if(lI    ==    0)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
332	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
333	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lJI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
334	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(Math.abs(lI),  Math.abs(lJI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(Math.abs(lI),  Math.abs(lJI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
335	[BUG]  [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cadL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
336	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  -  =  relativeSymmetryThreshold;  [CE]  illegal  start  of  expression  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  -  =  relativeSymmetryThreshold;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  -  =  relativeSymmetryThreshold;	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
337	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
338	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  cachedL  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
339	[BUG]  [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  final  double[][]  lData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [CE]  variable  lTDATA  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  final  double[][]  lData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                final        double[][]        lTData        =        matrix.getData();        final    double[][]    lTDATA    =    matrix.getData();    final  double[][]  lData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();	  	non-compiled	[CE]  variable  lTDATA  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	add
340	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
341	[BUG]  [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
342	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
343	[BUG]  [BUGGY]  ((  RealMatrix)matrix).getData();  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
344	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
345	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
346	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).cachedL  =  lI;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).cachedL  =  lI;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).cachedL  =  lI;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).cachedL    =    lI;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
347	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  null;  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getColumnDimension();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getColumnDimension();  cachedL  =  null;  cachedLT  =  null;	  lTData    =    matrix.getRowDimension();    cachedL    =    null;    cachedLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	124	None	replace
348	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]!=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI[i]!=  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	107	6	replace
349	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]!=  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]!=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI[i]!=  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	107	6	replace
350	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.syntheticBlock();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.syntheticBlock();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.syntheticBlock();	  final    double[][]    lTData    =    lTData.symmetry();    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
351	[BUG]  [BUGGY]  final  double[][]  lTData  =  li.symbol();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  li.symbol();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  li.symbol();	  final    double[][]    lTData    =    lI.symbol();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
352	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getData(i  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getData(i  +  1);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getData(i  +  1);	  final    double[][]    lTData    =    matrix.getData(i);    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
353	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getDataReference(i);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getDataReference(i);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getDataReference(i);	  final    double[][]    lTData    =    matrix.getDataReference();    	non-compiled	[CE]  illegal  start  of  type	125	None	replace
354	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i];  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i];  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i];	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	127	None	replace
355	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i]  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i]  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i]	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  ';'  expected	127	None	replace
356	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).cachedLT  =  lTData;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).cachedLT  =  lTData;	  ((    RealMatrix)matrix).cachedL    =    lTData;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
357	[BUG]  [BUGGY]  lTData  =  matrix.getData(i,  cachedLT);  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData(i,  cachedLT);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData(i,  cachedLT);	  lTData    =    matrix.getData(i);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
358	[BUG]  [BUGGY]  ((  RealMatrix)lTData).cachedL  =  this.cachedL;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lTData).cachedL  =  this.cachedL;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lTData).cachedL  =  this.cachedL;	  ((    RealMatrix)lTData).cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
359	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	for(int  i  =  0;  i  <  cachedL.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
360	[BUG]  [BUGGY]  if  (lI[i][i]  ==  0)  {  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (lI[i][i]  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (lI[i][i]  ==  0)  {	  if    (lI[i][i]    ==    absolutePositivityThreshold)    {    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
361	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  absolutePositivityThreshold  +  1;	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
362	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {	  final    double[][]    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
363	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
364	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
365	[BUG]  [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
366	[BUG]  [BUGGY]  if(i  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i  ==  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
367	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	56	5	add
368	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	56	5	add
369	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
370	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;	  	compilable	  [FE]  AssertionError  	56	5	add
371	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  RealMatrix[][]  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  incompatible  types  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  RealMatrix[][]  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    RealMatrix[][]  lTData  =  matrix.getData();  cachedL  =  null;	  	non-compiled	[CE]  incompatible  types	56	None	add
372	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  ';'  expected	110	None	replace
373	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&!lI.equals(cachedLT))  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  &&!lI.equals(cachedLT))  {	  if(lI!=    null    &&!lI.isEmpty())    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	113	6	replace
374	[BUG]  [BUGGY]  if(lI!=  null  &&!lI.equals(cachedLT))  {  [FE]  NotPositiveDefiniteMatrixException  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&!lI.equals(cachedLT))  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&!lI.equals(cachedLT))  {	  if(lI!=    null    &&!lI.isEmpty())    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	113	6	replace
375	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
376	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
377	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	129	None	replace
378	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  super.cachedLT;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  super.cachedLT;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  super.cachedLT;	  ((    RealMatrix)lI).cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
379	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
380	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(Math.abs(lI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
381	[BUG]  [BUGGY]  if(lI  ==  null  &&  lI  <  absolutePositivityThreshold)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  &&  lI  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  &&  lI  <  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	53	None	replace
382	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [CE]  illegal  start  of  expression  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
383	[BUG]  [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [CE]  illegal  start  of  expression  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
384	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(matrix);  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(matrix);  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lI).setData(matrix);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lI);    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
385	[BUG]  [BUGGY]  if(lI!=  null  &&  lI.length  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI.length  <  =  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI.length  <  =  0)  {	  if(lI!=    null    ||    lI.length    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
386	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData[i].getDataReference();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData[i].getDataReference();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData[i].getDataReference();	  final    double[][]    lTData    =    lTData[i].getData();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
387	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	117	5	add
388	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	117	5	add
389	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	          final    double[][]    lTData    =    matrix.getData();    static    final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
390	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lJ  =  lJ  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lJ  =  lJ  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lJ  =  lJ	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI    	non-compiled	[CE]  ';'  expected	128	None	replace
391	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
392	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	115	5	add
393	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    final  double[][]  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	115	5	add
394	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
395	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
396	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
397	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTI.getDataRef();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTI.getDataRef();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTI.getDataRef();	  final    double[][]    lTData    =    lTI.getData();    	non-compiled	[CE]  illegal  start  of  type	134	None	replace
398	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
399	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(relativeSymmetryThreshold,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
400	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absolutePositivityThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
401	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
402	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
403	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
404	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
405	[BUG]  [BUGGY]  if(lI  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  >=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  >=  null)  {	  if(lTData    ==    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	95	None	replace
406	[BUG]  [BUGGY]  If(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [CE]  ';'  expected  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  If(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	If(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  ';'  expected	14	None	replace
407	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.symbol()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.symbol()  +  1;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.symbol()  +  1;	  final    double[][]    lTData    =    lTData.symbol();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
408	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lTData!=  null)  {	  if(lI!=    null)    {    if(lI    >=    null)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	46	6	replace
409	[BUG]  [BUGGY]  if(lTData!=  null)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {	  if(lI!=    null)    {    if(lI    >=    null)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	46	6	replace
410	[BUG]  [BUGGY]  final  double[][]  lI  =  lI[  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lI  =  lI[  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lI  =  lI[	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
411	[BUG]  [BUGGY]  final  double[][]  lTData  =  lI[  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lI[  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lI[	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
412	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getDataImpl();  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getDataImpl();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getDataImpl();	  final    double[][]    lTData    =    matrix.getDataRef();    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
413	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lTData.length  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lTData.length  <  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	78	2	replace
414	[BUG]  [BUGGY]  if(lI  ==  null  ||  lTData.length  <  absolutePositivityThreshold)  {  [FE]  AssertionError  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lTData.length  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lTData.length  <  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	78	2	replace
415	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
416	[BUG]  [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
417	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI[i]  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  ||  lI[i]  ==  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	42	6	replace
418	[BUG]  [BUGGY]  if(lI!=  null  ||  lI[i]  ==  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  ||  lI[i]  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  ||  lI[i]  ==  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    =    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	42	6	replace
419	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lI.doubleValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  lI.doubleValue();  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).cachedL  =  lI.doubleValue();	  ((    RealMatrix)matrix).cachedL    =    cachedLT.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
420	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedLT  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
421	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  cachedL  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
422	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
423	[BUG]  [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
424	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold  [CE]  ')'  expected  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold    	non-compiled	[CE]  ')'  expected	131	None	replace
425	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold    	non-compiled	[CE]  ')'  expected	131	None	replace
426	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold    	non-compiled	[CE]  ')'  expected	131	None	replace
427	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
428	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
429	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  i);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  i);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  i);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
430	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  maxDelta);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
431	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  RealMatrix  matrix  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  variable  matrix  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  RealMatrix  matrix  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    RealMatrix  matrix  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  variable  matrix  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	85	None	add
432	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    final  double[][]  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	119	5	add
433	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  final  double[][]  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  final  double[][]  lTData  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    final  double[][]  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	119	5	add
434	[BUG]  [BUGGY]  if(lI  ==  0)  {  [CE]  incomparable  types:  double[]  and  int  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  0)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  0)  {	  if(i    ==    0)    {    	non-compiled	[CE]  incomparable  types:  double[]  and  int	97	None	replace
435	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if((  lI  ==  null)||(i!=  0))  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if((  lI  ==  null)||(i!=  0))  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	5	replace
436	[BUG]  [BUGGY]  if((  lI  ==  null)||(i!=  0))  {  [FE]  NotPositiveDefiniteMatrixException  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if((  lI  ==  null)||(i!=  0))  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if((  lI  ==  null)||(i!=  0))  {	  if(i    ==    0)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	97	5	replace
437	[BUG]  [BUGGY]  CachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cadLT  =  null;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  CachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cadLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	CachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  cadLT  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cadLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
438	[BUG]  [BUGGY]  CachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  CachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	CachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cadLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
439	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
440	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  relativeSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
441	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  lI);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  lI);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(RELATIVE_SYMMETRY_THRESHOLD,  lI);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
442	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);  [CE]  illegal  start  of  type  [FE]                                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(RELATIVE_SYMMETRY_THRESHOLD,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	138	None	replace
443	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold)    	non-compiled	[CE]  ')'  expected	132	None	replace
444	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold)  [CE]  ')'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.min(relativeSymmetryThreshold)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold)    	non-compiled	[CE]  ')'  expected	132	None	replace
445	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(lI)  [CE]  ')'  expected  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(lI)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(lI)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold)    	non-compiled	[CE]  ')'  expected	132	None	replace
446	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltI.symbol();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  ltI.symbol();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  ltI.symbol();	  final    double[][]    lTData    =    lI.symbol();    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
447	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	58	5	add
448	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	58	5	add
449	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	58	5	add
450	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	58	5	add
451	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  cachedLT  =  null;  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  cachedLT  =  null;  }	  	non-compiled	[CE]  illegal  start  of  expression	58	None	add
452	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(i  <  absolutePositivityThreshold)  {	  if    (lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	102	6	replace
453	[BUG]  [BUGGY]  if(i  <  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  <  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i  <  absolutePositivityThreshold)  {	  if    (lI    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	102	6	replace
454	[BUG]  [BUGGY]  if((  lI  ==  0)||(i  <  lI.length))  {  [CE]  incomparable  types:  double[]  and  int  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if((  lI  ==  0)||(i  <  lI.length))  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if((  lI  ==  0)||(i  <  lI.length))  {	  if(i    ==    0)    {    	non-compiled	[CE]  incomparable  types:  double[]  and  int	97	None	replace
455	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI  ==  null)  {	  if(lTData    ==    null)    {    	compilable	  [FE]  AssertionError  	95	2	replace
456	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI  ==  null)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI  ==  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI  ==  null)  {	  if(lTData    ==    null)    {    	compilable	  [FE]  AssertionError  	95	2	replace
457	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold!=  lI.length)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if  (relativeSymmetryThreshold!=  lI.length)  {	  if    (lI!=    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	62	6	replace
458	[BUG]  [BUGGY]  if  (relativeSymmetryThreshold!=  lI.length)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (relativeSymmetryThreshold!=  lI.length)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (relativeSymmetryThreshold!=  lI.length)  {	  if    (lI!=    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	62	6	replace
459	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData.getDataRef();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  ltData.getDataRef();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  ltData.getDataRef();	  final    double[][]    lTData    =    ltData.getData();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
460	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]!=  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]!=  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI[i]!=  =  absolutePositivityThreshold)  {	  if(lI    ==    null    ||    lI[i]    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
461	[BUG]  [BUGGY]  if(lI!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  lTData  =  matrix.getData();  cachedL  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
462	[BUG]  [BUGGY]  if(lI!=  null)  {  cachedL  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  cachedL  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  cachedL  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
463	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
464	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(i  ==  absolutePositivityThreshold)  {	  if    (lI    ==    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	63	2	replace
465	[BUG]  [BUGGY]  if(i  ==  absolutePositivityThreshold)  {  [FE]  AssertionError  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(i  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(i  ==  absolutePositivityThreshold)  {	  if    (lI    ==    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	63	2	replace
466	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  lI);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
467	[BUG]  [BUGGY]  final  double[][]  lTData  =  matrix.getDataReflection();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  matrix.getDataReflection();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  matrix.getDataReflection();	  final    double[][]    lTData    =    matrix.getDataReferences();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
468	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  lTData.length;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  lTData.length;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  lTData.length;	  ((    RealMatrix)lI).cachedL    =    cachedLT;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
469	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  ==  '  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  ==  '	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI    	non-compiled	[CE]  illegal  line  end  in  character  literal	128	None	replace
470	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  >>  '  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  >>  '	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI    	non-compiled	[CE]  illegal  line  end  in  character  literal	128	None	replace
471	[BUG]  [BUGGY]  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  l  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  l  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  l	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  ';'  expected	82	None	replace
472	[BUG]  [BUGGY]  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[    	non-compiled	[CE]  ';'  expected	82	None	replace
473	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  lTData[i];  }  [CE]  illegal  start  of  expression  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  lTData[i];  }	          final    double[][]    lTData    =    matrix.getData();    static    final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
474	[BUG]  [BUGGY]  if(lTData  ==  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  lTData[i];  }  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData  ==  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  lTData[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData  ==  null)  {  final  double[][]  lTData  =  matrix.getData();  static  final  double[][]  lTData  =  lTData[i];  }	          final    double[][]    lTData    =    matrix.getData();    static    final    double[][]    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
475	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.symbol2();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.symbol2();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.symbol2();	  final    double[][]    lTData    =    lTData.symbol();    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
476	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]          NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
477	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  if(lI  ==  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
478	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
479	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  NotPositiveDefiniteMatrixException  	121	6	add
480	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold);  }	  	non-compiled	[CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	121	None	add
481	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null    ||    lI[i]    <    absolutePositivityThreshold)    {    if(lI  ==  null  ||  lI[i]  >=  absolutePositivityThreshold)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
482	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  AssertionError  	119	5	add
483	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  AssertionError  	119	5	add
484	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	119	5	add
485	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  else  {  throw  new  NotPositiveDefiniteMatrixException();  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	119	5	add
486	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lI));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI),  Math.abs(lI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
487	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
488	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	115	5	add
489	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	115	5	add
490	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	115	5	add
491	[BUG]  [BUGGY]  if(lI  ==  null)  {  if(lI  {  null)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  if(lI  {  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI    ==    null)    {    if(lI  {  null)  {	  	non-compiled	[CE]  ')'  expected	68	None	add
492	[BUG]  [BUGGY]  if(lTData  ==  null)  {  if(lTData  {  null)  {  [CE]  ')'  expected  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData  ==  null)  {  if(lTData  {  null)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData    ==    null)    {    if(lTData  {  null)  {	  	non-compiled	[CE]  ')'  expected	94	None	add
493	[BUG]  [BUGGY]  if(relativeSymmetryThreshold  >  1)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]                  AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(relativeSymmetryThreshold  >  1)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(relativeSymmetryThreshold  >  1)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(relativeSymmetryThreshold    >    0)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
494	[BUG]  [BUGGY]  if(lI!=  null)  {  if(relativeSymmetryThreshold  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  if(relativeSymmetryThreshold  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  if(relativeSymmetryThreshold  >  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(relativeSymmetryThreshold    >    0)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
495	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  -  relativeSymmetryThreshold;  [CE]  not  a  statement  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  -  relativeSymmetryThreshold;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  -  relativeSymmetryThreshold;	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold;    	non-compiled	[CE]  not  a  statement	36	None	replace
496	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	130	None	replace
497	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]            NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  &&  lI[i]  <  =  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
498	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]              NotPositiveDefiniteMatrixException      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI[i]  <  absolutePositivityThreshold)  {  If(lI!=  null  ||  lI[i]  <  =  absolutePositivityThreshold)  {	  if(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    If(lI!=    null    ||    lI[i]    <    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
499	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  lTData[i];  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  lTData[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  lTData[i];  }	          final    double[][]    lTData    =    matrix.getData();    final    double[][]    lTDATA    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
500	[BUG]  [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  lTData[0];  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  lTData[0];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  final  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  lTData[0];  }	          final    double[][]    lTData    =    matrix.getData();    final    double[][]    lTDATA    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
501	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltData.length;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  ltData.length;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  ltData.length;	  final    double[][]    lTData    =    ltData.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
502	[BUG]  [BUGGY]  final  double[][]  lTData  =  lTData.toArray();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  lTData.toArray();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  lTData.toArray();	  final    double[][]    lTData    =    lTData.getData();    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
503	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
504	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI[i]));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI[i]));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI[i]));    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
505	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	120	6	replace
506	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  NotPositiveDefiniteMatrixException  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	120	6	replace
507	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  nu  [CE]  ';'  expected  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  nu  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  nu	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	non-compiled	[CE]  ';'  expected	120	None	replace
508	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absoluteSymmetryThreshold  *  Math.max(Math.abs(lI));	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI));    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
509	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i];  }	  if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  variable  i  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	140	None	replace
510	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
511	[BUG]  [BUGGY]  if(lI!=  null)  {  t  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  t  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  t  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
512	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [CE]  ')'  expected  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  Math.max(relativeSymmetryThreshold)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  ')'  expected	129	None	replace
513	[BUG]  [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).cachedL  =  null;  cachedLT  =  null;	  if(lI    ==    0)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    	non-compiled	[CE]  illegal  start  of  type	123	None	replace
514	[BUG]  [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [CE]  variable  lTData  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          final    double[][]    lTData    =    matrix.getData();    final  double[][]  lTDATA  =  matrix.getData();  double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                final        double[][]        lTData        =        matrix.getData();        final    double[][]    lTDATA    =    matrix.getData();    double[][]  lTData  =  matrix.getData();  final  double[][]  lTDATA  =  matrix.getData();	  	non-compiled	[CE]  variable  lTData  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	25	None	add
515	[BUG]  [BUGGY]  if  (lI[i][i]  ==  lJI)  {  [CE]  array  required,  but  double  found  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (lI[i][i]  ==  lJI)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (lI[i][i]  ==  lJI)  {	  if    (lI[i][i]    ==    absolutePositivityThreshold)    {    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
516	[BUG]  [BUGGY]  if  (lI[i][i]!=  cachedLT)  {  [CE]  array  required,  but  double  found  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if  (lI[i][i]!=  cachedLT)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if  (lI[i][i]!=  cachedLT)  {	  if    (lI[i][i]    ==    absolutePositivityThreshold)    {    	non-compiled	[CE]  array  required,  but  double  found	49	None	replace
517	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  &&  lI[i]  ==  absolutePositivityThreshold)  {	  if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	41	2	replace
518	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  ==  absolutePositivityThreshold)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  ==  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI[i]  ==  absolutePositivityThreshold)  {	  if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    	compilable	  [FE]  AssertionError  	41	2	replace
519	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  >=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null  &&  lI[i]  >=  absolutePositivityThreshold)  {	  if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	41	6	replace
520	[BUG]  [BUGGY]  if(lI!=  null  &&  lI[i]  >=  absolutePositivityThreshold)  {  [FE]  NotPositiveDefiniteMatrixException  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI[i]  >=  absolutePositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI[i]  >=  absolutePositivityThreshold)  {	  if(lI!=    null    &&    lI[i]    <    absolutePositivityThreshold)    {    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	41	6	replace
521	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lTData),  Math.abs(lJI));	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(Math.abs(lI),    Math.abs(lJI));    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
522	[BUG]  [BUGGY]  final  double[][]  lTData  =  ltQ.cloneTree();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  final  double[][]  lTData  =  ltQ.cloneTree();  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	final  double[][]  lTData  =  ltQ.cloneTree();	  final    double[][]    lTData    =    ltI.cloneTree();    	non-compiled	[CE]  illegal  start  of  type	139	None	replace
523	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
524	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(relativeSymmetryThreshold,  absoluteSymmetryThreshold);	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    relativeSymmetryThreshold);    	non-compiled	[CE]  illegal  start  of  type	137	None	replace
525	[BUG]  [BUGGY]  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	122	6	replace
526	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  NotPositiveDefiniteMatrixException  [FE]    NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	compilable	  [FE]  NotPositiveDefiniteMatrixException  	122	6	replace
527	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	compilable	  [FE]  AssertionError  	122	2	replace
528	[BUG]  [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      NotPositiveDefiniteMatrixException    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    else    {    throw    new    NotPositiveDefiniteMatrixException();    }    	compilable	  [FE]  AssertionError  	122	2	replace
529	[BUG]  [BUGGY]  lTData  =  lI!=  null?  lI.getData()  :  null;  [CE]  illegal  start  of  type  [FE]        AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  lTData  =  lI!=  null?  lI.getData()  :  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	lTData  =  lI!=  null?  lI.getData()  :  null;	  lTData    =    lI.getData();    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
530	[BUG]  [BUGGY]  for(int  i  =  0;  i  <  lI.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  for(int  i  =  0;  i  <  lI.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	for(int  i  =  0;  i  <  lI.length;  ++i)  {  final  double[][]  lI  =  lI[i];  }	  for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
531	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(cachedL,  Math.max(relativeSymmetryThreshold));  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(cachedL,  Math.max(relativeSymmetryThreshold));  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(cachedL,  Math.max(relativeSymmetryThreshold));	  ((    RealMatrix)matrix).relativeSymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold));    	non-compiled	[CE]  illegal  start  of  type	135	None	replace
532	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  <  2)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	if(lI  ==  null  ||  lI.length  <  2)  {	  if(lI    ==    null)    {    	compilable	  [FE]  AssertionError  	69	2	replace
533	[BUG]  [BUGGY]  if(lI  ==  null  ||  lI.length  <  2)  {  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI  ==  null  ||  lI.length  <  2)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI  ==  null  ||  lI.length  <  2)  {	  if(lI    ==    null)    {    	compilable	  [FE]  AssertionError  	69	2	replace
534	[BUG]  [BUGGY]  if(matrix!=  null)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(matrix!=  null)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(matrix!=  null)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI	  final    double[][]    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
535	[BUG]  [BUGGY]  if(matrix!=  null)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(matrix!=  null)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(matrix!=  null)  {  final  double[][]  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  l	  final    double[][]    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    lI[i];    }    	non-compiled	[CE]  ';'  expected	11	None	replace
536	[BUG]  [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i]  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i]  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  lI[i]	  if(lI!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    l    	non-compiled	[CE]  ';'  expected	2	None	replace
537	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  AssertionError  	56	5	add
538	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }	  	compilable	  [FE]  AssertionError  	56	5	add
539	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	56	5	add
540	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	56	5	add
541	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  	non-compiled	[CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	56	None	add
542	[BUG]  [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold)  [CE]  ')'  expected  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold)  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)matrix).symmetrySymmetryThreshold  =  relativeSymmetryThreshold  *  Math.max(lI,  Math.max(relativeSymmetryThreshold)	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).symmetrySymmetryThreshold    =    relativeSymmetryThreshold    *    Math.max(relativeSymmetryThreshold,    Math.max(relativeSymmetryThreshold)    	non-compiled	[CE]  ')'  expected	132	None	replace
543	[BUG]  [BUGGY]  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [CE]  illegal  start  of  expression  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lTData!=  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  for(int  i  =  0;  i  <  order;  ++i)  {  final  double[][]  lI  =	  if(matrix!=    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    for(int    i    =    0;    i    <    order;    ++i)    {    final    double[][]    lI    =    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
544	[BUG]  [BUGGY]  if(cachedLT!=  lI)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(cachedLT!=  lI)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(cachedLT!=  lI)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cadLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
545	[BUG]  [BUGGY]  if(cachedLT!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(cachedLT!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(cachedLT!=  0)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    lTData    =    matrix.getData();    cachedL    =    null;    cadLT    =    null;    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
546	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
547	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;	  	compilable	  [FE]  AssertionError  	117	5	add
548	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	117	5	add
549	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lI  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	117	5	add
550	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	117	5	add
551	[BUG]  [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        cachedL        =        null;        cachedLT        =        null;        if(lTData    ==    null)    {    lTData    =    matrix.getData();    cachedL    =    null;    cachedLT    =    null;    }    if(lTData  ==  null)  {  lTData  =  matrix.getData();  cachedL  =  null;  cachedLT  =  null;  }	  	compilable	  [FE]  AssertionError  	117	5	add
552	[BUG]  [BUGGY]  if(lI!=  null  &&  lI  <  =  totalPositivityThreshold)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  if(lI!=  null  &&  lI  <  =  totalPositivityThreshold)  {  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	if(lI!=  null  &&  lI  <  =  totalPositivityThreshold)  {	  if(lI!=    null    &&    lI    <    =    absolutePositivityThreshold)    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
553	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;  [FE]    AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  	non-compiled	[CE]  constructor  NotPositiveDefiniteMatrixException  in  class  NotPositiveDefiniteMatrixException  cannot  be  applied  to  given  types;	16	None	add
554	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	  	compilable	  [FE]  AssertionError  	16	5	add
555	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	  	compilable	  [FE]  AssertionError  	16	5	add
556	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i]  =  lI[i];  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i]  =  lI[i];  }  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    if(lTData!=  null)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  for(int  i  =  0;  i  <  order;  ++i)  {  lTData[i]  =  lI[i];  }	  	non-compiled	[CE]  illegal  start  of  expression	16	None	add
557	[BUG]  [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  -  absolutePositivityThreshold;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).relativeSymmetryThreshold  -  absolutePositivityThreshold;  [BUGGY]      throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).relativeSymmetryThreshold  -  absolutePositivityThreshold;	  ((    RealMatrix)lI).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  not  a  statement	34	None	replace
558	[BUG]  [BUGGY]  ((  RealMatrix)lI).cachedL  =  matrix.cachedL;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];      [BUGGY]  ((  RealMatrix)lI).cachedL  =  matrix.cachedL;  [BUGGY]      if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  for  (int  j  =  i  +  1;  j  <  order;  ++j)  {  final  double[]  lJ  =  lTData[j];  final  double  lIJ  =  lI[j];  final  double  lJI  =  lJ[i];  final  double  maxDelta  =  relativeSymmetryThreshold  *  Math.max(Math.abs(lIJ),  Math.abs(lJI));  if  (Math.abs(lIJ  -  lJI)  >  maxDelta)  {  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	114	114	2	replace	((  RealMatrix)lI).cachedL  =  matrix.cachedL;	  ((    RealMatrix)lI).cachedL    =    matrix;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
