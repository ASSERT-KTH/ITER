bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length  +  2;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length  +  2;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length  +  2;	  double[]    cachedL    =    lTData.length    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
2	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length  *  1;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length  *  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length  *  1;	  double[]    cachedL    =    lTData.length    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
3	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length  +  3;  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length  +  3;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length  +  3;	  double[]    cachedL    =    lTData.length    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
4	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  order;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  order;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDelta()  /  order;	  int    maxDelta    =    matrix.getMaxDelta()    -    order;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
5	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  -  order  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  -  order  +  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDelta()  -  order  +  1;	  int    maxDelta    =    matrix.getMaxDelta()    -    order;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
6	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  order;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  order;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDelta()  *  order;	  int    maxDelta    =    matrix.getMaxDelta()    -    order;    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
7	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  lJ);  [CE]  cannot  find  symbol  lJ  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  lJ);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  lJ);	  cachedL=    new    RealMatrix(lTData,    lTQ);    	non-compiled	[CE]  cannot  find  symbol  lJ	22	None	replace
8	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  ltI);  [CE]  cannot  find  symbol  ltI  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  ltI);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  ltI);	  cachedL=    new    RealMatrix(lTData,    lTQ);    	non-compiled	[CE]  cannot  find  symbol  ltI	22	None	replace
9	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getDataImpl();  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  lTData  =  matrix.getDataImpl();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  lTData  =  matrix.getDataImpl();	  lTData    =    matrix.getDataImpl();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  LTData  =  matrix.getDataImpl();  [CE]  cannot  find  symbol  LTData  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  =  matrix.getDataImpl();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  =  matrix.getDataImpl();	  lTData    =    matrix.getDataImpl();    	non-compiled	[CE]  cannot  find  symbol  LTData	8	None	replace
11	[BUG]  [BUGGY]  ((  RealMatrix)matrix).setData(lTData);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).setData(lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
12	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(lTData);  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  inconvertible  types	29	None	replace
13	[BUG]  [BUGGY]  lTData  =  matrix.getLowerCase(order,  order);  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getLowerCase(order,  order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getLowerCase(order,  order);	  lTData    =    matrix.getLowerCase(order);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
14	[BUG]  [BUGGY]  lTData  =  matrix.getLowerCase(order,  lTData);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getLowerCase(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getLowerCase(order,  lTData);	  lTData    =    matrix.getLowerCase(order);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
15	[BUG]  [BUGGY]  lTData  =  matrix.getLowerCase(order,  true);  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getLowerCase(order,  true);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getLowerCase(order,  true);	  lTData    =    matrix.getLowerCase(order);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
16	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length,  order;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length,  order;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length,  order;	  double[]    cachedL    =    lTData.length,    lTData.length;    	non-compiled	[CE]  incompatible  types	55	None	replace
17	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length,  lTQ.length;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length,  lTQ.length;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length,  lTQ.length;	  double[]    cachedL    =    lTData.length,    lTData.length;    	non-compiled	[CE]  ';'  expected	55	None	replace
18	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length,  totalSymmetryThreshold;  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length,  totalSymmetryThreshold;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length,  totalSymmetryThreshold;	  double[]    cachedL    =    lTData.length,    lTData.length;    	non-compiled	[CE]  incompatible  types	55	None	replace
19	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order  +  1;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order  +  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order  +  1;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    -    order;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
20	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  order;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  order;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  /  order;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    -    order;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
21	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  order;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  order;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  *  order;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    -    order;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
22	[BUG]  [BUGGY]  CachedL=(lTData!=  null)?  null  :  lTData.length;  [CE]  cannot  find  symbol  CachedL  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  CachedL=(lTData!=  null)?  null  :  lTData.length;  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	CachedL=(lTData!=  null)?  null  :  lTData.length;	  CachedL=(lTData    ==    null)?    null    :    lTData.length;    	non-compiled	[CE]  cannot  find  symbol  CachedL	40	None	replace
23	[BUG]  [BUGGY]  L=(lTData  ==  null)?  null  :  lTData.length;  [CE]  cannot  find  symbol  L  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  L=(lTData  ==  null)?  null  :  lTData.length;  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	L=(lTData  ==  null)?  null  :  lTData.length;	  CachedL=(lTData    ==    null)?    null    :    lTData.length;    	non-compiled	[CE]  cannot  find  symbol  L	40	None	replace
24	[BUG]  [BUGGY]  cachedL=lTData[order],  lTData.length;  [CE]  ';'  expected  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=lTData[order],  lTData.length;  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=lTData[order],  lTData.length;	  cachedL=    lTData[order];    	non-compiled	[CE]  ';'  expected	43	None	replace
25	[BUG]  [BUGGY]  cachedL=lTData[order],  lTData[i];  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=lTData[order],  lTData[i];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=lTData[order],  lTData[i];	  cachedL=    lTData[order];    	non-compiled	[CE]  ';'  expected	43	None	replace
26	[BUG]  [BUGGY]  cachedL=  new  double[lTData.length  -  1];  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData.length  -  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData.length  -  1];	  cachedL=    new    double[order][lTData.length    -    1];    	non-compiled	[CE]  incompatible  types	18	None	replace
27	[BUG]  [BUGGY]  cachedL=  new  double[order][lTData.length  -  2];  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[order][lTData.length  -  2];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[order][lTData.length  -  2];	  cachedL=    new    double[order][lTData.length    -    1];    	non-compiled	[CE]  incompatible  types	18	None	replace
28	[BUG]  [BUGGY]  ((  RealMatrix)matrix).data  =  matrix.getData();  [CE]  cannot  find  symbol  data  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).data  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).data  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).data    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  data	30	None	replace
29	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).data  =  matrix.getData();  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).data  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).data  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).data    =    matrix.getData();    	non-compiled	[CE]  inconvertible  types	30	None	replace
30	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	27	2	add
31	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    lTData  =  matrix.getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	27	2	add
32	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	27	2	add
33	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();	  	compilable	  [FE]  AssertionError  	27	2	add
34	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  LTData  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    LTData  =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  LTData	27	None	add
35	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
36	[BUG]  [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataImpl();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataImpl();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedLT  =  matrix.getDataImpl();	  RealMatrix    cachedL    =    matrix.getDataImpl();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
37	[BUG]  [BUGGY]  RealMatrix  cachedL  =  lTData.getDataImpl();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  lTData.getDataImpl();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  lTData.getDataImpl();	  RealMatrix    cachedL    =    matrix.getDataImpl();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
38	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getDataImpl(order);  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getDataImpl(order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getDataImpl(order);	  RealMatrix    cachedL    =    matrix.getDataImpl();    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
39	[BUG]  [BUGGY]  lTData  =  matrix.getData(order,  cachedLT);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData(order,  cachedLT);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData(order,  cachedLT);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
40	[BUG]  [BUGGY]  lTData  =  matrix.getData(order,  lTData);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData(order,  lTData);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
41	[BUG]  [BUGGY]  lTData  =  matrix.getData(order,  cachedL);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData(order,  cachedL);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData(order,  cachedL);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
42	[BUG]  [BUGGY]  lTData  =  matrix.getData(order,  true);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData(order,  true);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData(order,  true);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	7	None	replace
43	[BUG]  [BUGGY]  CachedL  =  new  RealMatrix(lTData,  lJ);  [CE]  cannot  find  symbol  CachedL  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  CachedL  =  new  RealMatrix(lTData,  lJ);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	CachedL  =  new  RealMatrix(lTData,  lJ);	  cachedL=    new    RealMatrix(lTData,    ltQ);    	non-compiled	[CE]  cannot  find  symbol  CachedL	23	None	replace
44	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  order);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  order);	  lTData    =    matrix.getColumnDimension(order,    dataArea);    	non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	26	None	replace
45	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  /  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDelta()  /  1;	  int    maxDelta    =    matrix.getMaxDelta()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
46	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  1;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  *  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDelta()  *  1;	  int    maxDelta    =    matrix.getMaxDelta()    +    1;    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	31	2	add
48	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	31	2	add
49	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	31	2	add
50	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	31	2	add
51	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  LTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  cannot  find  symbol  LTData  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  LTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    LTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  cannot  find  symbol  LTData	31	None	add
52	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  illegal  start  of  expression  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
53	[BUG]  [BUGGY]  ((  RealMatrix)lTData).removeAll(lTData.length);  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).removeAll(lTData.length);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).removeAll(lTData.length);	  ((    RealMatrix)lTData).removeAll(lTData);    	non-compiled	[CE]  inconvertible  types	60	None	replace
54	[BUG]  [BUGGY]  ((  RealMatrix)lTData).removeAll(order);  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).removeAll(order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).removeAll(order);	  ((    RealMatrix)lTData).removeAll(lTData);    	non-compiled	[CE]  inconvertible  types	60	None	replace
55	[BUG]  [BUGGY]  ((  RealMatrix)lTData).removeAll(cachedLT);  [CE]  inconvertible  types  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).removeAll(cachedLT);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).removeAll(cachedLT);	  ((    RealMatrix)lTData).removeAll(lTData);    	non-compiled	[CE]  inconvertible  types	60	None	replace
56	[BUG]  [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataRef();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedLT  =  matrix.getDataRef();	  RealMatrix    cachedL    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
57	[BUG]  [BUGGY]  RealMatrix  cachedL  =  lTData.getDataRef();  [CE]  cannot  find  symbol  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  lTData.getDataRef();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  lTData.getDataRef();	  RealMatrix    cachedL    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
58	[BUG]  [BUGGY]  LTData  =  matrix.getData();  [CE]  cannot  find  symbol  LTData  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  =  matrix.getData();	          lTData    =    matrix.getData();    LTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTData	51	None	replace
59	[BUG]  [BUGGY]  Ltata  =  matrix.getData();  [CE]  cannot  find  symbol  Ltata  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  Ltata  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	Ltata  =  matrix.getData();	          lTData    =    matrix.getData();    LTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  Ltata	51	None	replace
60	[BUG]  [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataRelativeSymmetryThreshold();  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataRelativeSymmetryThreshold();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedLT  =  matrix.getDataRelativeSymmetryThreshold();	  RealMatrix    cachedL    =    matrix.getDataRelativeSymmetryThreshold();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
61	[BUG]  [BUGGY]  RealMatrix  cachedL  =  lTData.getDataRelativeSymmetryThreshold();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  lTData.getDataRelativeSymmetryThreshold();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  lTData.getDataRelativeSymmetryThreshold();	  RealMatrix    cachedL    =    matrix.getDataRelativeSymmetryThreshold();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
62	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  IllegalArgumentException  	28	8	replace
63	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  IllegalArgumentException  	28	8	replace
64	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  AssertionError  	28	2	replace
65	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  AssertionError  	28	2	replace
66	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  lTData  =  null;  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  lTData  =  null;  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  NullPointerException  	28	8	replace
67	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  lTData  =  null;  }  [FE]  NullPointerException  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  lTData  =  null;  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  lTData  =  null;  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  NullPointerException  	28	8	replace
68	[BUG]  [BUGGY]  ((  RealMatrix)lTData).removeChangeListener(this);  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).removeChangeListener(this);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).removeChangeListener(this);	  ((    RealMatrix)lTData).remove();    	non-compiled	[CE]  inconvertible  types	59	None	replace
69	[BUG]  [BUGGY]  ((  RealMatrix)lTData).removeChildren();  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).removeChildren();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).removeChildren();	  ((    RealMatrix)lTData).remove();    	non-compiled	[CE]  inconvertible  types	59	None	replace
70	[BUG]  [BUGGY]  RealMatrix  cachedLT  =  matrix.getData(order);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedLT  =  matrix.getData(order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedLT  =  matrix.getData(order);	  RealMatrix    cachedLT    =    matrix.getData();    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	11	None	replace
71	[BUG]  [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataLocation();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataLocation();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedLT  =  matrix.getDataLocation();	  RealMatrix    cachedLT    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
72	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  /  1;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    -    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
73	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  *  1;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    -    1;    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
74	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(relativeSymmetryThreshold,  order);  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(relativeSymmetryThreshold,  order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(relativeSymmetryThreshold,  order);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    Math.min(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	48	None	replace
75	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.min(order,  lTData);  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.min(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  Math.min(order,  lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    Math.min(order,    lTData);    	non-compiled	[CE]  inconvertible  types	48	None	replace
76	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(order,  lTData);  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(order,  lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    Math.min(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	48	None	replace
77	[BUG]  [BUGGY]  cachedL=  new  double[lTData.length  +  1];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData.length  +  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData.length  +  1];	  cachedL=    new    double[order][lTData.length    +    1];    	non-compiled	[CE]  incompatible  types	16	None	replace
78	[BUG]  [BUGGY]  cachedL=  new  double[order][lTData.length  +  2];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[order][lTData.length  +  2];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[order][lTData.length  +  2];	  cachedL=    new    double[order][lTData.length    +    1];    	non-compiled	[CE]  incompatible  types	16	None	replace
79	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(order,  lTData.length);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(order,  lTData.length);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(order,  lTData.length);	  cachedL=    new    RealMatrix(lTData.length,    order);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	2	None	replace
80	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getData(order,  lTData);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getData(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getData(order,  lTData);	  RealMatrix    cachedL    =    matrix.getData(order);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	10	None	replace
81	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getData(lTData,  order);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getData(lTData,  order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getData(lTData,  order);	  RealMatrix    cachedL    =    matrix.getData(order);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	10	None	replace
82	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getData(calendar,  order);  [CE]  cannot  find  symbol  calendar  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getData(calendar,  order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getData(calendar,  order);	  RealMatrix    cachedL    =    matrix.getData(order);    	non-compiled	[CE]  cannot  find  symbol  calendar	10	None	replace
83	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  Double[]  cachedL  =  new  Double[lTData.length];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	Double[]  cachedL  =  new  Double[lTData.length];	  Double[]    cachedL    =    lTData.length;    	compilable	  [FE]  AssertionError  	20	2	replace
84	[BUG]  [BUGGY]  Double[]  cachedL  =  new  Double[lTData.length];  [FE]  AssertionError  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  Double[]  cachedL  =  new  Double[lTData.length];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	Double[]  cachedL  =  new  Double[lTData.length];	  Double[]    cachedL    =    lTData.length;    	compilable	  [FE]  AssertionError  	20	2	replace
85	[BUG]  [BUGGY]  Double[]  cachedL  =  lTData.length,  lTData.length;  [CE]  ';'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  Double[]  cachedL  =  lTData.length,  lTData.length;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	Double[]  cachedL  =  lTData.length,  lTData.length;	  Double[]    cachedL    =    lTData.length;    	non-compiled	[CE]  ';'  expected	20	None	replace
86	[BUG]  [BUGGY]  Double[]  cachedL  =  ltData.length;  [CE]  cannot  find  symbol  ltData  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  Double[]  cachedL  =  ltData.length;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	Double[]  cachedL  =  ltData.length;	  Double[]    cachedL    =    lTData.length;    	non-compiled	[CE]  cannot  find  symbol  ltData	20	None	replace
87	[BUG]  [BUGGY]  LTEData  =  matrix.getData();  [CE]  cannot  find  symbol  LTEData  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTEData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTEData  =  matrix.getData();	          lTData    =    matrix.getData();    LTEData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTEData	52	None	replace
88	[BUG]  [BUGGY]  lTData  =  matrix.getData();  LTEData  =  lTData.getData();  [CE]  cannot  find  symbol  LTEData  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  LTEData  =  lTData.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  LTEData  =  lTData.getData();	          lTData    =    matrix.getData();    LTEData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTEData	52	None	replace
89	[BUG]  [BUGGY]  ((  RealMatrix)lTData).detachFromPosition(order);  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).detachFromPosition(order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).detachFromPosition(order);	  ((    RealMatrix)lTData).detachFromPosition();    	non-compiled	[CE]  inconvertible  types	61	None	replace
90	[BUG]  [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  -  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  -  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).detachFromPosition()  -  1;	  ((    RealMatrix)lTData).detachFromPosition();    	non-compiled	[CE]  not  a  statement	61	None	replace
91	[BUG]  [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  /  2;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  /  2;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).detachFromPosition()  /  2;	  ((    RealMatrix)lTData).detachFromPosition();    	non-compiled	[CE]  not  a  statement	61	None	replace
92	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(order);  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(order);	  ((    RealMatrix)lTData).remove(lTData);    	non-compiled	[CE]  inconvertible  types	4	None	replace
93	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(order,  lTData);  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(order,  lTData);	  ((    RealMatrix)lTData).remove(lTData);    	non-compiled	[CE]  inconvertible  types	4	None	replace
94	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(lTQ);  [CE]  cannot  find  symbol  lTQ  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(lTQ);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(lTQ);	  ((    RealMatrix)lTData).remove(lTData);    	non-compiled	[CE]  cannot  find  symbol  lTQ	4	None	replace
95	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(lTData.length);  [CE]  inconvertible  types  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(lTData.length);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(lTData.length);	  ((    RealMatrix)lTData).remove(lTData);    	non-compiled	[CE]  inconvertible  types	4	None	replace
96	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  lTData.length);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  lTData.length);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  order,  lTData.length);	  cachedL=    new    RealMatrix(lTData,    lTData.length);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	1	None	replace
97	[BUG]  [BUGGY]  CachedL  =  new  RealMatrix(lTData,  lTData.length);  [CE]  cannot  find  symbol  CachedL  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  CachedL  =  new  RealMatrix(lTData,  lTData.length);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	CachedL  =  new  RealMatrix(lTData,  lTData.length);	  cachedL=    new    RealMatrix(lTData,    lTData.length);    	non-compiled	[CE]  cannot  find  symbol  CachedL	1	None	replace
98	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData.length,  order);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData.length,  order);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  lTData.length,  order);	  cachedL=    new    RealMatrix(lTData,    lTData.length);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	1	None	replace
99	[BUG]  [BUGGY]  cachedL=  new  double[lTData[order][lTData.length  +  1];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData[order][lTData.length  +  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData[order][lTData.length  +  1];	  cachedL=    new    double[lTData[order][lTData.length];    	non-compiled	[CE]  ']'  expected	45	None	replace
100	[BUG]  [BUGGY]  cachedL=  new  double[lTData[order][lTData.length  -  1];  [CE]  ']'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData[order][lTData.length  -  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData[order][lTData.length  -  1];	  cachedL=    new    double[lTData[order][lTData.length];    	non-compiled	[CE]  ']'  expected	45	None	replace
101	[BUG]  [BUGGY]  cachedL=  new  double[lTData[order][lTData.length  +  2];  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData[order][lTData.length  +  2];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData[order][lTData.length  +  2];	  cachedL=    new    double[lTData[order][lTData.length];    	non-compiled	[CE]  ']'  expected	45	None	replace
102	[BUG]  [BUGGY]  lTData  =  matrix.getDataItem(order,  lTData);  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getDataItem(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getDataItem(order,  lTData);	  lTData    =    matrix.getDataItem(order);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
103	[BUG]  [BUGGY]  lTData  =  matrix.getDataItem(order,  order);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getDataItem(order,  order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getDataItem(order,  order);	  lTData    =    matrix.getDataItem(order);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
104	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedL,  cachedLT);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedL,  cachedLT);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  cachedL,  cachedLT);	  lTData    =    matrix.getColumnDimension(order,    cachedLT);    	non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	24	None	replace
105	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedLT,  cachedL);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedLT,  cachedL);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  cachedLT,  cachedL);	  lTData    =    matrix.getColumnDimension(order,    cachedLT);    	non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	24	None	replace
106	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getDataDimension();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  lTData  =  matrix.getDataDimension();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  lTData  =  matrix.getDataDimension();	  lTData    =    matrix.getDataDimension();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
107	[BUG]  [BUGGY]  LTData  =  matrix.getDataDimension();  [CE]  cannot  find  symbol  LTData  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  =  matrix.getDataDimension();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  =  matrix.getDataDimension();	  lTData    =    matrix.getDataDimension();    	non-compiled	[CE]  cannot  find  symbol  LTData	6	None	replace
108	[BUG]  [BUGGY]  int  maxDelta  =  lTData.getMaxDelta()  +  order;  [CE]  cannot  find  symbol  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  lTData.getMaxDelta()  +  order;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  lTData.getMaxDelta()  +  order;	  int    maxDelta    =    lTData.getMaxDelta();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
109	[BUG]  [BUGGY]  int  maxDelta  =  lTData.getMaxDelta()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  lTData.getMaxDelta()  +  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  lTData.getMaxDelta()  +  1;	  int    maxDelta    =    lTData.getMaxDelta();    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
110	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	46	None	replace
111	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [CE]  inconvertible  types  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  absolutePositivityThreshold;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  inconvertible  types	46	None	replace
112	[BUG]  [BUGGY]  ((  RealMatrix)lTData).setIndex(order  -  1);  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).setIndex(order  -  1);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).setIndex(order  -  1);	  ((    RealMatrix)lTData).setIndex(order);    	non-compiled	[CE]  inconvertible  types	5	None	replace
113	[BUG]  [BUGGY]  ((  RealMatrix)lTData).setIndex(order  +  1);  [CE]  inconvertible  types  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).setIndex(order  +  1);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).setIndex(order  +  1);	  ((    RealMatrix)lTData).setIndex(order);    	non-compiled	[CE]  inconvertible  types	5	None	replace
114	[BUG]  [BUGGY]  ((  RealMatrix)lTData).setIndex(order,  cachedLT);  [CE]  inconvertible  types  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).setIndex(order,  cachedLT);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).setIndex(order,  cachedLT);	  ((    RealMatrix)lTData).setIndex(order);    	non-compiled	[CE]  inconvertible  types	5	None	replace
115	[BUG]  [BUGGY]  ((  RealMatrix)lTData).setIndex(order,  cachedL);  [CE]  inconvertible  types  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).setIndex(order,  cachedL);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).setIndex(order,  cachedL);	  ((    RealMatrix)lTData).setIndex(order);    	non-compiled	[CE]  inconvertible  types	5	None	replace
116	[BUG]  [BUGGY]  cachedL=  new  double[lTData.length][order  +  1];  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData.length][order  +  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData.length][order  +  1];	  cachedL=    new    double[lTData.length][order];    	non-compiled	[CE]  incompatible  types	17	None	replace
117	[BUG]  [BUGGY]  cachedL=  new  double[lTData.length][order  -  1];  [CE]  incompatible  types  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData.length][order  -  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData.length][order  -  1];	  cachedL=    new    double[lTData.length][order];    	non-compiled	[CE]  incompatible  types	17	None	replace
118	[BUG]  [BUGGY]  cachedL=  new  double[lTData.length][0];  [CE]  incompatible  types  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData.length][0];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData.length][0];	  cachedL=    new    double[lTData.length][order];    	non-compiled	[CE]  incompatible  types	17	None	replace
119	[BUG]  [BUGGY]  cachedL=  new  double[lTData.length][order  -  order];  [CE]  incompatible  types  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData.length][order  -  order];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData.length][order  -  order];	  cachedL=    new    double[lTData.length][order];    	non-compiled	[CE]  incompatible  types	17	None	replace
120	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	((  RealMatrix)matrix).getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
121	[BUG]  [BUGGY]  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
122	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  IllegalArgumentException  	32	8	replace
123	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  IllegalArgumentException  	32	8	replace
124	[BUG]  [BUGGY]  if(order  <  =  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  <  =  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  <  =  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
125	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
126	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
127	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getLowerCase(order);  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  lTData  =  matrix.getLowerCase(order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  lTData  =  matrix.getLowerCase(order);	  LTData    lTData    =    matrix.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
128	[BUG]  [BUGGY]  cachedL=(lTData  ==  null)?  null  :  lTData;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=(lTData  ==  null)?  null  :  lTData;  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=(lTData  ==  null)?  null  :  lTData;	  cachedL=(lTData!=    null)?    null    :    lTData;    	non-compiled	[CE]  incompatible  types	37	None	replace
129	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  +  1];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	double[]  cachedL  =  new  double[lTData.length  +  1];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
130	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length  +  1];  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  +  1];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  new  double[lTData.length  +  1];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
131	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  -  1];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	double[]  cachedL  =  new  double[lTData.length  -  1];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
132	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length  -  1];  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  -  1];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  new  double[lTData.length  -  1];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
133	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  +  order];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	double[]  cachedL  =  new  double[lTData.length  +  order];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
134	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length  +  order];  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  +  order];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  new  double[lTData.length  +  order];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
135	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  *  order];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	double[]  cachedL  =  new  double[lTData.length  *  order];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
136	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length  *  order];  [FE]  AssertionError  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length  *  order];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  new  double[lTData.length  *  order];	  double[]    cachedL    =    new    double[lTData.length];    	compilable	  [FE]  AssertionError  	54	2	replace
137	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(order,  lTData);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(order,  lTData);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(order,  lTData);	  cachedL=    new    RealMatrix(lTData,    order);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	21	None	replace
138	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  ltQ,  order);  [CE]  cannot  find  symbol  ltQ  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  ltQ,  order);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  ltQ,  order);	  cachedL=    new    RealMatrix(lTData,    order);    	non-compiled	[CE]  cannot  find  symbol  ltQ	21	None	replace
139	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  cachedLT);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  cachedLT);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  lTData,  cachedLT);	  lTData    =    matrix.getColumnDimension(order,    lTData);    	non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	25	None	replace
140	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  cachedL);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  cachedL);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  lTData,  cachedL);	  lTData    =    matrix.getColumnDimension(order,    lTData);    	non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	25	None	replace
141	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  double[]  cachedL  =  new  double[lTData.length];  [CE]  variable  cachedL  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  double[]  cachedL  =  new  double[lTData.length];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]    cachedL    =    new    double[lTData.length];    double[]  cachedL  =  new  double[lTData.length];	  	non-compiled	[CE]  variable  cachedL  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	53	None	add
142	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  Double[]  cachedL  =  new  double[lTData.length];  [CE]  variable  cachedL  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  Double[]  cachedL  =  new  double[lTData.length];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]    cachedL    =    new    double[lTData.length];    Double[]  cachedL  =  new  double[lTData.length];	  	non-compiled	[CE]  variable  cachedL  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	53	None	add
143	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  int[]  cachedL  =  new  double[lTData.length];  [CE]  variable  cachedL  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  int[]  cachedL  =  new  double[lTData.length];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]    cachedL    =    new    double[lTData.length];    int[]  cachedL  =  new  double[lTData.length];	  	non-compiled	[CE]  variable  cachedL  is  already  defined  in  constructor  CholeskyDecompositionImpl(RealMatrix,double,double)	53	None	add
144	[BUG]  [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  lTData[]  cachedL  =  new  double[lTData.length];  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  new  double[lTData.length];  lTData[]  cachedL  =  new  double[lTData.length];  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]    cachedL    =    new    double[lTData.length];    lTData[]  cachedL  =  new  double[lTData.length];	  	non-compiled	[CE]  cannot  find  symbol	53	None	add
145	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  0;  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  0;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  0;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    0;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	49	None	replace
146	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  0;  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  0;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).relativeSymmetryThreshold  =  0;	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    0;    	non-compiled	[CE]  inconvertible  types	49	None	replace
147	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getDataLength();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  lTData  =  matrix.getDataLength();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  lTData  =  matrix.getDataLength();	  lTData    =    matrix.getDataLength();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
148	[BUG]  [BUGGY]  lTData  =  matrix.getDataLength()  +  1;  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getDataLength()  +  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getDataLength()  +  1;	  lTData    =    matrix.getDataLength();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
149	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  lTData  =  matrix.getDataRef();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  lTData  =  matrix.getDataRef();	  lTData    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
150	[BUG]  [BUGGY]  LTData  =  matrix.getDataRef();  [CE]  cannot  find  symbol  LTData  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  =  matrix.getDataRef();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  =  matrix.getDataRef();	  lTData    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol  LTData	9	None	replace
151	[BUG]  [BUGGY]  ((  RealMatrix)lTData).set();  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).set();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).set();	  ((    RealMatrix)lTData).reset();    	non-compiled	[CE]  inconvertible  types	3	None	replace
152	[BUG]  [BUGGY]  ((  RealMatrix)lTData).set(order,  lTQ);  [CE]  cannot  find  symbol  lTQ  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).set(order,  lTQ);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).set(order,  lTQ);	  ((    RealMatrix)lTData).reset();    	non-compiled	[CE]  cannot  find  symbol  lTQ	3	None	replace
153	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  LTEData  =  matrix.getData();  }  [CE]  cannot  find  symbol  LTEData  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  LTEData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  LTEData  =  matrix.getData();  }	          lTData    =    matrix.getData();    LTEData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTEData	52	None	replace
154	[BUG]  [BUGGY]  LatinMatrix=(lTData  ==  null)?  null  :  lTData.length;  [CE]  cannot  find  symbol  LatinMatrix  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LatinMatrix=(lTData  ==  null)?  null  :  lTData.length;  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LatinMatrix=(lTData  ==  null)?  null  :  lTData.length;	  CachedL=(lTData    ==    null)?    null    :    lTData.length;    	non-compiled	[CE]  cannot  find  symbol  LatinMatrix	40	None	replace
155	[BUG]  [BUGGY]  cachedL=  lTData[order  +  1];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  lTData[order  +  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  lTData[order  +  1];	  cachedL=    lTData[order];    	non-compiled	[CE]  incompatible  types	43	None	replace
156	[BUG]  [BUGGY]  cachedL=  lTData[order  *  order];  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  lTData[order  *  order];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  lTData[order  *  order];	  cachedL=    lTData[order];    	non-compiled	[CE]  incompatible  types	43	None	replace
157	[BUG]  [BUGGY]  ((  RealMatrix)lTData).init(matrix);  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).init(matrix);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).init(matrix);	  ((    RealMatrix)lTData).reset();    	non-compiled	[CE]  inconvertible  types	3	None	replace
158	[BUG]  [BUGGY]  ((  RealMatrix)lTData).set(order,  lTData);  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).set(order,  lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).set(order,  lTData);	  ((    RealMatrix)lTData).reset();    	non-compiled	[CE]  inconvertible  types	3	None	replace
159	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length  +  4;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length  +  4;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length  +  4;	  double[]    cachedL    =    lTData.length    +    1;    	non-compiled	[CE]  incompatible  types	41	None	replace
160	[BUG]  [BUGGY]  ((  RealMatrix)lTData).removeAll(cachedL);  [CE]  inconvertible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).removeAll(cachedL);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).removeAll(cachedL);	  ((    RealMatrix)lTData).removeAll(lTData);    	non-compiled	[CE]  inconvertible  types	60	None	replace
161	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(ordinal);  [CE]  cannot  find  symbol  ordinal  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(ordinal);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(ordinal);	  ((    RealMatrix)lTData).remove(lTData);    	non-compiled	[CE]  cannot  find  symbol  ordinal	4	None	replace
162	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(cachedLT);  [CE]  inconvertible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(cachedLT);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(cachedLT);	  ((    RealMatrix)lTData).remove(lTData);    	non-compiled	[CE]  inconvertible  types	4	None	replace
163	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(0);  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(0);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(0);	  ((    RealMatrix)lTData).remove();    	non-compiled	[CE]  inconvertible  types	59	None	replace
164	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  absolutePositivityThreshold);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  absolutePositivityThreshold);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  absolutePositivityThreshold);	  cachedL=    new    RealMatrix(lTData,    ltQ);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	23	None	replace
165	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  lJI);  [CE]  cannot  find  symbol  lJI  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  lJI);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  lJI);	  cachedL=    new    RealMatrix(lTData,    ltQ);    	non-compiled	[CE]  cannot  find  symbol  lJI	23	None	replace
166	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedLT,  dataArea);  [CE]  cannot  find  symbol  dataArea  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedLT,  dataArea);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  cachedLT,  dataArea);	  lTData    =    matrix.getColumnDimension(order,    cachedLT);    	non-compiled	[CE]  cannot  find  symbol  dataArea	24	None	replace
167	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedL);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  cachedL);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  cachedL);	  lTData    =    matrix.getColumnDimension(order,    cachedLT);    	non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	24	None	replace
168	[BUG]  [BUGGY]  cachedL=  new  double[lTData[order  -  1];  [CE]  ']'  expected  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData[order  -  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData[order  -  1];	  cachedL=    new    double[order][lTData.length    -    1];    	non-compiled	[CE]  ']'  expected	18	None	replace
169	[BUG]  [BUGGY]  cachedL=  new  double[calendar][lTData.length  -  1];  [CE]  cannot  find  symbol  calendar  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[calendar][lTData.length  -  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[calendar][lTData.length  -  1];	  cachedL=    new    double[order][lTData.length    -    1];    	non-compiled	[CE]  cannot  find  symbol  calendar	18	None	replace
170	[BUG]  [BUGGY]  LTData  =  matrix.getLowerCase(lTData);  [CE]  cannot  find  symbol  LTData  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  =  matrix.getLowerCase(lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  =  matrix.getLowerCase(lTData);	  LTData    =    matrix.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol  LTData	50	None	replace
171	[BUG]  [BUGGY]  LTDATa  =  matrix.getLowerCase();  [CE]  cannot  find  symbol  LTDATa  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTDATa  =  matrix.getLowerCase();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTDATa  =  matrix.getLowerCase();	  LTData    =    matrix.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol  LTDATa	50	None	replace
172	[BUG]  [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  +  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).detachFromPosition()  +  1;	  ((    RealMatrix)lTData).detachFromPosition();    	non-compiled	[CE]  not  a  statement	61	None	replace
173	[BUG]  [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  -  order;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).detachFromPosition()  -  order;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).detachFromPosition()  -  order;	  ((    RealMatrix)lTData).detachFromPosition();    	non-compiled	[CE]  not  a  statement	61	None	replace
174	[BUG]  [BUGGY]  LTEData  lTData  =  matrix.getDataLength();  [CE]  cannot  find  symbol  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTEData  lTData  =  matrix.getDataLength();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTEData  lTData  =  matrix.getDataLength();	  lTData    =    matrix.getDataLength();    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
175	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  0;  }  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  0;  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  0;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    0;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	49	None	replace
176	[BUG]  [BUGGY]  cachedL=  new  double[lTData[order  +  1];  [CE]  ']'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData[order  +  1];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData[order  +  1];	  cachedL=    new    double[order][lTData.length    +    1];    	non-compiled	[CE]  ']'  expected	16	None	replace
177	[BUG]  [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(order,  absolutePositivityThreshold);  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(order,  absolutePositivityThreshold);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(order,  absolutePositivityThreshold);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    Math.min(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	48	None	replace
178	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getData(lTData);  [CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getData(lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getData(lTData);	  RealMatrix    cachedL    =    matrix.getData(order);    	non-compiled	[CE]  method  getData  in  interface  RealMatrix  cannot  be  applied  to  given  types;	10	None	replace
179	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  AssertionError  	28	2	replace
180	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  AssertionError  	28	2	replace
181	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  computeSymmetryThreshold);  [CE]  cannot  find  symbol  computeSymmetryThreshold  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  computeSymmetryThreshold);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  computeSymmetryThreshold);	  lTData    =    matrix.getColumnDimension(order,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  computeSymmetryThreshold	26	None	replace
182	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  LTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  LTData  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  LTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  LTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    LTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTData	51	None	replace
183	[BUG]  [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  LTData  =  matrix.getData();  }  [CE]  cannot  find  symbol  LTData  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  ==  0)  {  lTData  =  matrix.getData();  LTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  ==  0)  {  lTData  =  matrix.getData();  LTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    LTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTData	51	None	replace
184	[BUG]  [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataLength();  [CE]  cannot  find  symbol  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedLT  =  matrix.getDataLength();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedLT  =  matrix.getDataLength();	  RealMatrix    cachedLT    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
185	[BUG]  [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();  }  [CE]  cannot  find  symbol  data  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(matrix!=  null)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).data    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  data	30	None	replace
186	[BUG]  [BUGGY]  nTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();  [CE]  cannot  find  symbol  nTData  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  nTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	nTData  =  matrix.getData();  ((  RealMatrix)matrix).data  =  matrix.getData();	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).data    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  nTData	30	None	replace
187	[BUG]  [BUGGY]  cachedL=  lTData.length  +  1;  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  lTData.length  +  1;  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  lTData.length  +  1;	  cachedL=    lTData.length;    	non-compiled	[CE]  incompatible  types	36	None	replace
188	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTEData  =  matrix.getData();  lTData  =  matrix.getData();  [CE]  cannot  find  symbol  LTEData  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  LTEData  =  matrix.getData();  lTData  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    LTEData  =  matrix.getData();  lTData  =  matrix.getData();	  	non-compiled	[CE]  cannot  find  symbol  LTEData	27	None	add
189	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
190	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
191	[BUG]  [BUGGY]  LTData  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [CE]  cannot  find  symbol  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  lTData  =  matrix.getData();  ((  RealMatrix)matrix).setData(lTData);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
192	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lPositiveSymmetryThreshold);  [CE]  cannot  find  symbol  lPositiveSymmetryThreshold  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lPositiveSymmetryThreshold);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  lTData,  lPositiveSymmetryThreshold);	  lTData    =    matrix.getColumnDimension(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  lPositiveSymmetryThreshold	25	None	replace
193	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lTQ);  [CE]  cannot  find  symbol  lTQ  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lTQ);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  lTData,  lTQ);	  lTData    =    matrix.getColumnDimension(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  lTQ	25	None	replace
194	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lQ);  [CE]  cannot  find  symbol  lQ  [FE]                          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lQ);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  lTData,  lQ);	  lTData    =    matrix.getColumnDimension(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  lQ	25	None	replace
195	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	31	2	add
196	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    ((  RealMatrix)matrix).getData();  ((  RealMatrix)matrix).getData();	  	compilable	  [FE]  AssertionError  	31	2	add
197	[BUG]  [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  RealMatrix  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [CE]  incompatible  types  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    ((  RealMatrix)matrix).getData();  RealMatrix  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        ((    RealMatrix)matrix).getData();    RealMatrix  lTData  =  matrix.getData();  ((  RealMatrix)matrix).getData();	  	non-compiled	[CE]  incompatible  types	31	None	add
198	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length,  ltQ.length;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length,  ltQ.length;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length,  ltQ.length;	  double[]    cachedL    =    lTData.length,    lTData.length;    	non-compiled	[CE]  ';'  expected	55	None	replace
199	[BUG]  [BUGGY]  Double[]  cachedL  =  lTData.length  +  1;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  Double[]  cachedL  =  lTData.length  +  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	Double[]  cachedL  =  lTData.length  +  1;	  Double[]    cachedL    =    lTData.length;    	non-compiled	[CE]  incompatible  types	20	None	replace
200	[BUG]  [BUGGY]  cachedL=  new  double[lTData.length][order],  lTData.length;  [CE]  ';'  expected  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  double[lTData.length][order],  lTData.length;  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[lTData.length][order],  lTData.length;	  cachedL=    new    double[lTData.length][order];    	non-compiled	[CE]  ';'  expected	17	None	replace
201	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData.length  -  1);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData.length  -  1);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  lTData.length  -  1);	  cachedL=    new    RealMatrix(lTData,    lTData.length);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	1	None	replace
202	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData.length  +  1);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData.length  +  1);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  lTData.length  +  1);	  cachedL=    new    RealMatrix(lTData,    lTData.length);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	1	None	replace
203	[BUG]  [BUGGY]  ((  RealMatrix)lTData).setIndex(index);  [CE]  cannot  find  symbol  index  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).setIndex(index);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).setIndex(index);	  ((    RealMatrix)lTData).setIndex(order);    	non-compiled	[CE]  cannot  find  symbol  index	5	None	replace
204	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  absoluteSymmetryThreshold);  [CE]  cannot  find  symbol  absoluteSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  absoluteSymmetryThreshold);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  order,  absoluteSymmetryThreshold);	  cachedL=    new    RealMatrix(lTData,    order);    	non-compiled	[CE]  cannot  find  symbol  absoluteSymmetryThreshold	21	None	replace
205	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  absolutePositivityThreshold);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  absolutePositivityThreshold);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  order,  absolutePositivityThreshold);	  cachedL=    new    RealMatrix(lTData,    order);    	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	21	None	replace
206	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getDataRelativeSymmetryThreshold()  +  1;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getDataRelativeSymmetryThreshold()  +  1;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getDataRelativeSymmetryThreshold()  +  1;	  RealMatrix    cachedL    =    matrix.getDataRelativeSymmetryThreshold();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
207	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  }  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  absolutePositivityThreshold;  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    absolutePositivityThreshold;    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	46	None	replace
208	[BUG]  [BUGGY]  RealMatrix  cadL  =  matrix.getDataRef();  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cadL  =  matrix.getDataRef();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cadL  =  matrix.getDataRef();	  RealMatrix    cachedL    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
209	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  -  order,  lTData.length;  [CE]  ';'  expected  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDelta()  -  order,  lTData.length;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDelta()  -  order,  lTData.length;	  int    maxDelta    =    matrix.getMaxDelta()    -    order;    	non-compiled	[CE]  ';'  expected	33	None	replace
210	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getDataRelativeSymmetryThreshold(),  lTData;  [CE]  cannot  find  symbol  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getDataRelativeSymmetryThreshold(),  lTData;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getDataRelativeSymmetryThreshold(),  lTData;	  RealMatrix    cachedL    =    matrix.getDataRelativeSymmetryThreshold();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
211	[BUG]  [BUGGY]  ((  RealMatrix)lTData).get();  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).get();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).get();	  ((    RealMatrix)lTData).remove();    	non-compiled	[CE]  inconvertible  types	59	None	replace
212	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lIJ);  [CE]  cannot  find  symbol  lIJ  [FE]                      AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  lTData,  lIJ);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  lTData,  lIJ);	  lTData    =    matrix.getColumnDimension(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  lIJ	25	None	replace
213	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(relativeSymmetryThreshold,  order);  [CE]  cannot  find  symbol  relativeSymmetryThreshold  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(relativeSymmetryThreshold,  order);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)matrix).relativeSymmetryThreshold  =  Math.min(relativeSymmetryThreshold,  order);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).relativeSymmetryThreshold    =    Math.min(order,    lTData);    	non-compiled	[CE]  cannot  find  symbol  relativeSymmetryThreshold	48	None	replace
214	[BUG]  [BUGGY]  ((  RealMatrix)lTData).removeAll(calendar);  [CE]  cannot  find  symbol  calendar  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).removeAll(calendar);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).removeAll(calendar);	  ((    RealMatrix)lTData).removeAll(lTData);    	non-compiled	[CE]  cannot  find  symbol  calendar	60	None	replace
215	[BUG]  [BUGGY]  ((  RealMatrix)lTData).initCachedL();  [CE]  inconvertible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).initCachedL();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).initCachedL();	  ((    RealMatrix)lTData).reset();    	non-compiled	[CE]  inconvertible  types	3	None	replace
216	[BUG]  [BUGGY]  double[]  cachedLT  =  lTData.length;  [CE]  incompatible  types  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedLT  =  lTData.length;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedLT  =  lTData.length;	  double[]    cachedL    =    ltData.length;    	non-compiled	[CE]  incompatible  types	19	None	replace
217	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  ltData.length);  [CE]  cannot  find  symbol  ltData  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  ltData.length);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  ltData.length);	  cachedL=    new    RealMatrix(lTData,    lTData.length);    	non-compiled	[CE]  cannot  find  symbol  ltData	1	None	replace
218	[BUG]  [BUGGY]  lTData  =  matrix.getColumnDimension(order,  this.maxDelta);  [CE]  cannot  find  symbol  maxDelta  [FE]                        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getColumnDimension(order,  this.maxDelta);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getColumnDimension(order,  this.maxDelta);	  lTData    =    matrix.getColumnDimension(order,    dataArea);    	non-compiled	[CE]  cannot  find  symbol  maxDelta	26	None	replace
219	[BUG]  [BUGGY]  RealMatrix  cachedL  =  matrix.getDataRef(),  lTData;  [CE]  cannot  find  symbol  [FE]                    AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  RealMatrix  cachedL  =  matrix.getDataRef(),  lTData;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	RealMatrix  cachedL  =  matrix.getDataRef(),  lTData;	  RealMatrix    cachedL    =    matrix.getDataRef();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
220	[BUG]  [BUGGY]  lTData  =  matrix.getData();  LTDATTES  =  matrix.getData();  [CE]  cannot  find  symbol  LTDATTES  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  LTDATTES  =  matrix.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  LTDATTES  =  matrix.getData();	          lTData    =    matrix.getData();    LTData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTDATTES	51	None	replace
221	[BUG]  [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order,  lTData;  [CE]  cannot  find  symbol  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order,  lTData;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	int  maxDelta  =  matrix.getMaxDeltaDimension()  -  order,  lTData;	  int    maxDelta    =    matrix.getMaxDeltaDimension()    -    order;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
222	[BUG]  [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(matrix);  [CE]  inconvertible  types  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(matrix);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  ((  RealMatrix)lTData).setData(matrix);	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).setData(lTData);    	non-compiled	[CE]  inconvertible  types	29	None	replace
223	[BUG]  [BUGGY]  lTData  =  matrix.getData(order,  ltQ);  [CE]  cannot  find  symbol  ltQ  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData(order,  ltQ);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData(order,  ltQ);	  lTData    =    matrix.getData(order);    	non-compiled	[CE]  cannot  find  symbol  ltQ	7	None	replace
224	[BUG]  [BUGGY]  cachedL=  lTData[order  +  order];  [CE]  incompatible  types  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  lTData[order  +  order];  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  lTData[order  +  order];	  cachedL=    lTData[order];    	non-compiled	[CE]  incompatible  types	43	None	replace
225	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  lJI);  [CE]  cannot  find  symbol  lJI  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  cachedL=  new  RealMatrix(lTData,  order,  lJI);  [BUGGY]      cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  order,  lJI);	  cachedL=    new    RealMatrix(lTData,    order);    	non-compiled	[CE]  cannot  find  symbol  lJI	21	None	replace
226	[BUG]  [BUGGY]  LTData  =  matrix.getDataLength();  [CE]  cannot  find  symbol  LTData  [FE]        AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTData  =  matrix.getDataLength();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTData  =  matrix.getDataLength();	  lTData    =    matrix.getDataLength();    	non-compiled	[CE]  cannot  find  symbol  LTData	42	None	replace
227	[BUG]  [BUGGY]  LTDAP  =  matrix.getLowerCase();  [CE]  cannot  find  symbol  LTDAP  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  LTDAP  =  matrix.getLowerCase();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	LTDAP  =  matrix.getLowerCase();	  LTData    =    matrix.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol  LTDAP	50	None	replace
228	[BUG]  [BUGGY]  lTata  =  matrix.getLowerCase();  [CE]  cannot  find  symbol  lTata  [FE]                  AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTata  =  matrix.getLowerCase();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTata  =  matrix.getLowerCase();	  LTData    =    matrix.getLowerCase();    	non-compiled	[CE]  cannot  find  symbol  lTata	50	None	replace
229	[BUG]  [BUGGY]  double[]  cachedL  =  lTData.length,  absolutePositivityThreshold;  [CE]  incompatible  types  [FE]                AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  double[]  cachedL  =  lTData.length,  absolutePositivityThreshold;  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	double[]  cachedL  =  lTData.length,  absolutePositivityThreshold;	  double[]    cachedL    =    lTData.length,    lTData.length;    	non-compiled	[CE]  incompatible  types	55	None	replace
230	[BUG]  [BUGGY]  ((  RealMatrix)lTData).remove(calendar);  [CE]  cannot  find  symbol  calendar  [FE]              AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  ((  RealMatrix)lTData).remove(calendar);  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	((  RealMatrix)lTData).remove(calendar);	  ((    RealMatrix)lTData).remove(lTData);    	non-compiled	[CE]  cannot  find  symbol  calendar	4	None	replace
231	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if((  matrix  instanceof  RealMatrix)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if((  matrix  instanceof  RealMatrix)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
232	[BUG]  [BUGGY]  if((  matrix  instanceof  RealMatrix)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [FE]  AssertionError  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if((  matrix  instanceof  RealMatrix)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if((  matrix  instanceof  RealMatrix)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
233	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if((  matrix!=  null)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if((  matrix!=  null)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
234	[BUG]  [BUGGY]  if((  matrix!=  null)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if((  matrix!=  null)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if((  matrix!=  null)||((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
235	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if((  matrix  instanceof  RealMatrix)&&((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if((  matrix  instanceof  RealMatrix)&&((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
236	[BUG]  [BUGGY]  if((  matrix  instanceof  RealMatrix)&&((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [FE]  AssertionError  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if((  matrix  instanceof  RealMatrix)&&((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if((  matrix  instanceof  RealMatrix)&&((  RealMatrix)matrix).isSquare())  {  lTData  =  matrix.getData();  }	          lTData    =    matrix.getData();    ((    RealMatrix)matrix).getData();    	compilable	  [FE]  AssertionError  	32	2	replace
237	[BUG]  [BUGGY]  lTData  =  matrix.getData();  LTEData  =  cachedLT.getData();  [CE]  cannot  find  symbol  LTEData  [FE]          AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  LTEData  =  cachedLT.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  LTEData  =  cachedLT.getData();	          lTData    =    matrix.getData();    LTEData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTEData	52	None	replace
238	[BUG]  [BUGGY]  lTData  =  matrix.getData();  LTEData  =  data.getData();  [CE]  cannot  find  symbol  LTEData  [FE]            AssertionError      [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  lTData  =  matrix.getData();  LTEData  =  data.getData();  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	lTData  =  matrix.getData();  LTEData  =  data.getData();	          lTData    =    matrix.getData();    LTEData    =    matrix.getData();    	non-compiled	[CE]  cannot  find  symbol  LTEData	52	None	replace
239	[BUG]  [BUGGY]  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
240	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  AssertionError  	28	2	replace
241	[BUG]  [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionError  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]  if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	if(order  >  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  IllegalArgumentException( " ");  }	          lTData    =    matrix.getData();    lTData    =    matrix.getData();    	compilable	  [FE]  AssertionError  	28	2	replace
242	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold,  absolutePositivityThreshold);  }  [CE]  illegal  start  of  expression  [FE]    AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold,  absolutePositivityThreshold);  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold,  absolutePositivityThreshold);  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
243	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold,  absolutePositivityThreshold  [CE]  illegal  start  of  expression  [FE]      AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold,  absolutePositivityThreshold  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException(relativeSymmetryThreshold,  absolutePositivityThreshold	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
244	[BUG]  [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [CE]  illegal  start  of  expression  [FE]        AssertionError    [CONTEXT]      NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();      [BUGGY]          lTData    =    matrix.getData();    lTData  =  matrix.getData();  if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }  [BUGGY]      cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	                lTData        =        matrix.getData();        lTData    =    matrix.getData();    if(order  <  =  0)  {  lTData  =  matrix.getData();  lTData  =  matrix.getData();  }  else  {  throw  new  NotPositiveDefiniteMatrixException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
