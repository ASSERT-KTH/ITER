projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getColumnDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getRowDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getLowerCase();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getColumnDimension(order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=null;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=lTData;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=(lTData==null)?null:lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=(lTData!=null)?null:lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDeltaDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDelta();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106RealMatrixcachedL=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newRealMatrix(lTData,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newdouble[order][lTData.length];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newRealMatrix(lTData.length,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106((RealMatrix)lTData).clear();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106double[]cachedL=lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newRealMatrix(lTData,lTData.length);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newRealMatrix(lTData.length,order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106((RealMatrix)lTData).reset();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106((RealMatrix)lTData).remove(lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106((RealMatrix)lTData).setIndex(order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getDataDimension();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData(order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getDataImpl();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getDataRef();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106RealMatrixcachedL=matrix.getData(order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106RealMatrixcachedLT=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106RealMatrixcachedL=matrix.getDataRef();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDeltaDimension()-order;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDeltaDimension()-1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDeltaDimension()+1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newdouble[order][lTData.length+1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newdouble[lTData.length][order];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newdouble[order][lTData.length-1];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106double[]cachedL=ltData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106Double[]cachedL=lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newRealMatrix(lTData,order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newRealMatrix(lTData,lTQ);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newRealMatrix(lTData,ltQ);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getColumnDimension(order,cachedLT);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getColumnDimension(order,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getColumnDimension(order,dataArea);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();lTData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();((RealMatrix)matrix).setData(lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();((RealMatrix)matrix).data=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();((RealMatrix)matrix).getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDelta()-order;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDelta()-1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=matrix.getMaxDelta()+1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=(lTData!=null)?null:lTData;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106LTDatalTData=matrix.getLowerCase();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getLowerCase(order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106CachedL=(lTData==null)?null:lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106double[]cachedL=lTData.length+1;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getDataLength();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=lTData[order];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106RealMatrixcachedL=matrix.getDataImpl();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106cachedL=newdouble[lTData[order][lTData.length];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=absolutePositivityThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=relativeSymmetryThreshold;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=Math.min(order,lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();((RealMatrix)matrix).relativeSymmetryThreshold=0;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106LTData=matrix.getLowerCase();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();LTData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getData();LTEData=matrix.getData();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106double[]cachedL=newdouble[lTData.length];
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106double[]cachedL=lTData.length,lTData.length;
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106lTData=matrix.getDataItem(order);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106intmaxDelta=lTData.getMaxDelta();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106RealMatrixcachedL=matrix.getDataRelativeSymmetryThreshold();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106((RealMatrix)lTData).remove();
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106((RealMatrix)lTData).removeAll(lTData);
projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java106((RealMatrix)lTData).detachFromPosition();
