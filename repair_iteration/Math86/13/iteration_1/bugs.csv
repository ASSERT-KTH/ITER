bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    lTData  =  matrix.getColumnDimension();  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    lTData  =  matrix.getColumnDimension();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    lTData  =  matrix.getColumnDimension();		non-compiled	[CE]  incompatible  types	27	None	add
2	[BUG]  [BUGGY]    lTData  =  matrix.getRowDimension();  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    lTData  =  matrix.getRowDimension();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    lTData  =  matrix.getRowDimension();		non-compiled	[CE]  incompatible  types	27	None	add
3	[BUG]  [BUGGY]    lTData  =  matrix.getLowerCase();  [CE]  cannot  find  symbol  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    lTData  =  matrix.getLowerCase();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    lTData  =  matrix.getLowerCase();		non-compiled	[CE]  cannot  find  symbol	27	None	add
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    lTData  =  matrix.getData();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	add	    lTData  =  matrix.getData();		compilable	  [FE]  AssertionError  	27	2	add
5	[BUG]  [BUGGY]    lTData  =  matrix.getData();  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    lTData  =  matrix.getData();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    lTData  =  matrix.getData();		compilable	  [FE]  AssertionError  	27	2	add
6	[BUG]  [BUGGY]    lTData  =  matrix.getColumnDimension(order);  [CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;  [FE]            AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    lTData  =  matrix.getColumnDimension(order);  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    lTData  =  matrix.getColumnDimension(order);		non-compiled	[CE]  method  getColumnDimension  in  interface  AnyMatrix  cannot  be  applied  to  given  types;	27	None	add
7	[BUG]  [BUGGY]  cachedL=  lTData;  [CE]  incompatible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]  cachedL=  lTData;  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  lTData;	cachedL=  null;  	non-compiled	[CE]  incompatible  types	26	None	replace
8	[BUG]  [BUGGY]  cachedL=(lTData  ==  null)?  null  :  lTData.length;  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]  cachedL=(lTData  ==  null)?  null  :  lTData.length;  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=(lTData  ==  null)?  null  :  lTData.length;	cachedL=  null;  	non-compiled	[CE]  incompatible  types	26	None	replace
9	[BUG]  [BUGGY]  cachedL=(lTData!=  null)?  null  :  lTData.length;  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]  cachedL=(lTData!=  null)?  null  :  lTData.length;  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=(lTData!=  null)?  null  :  lTData.length;	cachedL=  null;  	non-compiled	[CE]  incompatible  types	26	None	replace
10	[BUG]  [BUGGY]    int  maxDelta  =  matrix.getMaxDeltaDimension();  [CE]  cannot  find  symbol  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    int  maxDelta  =  matrix.getMaxDeltaDimension();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    int  maxDelta  =  matrix.getMaxDeltaDimension();		non-compiled	[CE]  cannot  find  symbol	27	None	add
11	[BUG]  [BUGGY]    int  maxDelta  =  matrix.getMaxDelta();  [CE]  cannot  find  symbol  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    int  maxDelta  =  matrix.getMaxDelta();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    int  maxDelta  =  matrix.getMaxDelta();		non-compiled	[CE]  cannot  find  symbol	27	None	add
12	[BUG]  [BUGGY]    RealMatrix  cachedL  =  matrix.getData();  [CE]  incompatible  types  [FE]        AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    RealMatrix  cachedL  =  matrix.getData();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    RealMatrix  cachedL  =  matrix.getData();		non-compiled	[CE]  incompatible  types	27	None	add
13	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]  cachedL=  new  RealMatrix(lTData,  lTData);  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData,  lTData);	cachedL=  null;  	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	26	None	replace
14	[BUG]  [BUGGY]  cachedL=  new  double[order][lTData.length];  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]  cachedL=  new  double[order][lTData.length];  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  double[order][lTData.length];	cachedL=  null;  	non-compiled	[CE]  incompatible  types	26	None	replace
15	[BUG]  [BUGGY]  cachedL=  new  RealMatrix(lTData.length,  lTData.length);  [CE]  RealMatrix  is  abstract;  cannot  be  instantiated  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]  cachedL=  new  RealMatrix(lTData.length,  lTData.length);  [BUGGY]  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	cachedL=  new  RealMatrix(lTData.length,  lTData.length);	cachedL=  null;  	non-compiled	[CE]  RealMatrix  is  abstract;  cannot  be  instantiated	26	None	replace
16	[BUG]  [BUGGY]    ((  RealMatrix)lTData).clear();  [CE]  inconvertible  types  [FE]    AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    ((  RealMatrix)lTData).clear();  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    ((  RealMatrix)lTData).clear();		non-compiled	[CE]  inconvertible  types	27	None	add
17	[BUG]  [BUGGY]    double[]  cachedL  =  lTData.length;  [CE]  incompatible  types  [FE]      AssertionError  [CONTEXT]  NotSymmetricMatrixException,  NotPositiveDefiniteMatrixException  {  if  (!matrix.isSquare())  {  throw  new  NonSquareMatrixException(matrix.getRowDimension(),  matrix.getColumnDimension());  }  final  int  order  =  matrix.getRowDimension();  lTData  =  matrix.getData();  [BUGGY]    double[]  cachedL  =  lTData.length;  [BUGGY]  cachedL=  null;  cachedLT  =  null;  for  (int  i  =  0;  i  <  order;  ++i)  {  final  double[]  lI  =  lTData[i];  if  (lTData[i][i]  <  absolutePositivityThreshold)  {  throw  new  NotPositiveDefiniteMatrixException();  }  [CLASS]  CholeskyDecompositionImpl  Solver  [METHOD]  <init>  [RETURN_TYPE]  RealMatrix,double,double)  RealMatrix  matrix  final  double  relativeSymmetryThreshold  final  double  absolutePositivityThreshold  [VARIABLES]  double[][]  lTData  boolean  RealMatrix  cachedL  cachedLT  matrix  double[]  lI  lJ  ltI  ltQ  double  DEFAULT_ABSOLUTE_POSITIVITY_THRESHOLD  DEFAULT_RELATIVE_SYMMETRY_THRESHOLD  absolutePositivityThreshold  inverse  lIJ  lJI  maxDelta  relativeSymmetryThreshold  int  i  j  order  p  q  	projects/Math86/src/java/org/apache/commons/math/linear/CholeskyDecompositionImpl.java	0.5	106	106	2	replace	    double[]  cachedL  =  lTData.length;		non-compiled	[CE]  incompatible  types	27	None	add
